/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4370:(e,t,r)=>{"use strict";r(8783),r(1038);var n=r(857);e.exports=n.Array.from},3662:(e,t,r)=>{"use strict";r(6992),r(1532),r(1539),r(8783);var n=r(857);e.exports=n.Map},9116:(e,t,r)=>{"use strict";r(9601);var n=r(857);e.exports=n.Object.assign},8188:(e,t,r)=>{"use strict";r(6992),r(1539),r(189),r(8783);var n=r(857);e.exports=n.Set},9074:(e,t,r)=>{"use strict";r(6992),r(1539),r(4129);var n=r(857);e.exports=n.WeakMap},9662:(e,t,r)=>{"use strict";var n=r(614),i=r(6330),o=TypeError;e.exports=function(e){if(n(e))return e;throw o(i(e)+" is not a function")}},6077:(e,t,r)=>{"use strict";var n=r(614),i=String,o=TypeError;e.exports=function(e){if("object"==typeof e||n(e))return e;throw o("Can't set "+i(e)+" as a prototype")}},1223:(e,t,r)=>{"use strict";var n=r(5112),i=r(30),o=r(3070).f,a=n("unscopables"),s=Array.prototype;void 0===s[a]&&o(s,a,{configurable:!0,value:i(null)}),e.exports=function(e){s[a][e]=!0}},5787:(e,t,r)=>{"use strict";var n=r(7976),i=TypeError;e.exports=function(e,t){if(n(t,e))return e;throw i("Incorrect invocation")}},9670:(e,t,r)=>{"use strict";var n=r(111),i=String,o=TypeError;e.exports=function(e){if(n(e))return e;throw o(i(e)+" is not an object")}},7556:(e,t,r)=>{"use strict";var n=r(7293);e.exports=n((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},8457:(e,t,r)=>{"use strict";var n=r(9974),i=r(6916),o=r(7908),a=r(3411),s=r(7659),l=r(4411),c=r(6244),h=r(6135),u=r(4121),p=r(1246),m=Array;e.exports=function(e){var t=o(e),r=l(this),d=arguments.length,f=d>1?arguments[1]:void 0,g=void 0!==f;g&&(f=n(f,d>2?arguments[2]:void 0));var v,b,y,x,w,k,S=p(t),z=0;if(!S||this===m&&s(S))for(v=c(t),b=r?new this(v):m(v);v>z;z++)k=g?f(t[z],z):t[z],h(b,z,k);else for(w=(x=u(t,S)).next,b=r?new this:[];!(y=i(w,x)).done;z++)k=g?a(x,f,[y.value,z],!0):y.value,h(b,z,k);return b.length=z,b}},1318:(e,t,r)=>{"use strict";var n=r(5656),i=r(1400),o=r(6244),a=function(e){return function(t,r,a){var s,l=n(t),c=o(l),h=i(a,c);if(e&&r!=r){for(;c>h;)if((s=l[h++])!=s)return!0}else for(;c>h;h++)if((e||h in l)&&l[h]===r)return e||h||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:(e,t,r)=>{"use strict";var n=r(9974),i=r(1702),o=r(8361),a=r(7908),s=r(6244),l=r(5417),c=i([].push),h=function(e){var t=1===e,r=2===e,i=3===e,h=4===e,u=6===e,p=7===e,m=5===e||u;return function(d,f,g,v){for(var b,y,x=a(d),w=o(x),k=n(f,g),S=s(w),z=0,M=v||l,T=t?M(d,S):r||p?M(d,0):void 0;S>z;z++)if((m||z in w)&&(y=k(b=w[z],z,x),e))if(t)T[z]=y;else if(y)switch(e){case 3:return!0;case 5:return b;case 6:return z;case 2:c(T,b)}else switch(e){case 4:return!1;case 7:c(T,b)}return u?-1:i||h?h:T}};e.exports={forEach:h(0),map:h(1),filter:h(2),some:h(3),every:h(4),find:h(5),findIndex:h(6),filterReject:h(7)}},1589:(e,t,r)=>{"use strict";var n=r(1400),i=r(6244),o=r(6135),a=Array,s=Math.max;e.exports=function(e,t,r){for(var l=i(e),c=n(t,l),h=n(void 0===r?l:r,l),u=a(s(h-c,0)),p=0;c<h;c++,p++)o(u,p,e[c]);return u.length=p,u}},7475:(e,t,r)=>{"use strict";var n=r(3157),i=r(4411),o=r(111),a=r(5112)("species"),s=Array;e.exports=function(e){var t;return n(e)&&(t=e.constructor,(i(t)&&(t===s||n(t.prototype))||o(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?s:t}},5417:(e,t,r)=>{"use strict";var n=r(7475);e.exports=function(e,t){return new(n(e))(0===t?0:t)}},3411:(e,t,r)=>{"use strict";var n=r(9670),i=r(9212);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){i(e,"throw",t)}}},7072:(e,t,r)=>{"use strict";var n=r(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},e(o)}catch(e){}return r}},4326:(e,t,r)=>{"use strict";var n=r(1702),i=n({}.toString),o=n("".slice);e.exports=function(e){return o(i(e),8,-1)}},648:(e,t,r)=>{"use strict";var n=r(1694),i=r(614),o=r(4326),a=r(5112)("toStringTag"),s=Object,l="Arguments"===o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=s(e),a))?r:l?o(t):"Object"===(n=o(t))&&i(t.callee)?"Arguments":n}},5631:(e,t,r)=>{"use strict";var n=r(30),i=r(7045),o=r(9190),a=r(9974),s=r(5787),l=r(8554),c=r(408),h=r(1656),u=r(6178),p=r(6340),m=r(9781),d=r(2423).fastKey,f=r(9909),g=f.set,v=f.getterFor;e.exports={getConstructor:function(e,t,r,h){var u=e((function(e,i){s(e,p),g(e,{type:t,index:n(null),first:void 0,last:void 0,size:0}),m||(e.size=0),l(i)||c(i,e[h],{that:e,AS_ENTRIES:r})})),p=u.prototype,f=v(t),b=function(e,t,r){var n,i,o=f(e),a=y(e,t);return a?a.value=r:(o.last=a={index:i=d(t,!0),key:t,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),m?o.size++:e.size++,"F"!==i&&(o.index[i]=a)),e},y=function(e,t){var r,n=f(e),i=d(t);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key===t)return r};return o(p,{clear:function(){for(var e=f(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,m?e.size=0:this.size=0},delete:function(e){var t=this,r=f(t),n=y(t,e);if(n){var i=n.next,o=n.previous;delete r.index[n.index],n.removed=!0,o&&(o.next=i),i&&(i.previous=o),r.first===n&&(r.first=i),r.last===n&&(r.last=o),m?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=f(this),n=a(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!y(this,e)}}),o(p,r?{get:function(e){var t=y(this,e);return t&&t.value},set:function(e,t){return b(this,0===e?0:e,t)}}:{add:function(e){return b(this,e=0===e?0:e,e)}}),m&&i(p,"size",{configurable:!0,get:function(){return f(this).size}}),u},setStrong:function(e,t,r){var n=t+" Iterator",i=v(t),o=v(n);h(e,t,(function(e,t){g(this,{type:n,target:e,state:i(e),kind:t,last:void 0})}),(function(){for(var e=o(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?u("keys"===t?r.key:"values"===t?r.value:[r.key,r.value],!1):(e.target=void 0,u(void 0,!0))}),r?"entries":"values",!r,!0),p(t)}}},9320:(e,t,r)=>{"use strict";var n=r(1702),i=r(9190),o=r(2423).getWeakData,a=r(5787),s=r(9670),l=r(8554),c=r(111),h=r(408),u=r(2092),p=r(2597),m=r(9909),d=m.set,f=m.getterFor,g=u.find,v=u.findIndex,b=n([].splice),y=0,x=function(e){return e.frozen||(e.frozen=new w)},w=function(){this.entries=[]},k=function(e,t){return g(e.entries,(function(e){return e[0]===t}))};w.prototype={get:function(e){var t=k(this,e);if(t)return t[1]},has:function(e){return!!k(this,e)},set:function(e,t){var r=k(this,e);r?r[1]=t:this.entries.push([e,t])},delete:function(e){var t=v(this.entries,(function(t){return t[0]===e}));return~t&&b(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,r,n){var u=e((function(e,i){a(e,m),d(e,{type:t,id:y++,frozen:void 0}),l(i)||h(i,e[n],{that:e,AS_ENTRIES:r})})),m=u.prototype,g=f(t),v=function(e,t,r){var n=g(e),i=o(s(t),!0);return!0===i?x(n).set(t,r):i[n.id]=r,e};return i(m,{delete:function(e){var t=g(this);if(!c(e))return!1;var r=o(e);return!0===r?x(t).delete(e):r&&p(r,t.id)&&delete r[t.id]},has:function(e){var t=g(this);if(!c(e))return!1;var r=o(e);return!0===r?x(t).has(e):r&&p(r,t.id)}}),i(m,r?{get:function(e){var t=g(this);if(c(e)){var r=o(e);return!0===r?x(t).get(e):r?r[t.id]:void 0}},set:function(e,t){return v(this,e,t)}}:{add:function(e){return v(this,e,!0)}}),u}}},7710:(e,t,r)=>{"use strict";var n=r(2109),i=r(7854),o=r(1702),a=r(4705),s=r(8052),l=r(2423),c=r(408),h=r(5787),u=r(614),p=r(8554),m=r(111),d=r(7293),f=r(7072),g=r(8003),v=r(9587);e.exports=function(e,t,r){var b=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),x=b?"set":"add",w=i[e],k=w&&w.prototype,S=w,z={},M=function(e){var t=o(k[e]);s(k,e,"add"===e?function(e){return t(this,0===e?0:e),this}:"delete"===e?function(e){return!(y&&!m(e))&&t(this,0===e?0:e)}:"get"===e?function(e){return y&&!m(e)?void 0:t(this,0===e?0:e)}:"has"===e?function(e){return!(y&&!m(e))&&t(this,0===e?0:e)}:function(e,r){return t(this,0===e?0:e,r),this})};if(a(e,!u(w)||!(y||k.forEach&&!d((function(){(new w).entries().next()})))))S=r.getConstructor(t,e,b,x),l.enable();else if(a(e,!0)){var T=new S,A=T[x](y?{}:-0,1)!==T,C=d((function(){T.has(1)})),O=f((function(e){new w(e)})),E=!y&&d((function(){for(var e=new w,t=5;t--;)e[x](t,t);return!e.has(-0)}));O||((S=t((function(e,t){h(e,k);var r=v(new w,e,S);return p(t)||c(t,r[x],{that:r,AS_ENTRIES:b}),r}))).prototype=k,k.constructor=S),(C||E)&&(M("delete"),M("has"),b&&M("get")),(E||A)&&M(x),y&&k.clear&&delete k.clear}return z[e]=S,n({global:!0,constructor:!0,forced:S!==w},z),g(S,e),y||r.setStrong(S,e,b),S}},9920:(e,t,r)=>{"use strict";var n=r(2597),i=r(3887),o=r(1236),a=r(3070);e.exports=function(e,t,r){for(var s=i(t),l=a.f,c=o.f,h=0;h<s.length;h++){var u=s[h];n(e,u)||r&&n(r,u)||l(e,u,c(t,u))}}},8544:(e,t,r)=>{"use strict";var n=r(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},6178:e=>{"use strict";e.exports=function(e,t){return{value:e,done:t}}},8880:(e,t,r)=>{"use strict";var n=r(9781),i=r(3070),o=r(9114);e.exports=n?function(e,t,r){return i.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:(e,t,r)=>{"use strict";var n=r(4948),i=r(3070),o=r(9114);e.exports=function(e,t,r){var a=n(t);a in e?i.f(e,a,o(0,r)):e[a]=r}},7045:(e,t,r)=>{"use strict";var n=r(6339),i=r(3070);e.exports=function(e,t,r){return r.get&&n(r.get,t,{getter:!0}),r.set&&n(r.set,t,{setter:!0}),i.f(e,t,r)}},8052:(e,t,r)=>{"use strict";var n=r(614),i=r(3070),o=r(6339),a=r(3072);e.exports=function(e,t,r,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:t;if(n(r)&&o(r,c,s),s.global)l?e[t]=r:a(t,r);else{try{s.unsafe?e[t]&&(l=!0):delete e[t]}catch(e){}l?e[t]=r:i.f(e,t,{value:r,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},9190:(e,t,r)=>{"use strict";var n=r(8052);e.exports=function(e,t,r){for(var i in t)n(e,i,t[i],r);return e}},3072:(e,t,r)=>{"use strict";var n=r(7854),i=Object.defineProperty;e.exports=function(e,t){try{i(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},9781:(e,t,r)=>{"use strict";var n=r(7293);e.exports=!n((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:e=>{"use strict";var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:r}},317:(e,t,r)=>{"use strict";var n=r(7854),i=r(111),o=n.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},8113:e=>{"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},7392:(e,t,r)=>{"use strict";var n,i,o=r(7854),a=r(8113),s=o.process,l=o.Deno,c=s&&s.versions||l&&l.version,h=c&&c.v8;h&&(i=(n=h.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!i&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(i=+n[1]),e.exports=i},748:e=>{"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(e,t,r)=>{"use strict";var n=r(7854),i=r(1236).f,o=r(8880),a=r(8052),s=r(3072),l=r(9920),c=r(4705);e.exports=function(e,t){var r,h,u,p,m,d=e.target,f=e.global,g=e.stat;if(r=f?n:g?n[d]||s(d,{}):(n[d]||{}).prototype)for(h in t){if(p=t[h],u=e.dontCallGetSet?(m=i(r,h))&&m.value:r[h],!c(f?h:d+(g?".":"#")+h,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&o(p,"sham",!0),a(r,h,p,e)}}},7293:e=>{"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},6677:(e,t,r)=>{"use strict";var n=r(7293);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(e,t,r)=>{"use strict";var n=r(1470),i=r(9662),o=r(4374),a=n(n.bind);e.exports=function(e,t){return i(e),void 0===t?e:o?a(e,t):function(){return e.apply(t,arguments)}}},4374:(e,t,r)=>{"use strict";var n=r(7293);e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:(e,t,r)=>{"use strict";var n=r(4374),i=Function.prototype.call;e.exports=n?i.bind(i):function(){return i.apply(i,arguments)}},6530:(e,t,r)=>{"use strict";var n=r(9781),i=r(2597),o=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,s=i(o,"name"),l=s&&"something"===function(){}.name,c=s&&(!n||n&&a(o,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},5668:(e,t,r)=>{"use strict";var n=r(1702),i=r(9662);e.exports=function(e,t,r){try{return n(i(Object.getOwnPropertyDescriptor(e,t)[r]))}catch(e){}}},1470:(e,t,r)=>{"use strict";var n=r(4326),i=r(1702);e.exports=function(e){if("Function"===n(e))return i(e)}},1702:(e,t,r)=>{"use strict";var n=r(4374),i=Function.prototype,o=i.call,a=n&&i.bind.bind(o,o);e.exports=n?a:function(e){return function(){return o.apply(e,arguments)}}},5005:(e,t,r)=>{"use strict";var n=r(7854),i=r(614);e.exports=function(e,t){return arguments.length<2?(r=n[e],i(r)?r:void 0):n[e]&&n[e][t];var r}},1246:(e,t,r)=>{"use strict";var n=r(648),i=r(8173),o=r(8554),a=r(7497),s=r(5112)("iterator");e.exports=function(e){if(!o(e))return i(e,s)||i(e,"@@iterator")||a[n(e)]}},4121:(e,t,r)=>{"use strict";var n=r(6916),i=r(9662),o=r(9670),a=r(6330),s=r(1246),l=TypeError;e.exports=function(e,t){var r=arguments.length<2?s(e):t;if(i(r))return o(n(r,e));throw l(a(e)+" is not iterable")}},8173:(e,t,r)=>{"use strict";var n=r(9662),i=r(8554);e.exports=function(e,t){var r=e[t];return i(r)?void 0:n(r)}},7854:function(e,t,r){"use strict";var n=function(e){return e&&e.Math===Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||this||Function("return this")()},2597:(e,t,r)=>{"use strict";var n=r(1702),i=r(7908),o=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(i(e),t)}},3501:e=>{"use strict";e.exports={}},490:(e,t,r)=>{"use strict";var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{"use strict";var n=r(9781),i=r(7293),o=r(317);e.exports=!n&&!i((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},8361:(e,t,r)=>{"use strict";var n=r(1702),i=r(7293),o=r(4326),a=Object,s=n("".split);e.exports=i((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"===o(e)?s(e,""):a(e)}:a},9587:(e,t,r)=>{"use strict";var n=r(614),i=r(111),o=r(7674);e.exports=function(e,t,r){var a,s;return o&&n(a=t.constructor)&&a!==r&&i(s=a.prototype)&&s!==r.prototype&&o(e,s),e}},2788:(e,t,r)=>{"use strict";var n=r(1702),i=r(614),o=r(5465),a=n(Function.toString);i(o.inspectSource)||(o.inspectSource=function(e){return a(e)}),e.exports=o.inspectSource},2423:(e,t,r)=>{"use strict";var n=r(2109),i=r(1702),o=r(3501),a=r(111),s=r(2597),l=r(3070).f,c=r(8006),h=r(1156),u=r(2050),p=r(9711),m=r(6677),d=!1,f=p("meta"),g=0,v=function(e){l(e,f,{value:{objectID:"O"+g++,weakData:{}}})},b=e.exports={enable:function(){b.enable=function(){},d=!0;var e=c.f,t=i([].splice),r={};r[f]=1,e(r).length&&(c.f=function(r){for(var n=e(r),i=0,o=n.length;i<o;i++)if(n[i]===f){t(n,i,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:h.f}))},fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,f)){if(!u(e))return"F";if(!t)return"E";v(e)}return e[f].objectID},getWeakData:function(e,t){if(!s(e,f)){if(!u(e))return!0;if(!t)return!1;v(e)}return e[f].weakData},onFreeze:function(e){return m&&d&&u(e)&&!s(e,f)&&v(e),e}};o[f]=!0},9909:(e,t,r)=>{"use strict";var n,i,o,a=r(4811),s=r(7854),l=r(111),c=r(8880),h=r(2597),u=r(5465),p=r(6200),m=r(3501),d="Object already initialized",f=s.TypeError,g=s.WeakMap;if(a||u.state){var v=u.state||(u.state=new g);v.get=v.get,v.has=v.has,v.set=v.set,n=function(e,t){if(v.has(e))throw f(d);return t.facade=e,v.set(e,t),t},i=function(e){return v.get(e)||{}},o=function(e){return v.has(e)}}else{var b=p("state");m[b]=!0,n=function(e,t){if(h(e,b))throw f(d);return t.facade=e,c(e,b,t),t},i=function(e){return h(e,b)?e[b]:{}},o=function(e){return h(e,b)}}e.exports={set:n,get:i,has:o,enforce:function(e){return o(e)?i(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!l(t)||(r=i(t)).type!==e)throw f("Incompatible receiver, "+e+" required");return r}}}},7659:(e,t,r)=>{"use strict";var n=r(5112),i=r(7497),o=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||a[o]===e)}},3157:(e,t,r)=>{"use strict";var n=r(4326);e.exports=Array.isArray||function(e){return"Array"===n(e)}},614:(e,t,r)=>{"use strict";var n=r(4154),i=n.all;e.exports=n.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},4411:(e,t,r)=>{"use strict";var n=r(1702),i=r(7293),o=r(614),a=r(648),s=r(5005),l=r(2788),c=function(){},h=[],u=s("Reflect","construct"),p=/^\s*(?:class|function)\b/,m=n(p.exec),d=!p.exec(c),f=function(e){if(!o(e))return!1;try{return u(c,h,e),!0}catch(e){return!1}},g=function(e){if(!o(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return d||!!m(p,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!u||i((function(){var e;return f(f.call)||!f(Object)||!f((function(){e=!0}))||e}))?g:f},4705:(e,t,r)=>{"use strict";var n=r(7293),i=r(614),o=/#|\.prototype\./,a=function(e,t){var r=l[s(e)];return r===h||r!==c&&(i(t)?n(t):!!t)},s=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},c=a.NATIVE="N",h=a.POLYFILL="P";e.exports=a},8554:e=>{"use strict";e.exports=function(e){return null==e}},111:(e,t,r)=>{"use strict";var n=r(614),i=r(4154),o=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:n(e)||e===o}:function(e){return"object"==typeof e?null!==e:n(e)}},1913:e=>{"use strict";e.exports=!1},2190:(e,t,r)=>{"use strict";var n=r(5005),i=r(614),o=r(7976),a=r(3307),s=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=n("Symbol");return i(t)&&o(t.prototype,s(e))}},408:(e,t,r)=>{"use strict";var n=r(9974),i=r(6916),o=r(9670),a=r(6330),s=r(7659),l=r(6244),c=r(7976),h=r(4121),u=r(1246),p=r(9212),m=TypeError,d=function(e,t){this.stopped=e,this.result=t},f=d.prototype;e.exports=function(e,t,r){var g,v,b,y,x,w,k,S=r&&r.that,z=!(!r||!r.AS_ENTRIES),M=!(!r||!r.IS_RECORD),T=!(!r||!r.IS_ITERATOR),A=!(!r||!r.INTERRUPTED),C=n(t,S),O=function(e){return g&&p(g,"normal",e),new d(!0,e)},E=function(e){return z?(o(e),A?C(e[0],e[1],O):C(e[0],e[1])):A?C(e,O):C(e)};if(M)g=e.iterator;else if(T)g=e;else{if(!(v=u(e)))throw m(a(e)+" is not iterable");if(s(v)){for(b=0,y=l(e);y>b;b++)if((x=E(e[b]))&&c(f,x))return x;return new d(!1)}g=h(e,v)}for(w=M?e.next:g.next;!(k=i(w,g)).done;){try{x=E(k.value)}catch(e){p(g,"throw",e)}if("object"==typeof x&&x&&c(f,x))return x}return new d(!1)}},9212:(e,t,r)=>{"use strict";var n=r(6916),i=r(9670),o=r(8173);e.exports=function(e,t,r){var a,s;i(e);try{if(!(a=o(e,"return"))){if("throw"===t)throw r;return r}a=n(a,e)}catch(e){s=!0,a=e}if("throw"===t)throw r;if(s)throw a;return i(a),r}},3061:(e,t,r)=>{"use strict";var n=r(3383).IteratorPrototype,i=r(30),o=r(9114),a=r(8003),s=r(7497),l=function(){return this};e.exports=function(e,t,r,c){var h=t+" Iterator";return e.prototype=i(n,{next:o(+!c,r)}),a(e,h,!1,!0),s[h]=l,e}},1656:(e,t,r)=>{"use strict";var n=r(2109),i=r(6916),o=r(1913),a=r(6530),s=r(614),l=r(3061),c=r(9518),h=r(7674),u=r(8003),p=r(8880),m=r(8052),d=r(5112),f=r(7497),g=r(3383),v=a.PROPER,b=a.CONFIGURABLE,y=g.IteratorPrototype,x=g.BUGGY_SAFARI_ITERATORS,w=d("iterator"),k="keys",S="values",z="entries",M=function(){return this};e.exports=function(e,t,r,a,d,g,T){l(r,t,a);var A,C,O,E=function(e){if(e===d&&_)return _;if(!x&&e in R)return R[e];switch(e){case k:case S:case z:return function(){return new r(this,e)}}return function(){return new r(this)}},B=t+" Iterator",I=!1,R=e.prototype,N=R[w]||R["@@iterator"]||d&&R[d],_=!x&&N||E(d),q="Array"===t&&R.entries||N;if(q&&(A=c(q.call(new e)))!==Object.prototype&&A.next&&(o||c(A)===y||(h?h(A,y):s(A[w])||m(A,w,M)),u(A,B,!0,!0),o&&(f[B]=M)),v&&d===S&&N&&N.name!==S&&(!o&&b?p(R,"name",S):(I=!0,_=function(){return i(N,this)})),d)if(C={values:E(S),keys:g?_:E(k),entries:E(z)},T)for(O in C)(x||I||!(O in R))&&m(R,O,C[O]);else n({target:t,proto:!0,forced:x||I},C);return o&&!T||R[w]===_||m(R,w,_,{name:d}),f[t]=_,C}},3383:(e,t,r)=>{"use strict";var n,i,o,a=r(7293),s=r(614),l=r(111),c=r(30),h=r(9518),u=r(8052),p=r(5112),m=r(1913),d=p("iterator"),f=!1;[].keys&&("next"in(o=[].keys())?(i=h(h(o)))!==Object.prototype&&(n=i):f=!0),!l(n)||a((function(){var e={};return n[d].call(e)!==e}))?n={}:m&&(n=c(n)),s(n[d])||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:f}},7497:e=>{"use strict";e.exports={}},6244:(e,t,r)=>{"use strict";var n=r(7466);e.exports=function(e){return n(e.length)}},6339:(e,t,r)=>{"use strict";var n=r(1702),i=r(7293),o=r(614),a=r(2597),s=r(9781),l=r(6530).CONFIGURABLE,c=r(2788),h=r(9909),u=h.enforce,p=h.get,m=String,d=Object.defineProperty,f=n("".slice),g=n("".replace),v=n([].join),b=s&&!i((function(){return 8!==d((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=e.exports=function(e,t,r){"Symbol("===f(m(t),0,7)&&(t="["+g(m(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),r&&r.getter&&(t="get "+t),r&&r.setter&&(t="set "+t),(!a(e,"name")||l&&e.name!==t)&&(s?d(e,"name",{value:t,configurable:!0}):e.name=t),b&&r&&a(r,"arity")&&e.length!==r.arity&&d(e,"length",{value:r.arity});try{r&&a(r,"constructor")&&r.constructor?s&&d(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var n=u(e);return a(n,"source")||(n.source=v(y,"string"==typeof t?t:"")),e};Function.prototype.toString=x((function(){return o(this)&&p(this).source||c(this)}),"toString")},4758:e=>{"use strict";var t=Math.ceil,r=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?r:t)(n)}},1574:(e,t,r)=>{"use strict";var n=r(9781),i=r(1702),o=r(6916),a=r(7293),s=r(1956),l=r(5181),c=r(5296),h=r(7908),u=r(8361),p=Object.assign,m=Object.defineProperty,d=i([].concat);e.exports=!p||a((function(){if(n&&1!==p({b:1},p(m({},"a",{enumerable:!0,get:function(){m(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol("assign detection"),i="abcdefghijklmnopqrst";return e[r]=7,i.split("").forEach((function(e){t[e]=e})),7!==p({},e)[r]||s(p({},t)).join("")!==i}))?function(e,t){for(var r=h(e),i=arguments.length,a=1,p=l.f,m=c.f;i>a;)for(var f,g=u(arguments[a++]),v=p?d(s(g),p(g)):s(g),b=v.length,y=0;b>y;)f=v[y++],n&&!o(m,g,f)||(r[f]=g[f]);return r}:p},30:(e,t,r)=>{"use strict";var n,i=r(9670),o=r(6048),a=r(748),s=r(3501),l=r(490),c=r(317),h=r(6200),u="prototype",p="script",m=h("IE_PROTO"),d=function(){},f=function(e){return"<"+p+">"+e+"</"+p+">"},g=function(e){e.write(f("")),e.close();var t=e.parentWindow.Object;return e=null,t},v=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t,r;v="undefined"!=typeof document?document.domain&&n?g(n):(t=c("iframe"),r="java"+p+":",t.style.display="none",l.appendChild(t),t.src=String(r),(e=t.contentWindow.document).open(),e.write(f("document.F=Object")),e.close(),e.F):g(n);for(var i=a.length;i--;)delete v[u][a[i]];return v()};s[m]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d[u]=i(e),r=new d,d[u]=null,r[m]=e):r=v(),void 0===t?r:o.f(r,t)}},6048:(e,t,r)=>{"use strict";var n=r(9781),i=r(3353),o=r(3070),a=r(9670),s=r(5656),l=r(1956);t.f=n&&!i?Object.defineProperties:function(e,t){a(e);for(var r,n=s(t),i=l(t),c=i.length,h=0;c>h;)o.f(e,r=i[h++],n[r]);return e}},3070:(e,t,r)=>{"use strict";var n=r(9781),i=r(4664),o=r(3353),a=r(9670),s=r(4948),l=TypeError,c=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u="enumerable",p="configurable",m="writable";t.f=n?o?function(e,t,r){if(a(e),t=s(t),a(r),"function"==typeof e&&"prototype"===t&&"value"in r&&m in r&&!r[m]){var n=h(e,t);n&&n[m]&&(e[t]=r.value,r={configurable:p in r?r[p]:n[p],enumerable:u in r?r[u]:n[u],writable:!1})}return c(e,t,r)}:c:function(e,t,r){if(a(e),t=s(t),a(r),i)try{return c(e,t,r)}catch(e){}if("get"in r||"set"in r)throw l("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{"use strict";var n=r(9781),i=r(6916),o=r(5296),a=r(9114),s=r(5656),l=r(4948),c=r(2597),h=r(4664),u=Object.getOwnPropertyDescriptor;t.f=n?u:function(e,t){if(e=s(e),t=l(t),h)try{return u(e,t)}catch(e){}if(c(e,t))return a(!i(o.f,e,t),e[t])}},1156:(e,t,r)=>{"use strict";var n=r(4326),i=r(5656),o=r(8006).f,a=r(1589),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return s&&"Window"===n(e)?function(e){try{return o(e)}catch(e){return a(s)}}(e):o(i(e))}},8006:(e,t,r)=>{"use strict";var n=r(6324),i=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,i)}},5181:(e,t)=>{"use strict";t.f=Object.getOwnPropertySymbols},9518:(e,t,r)=>{"use strict";var n=r(2597),i=r(614),o=r(7908),a=r(6200),s=r(8544),l=a("IE_PROTO"),c=Object,h=c.prototype;e.exports=s?c.getPrototypeOf:function(e){var t=o(e);if(n(t,l))return t[l];var r=t.constructor;return i(r)&&t instanceof r?r.prototype:t instanceof c?h:null}},2050:(e,t,r)=>{"use strict";var n=r(7293),i=r(111),o=r(4326),a=r(7556),s=Object.isExtensible,l=n((function(){s(1)}));e.exports=l||a?function(e){return!!i(e)&&(!a||"ArrayBuffer"!==o(e))&&(!s||s(e))}:s},7976:(e,t,r)=>{"use strict";var n=r(1702);e.exports=n({}.isPrototypeOf)},6324:(e,t,r)=>{"use strict";var n=r(1702),i=r(2597),o=r(5656),a=r(1318).indexOf,s=r(3501),l=n([].push);e.exports=function(e,t){var r,n=o(e),c=0,h=[];for(r in n)!i(s,r)&&i(n,r)&&l(h,r);for(;t.length>c;)i(n,r=t[c++])&&(~a(h,r)||l(h,r));return h}},1956:(e,t,r)=>{"use strict";var n=r(6324),i=r(748);e.exports=Object.keys||function(e){return n(e,i)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,i=n&&!r.call({1:2},1);t.f=i?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},7674:(e,t,r)=>{"use strict";var n=r(5668),i=r(9670),o=r(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.prototype,"__proto__","set"))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return i(r),o(n),t?e(r,n):r.__proto__=n,r}}():void 0)},288:(e,t,r)=>{"use strict";var n=r(1694),i=r(648);e.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},2140:(e,t,r)=>{"use strict";var n=r(6916),i=r(614),o=r(111),a=TypeError;e.exports=function(e,t){var r,s;if("string"===t&&i(r=e.toString)&&!o(s=n(r,e)))return s;if(i(r=e.valueOf)&&!o(s=n(r,e)))return s;if("string"!==t&&i(r=e.toString)&&!o(s=n(r,e)))return s;throw a("Can't convert object to primitive value")}},3887:(e,t,r)=>{"use strict";var n=r(5005),i=r(1702),o=r(8006),a=r(5181),s=r(9670),l=i([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(s(e)),r=a.f;return r?l(t,r(e)):t}},857:(e,t,r)=>{"use strict";var n=r(7854);e.exports=n},4488:(e,t,r)=>{"use strict";var n=r(8554),i=TypeError;e.exports=function(e){if(n(e))throw i("Can't call method on "+e);return e}},6340:(e,t,r)=>{"use strict";var n=r(5005),i=r(7045),o=r(5112),a=r(9781),s=o("species");e.exports=function(e){var t=n(e);a&&t&&!t[s]&&i(t,s,{configurable:!0,get:function(){return this}})}},8003:(e,t,r)=>{"use strict";var n=r(3070).f,i=r(2597),o=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!r&&(e=e.prototype),e&&!i(e,o)&&n(e,o,{configurable:!0,value:t})}},6200:(e,t,r)=>{"use strict";var n=r(2309),i=r(9711),o=n("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},5465:(e,t,r)=>{"use strict";var n=r(7854),i=r(3072),o="__core-js_shared__",a=n[o]||i(o,{});e.exports=a},2309:(e,t,r)=>{"use strict";var n=r(1913),i=r(5465);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.32.1",mode:n?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.1/LICENSE",source:"https://github.com/zloirock/core-js"})},8710:(e,t,r)=>{"use strict";var n=r(1702),i=r(9303),o=r(1340),a=r(4488),s=n("".charAt),l=n("".charCodeAt),c=n("".slice),h=function(e){return function(t,r){var n,h,u=o(a(t)),p=i(r),m=u.length;return p<0||p>=m?e?"":void 0:(n=l(u,p))<55296||n>56319||p+1===m||(h=l(u,p+1))<56320||h>57343?e?s(u,p):n:e?c(u,p,p+2):h-56320+(n-55296<<10)+65536}};e.exports={codeAt:h(!1),charAt:h(!0)}},6293:(e,t,r)=>{"use strict";var n=r(7392),i=r(7293),o=r(7854).String;e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol("symbol detection");return!o(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},1400:(e,t,r)=>{"use strict";var n=r(9303),i=Math.max,o=Math.min;e.exports=function(e,t){var r=n(e);return r<0?i(r+t,0):o(r,t)}},5656:(e,t,r)=>{"use strict";var n=r(8361),i=r(4488);e.exports=function(e){return n(i(e))}},9303:(e,t,r)=>{"use strict";var n=r(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:n(t)}},7466:(e,t,r)=>{"use strict";var n=r(9303),i=Math.min;e.exports=function(e){return e>0?i(n(e),9007199254740991):0}},7908:(e,t,r)=>{"use strict";var n=r(4488),i=Object;e.exports=function(e){return i(n(e))}},7593:(e,t,r)=>{"use strict";var n=r(6916),i=r(111),o=r(2190),a=r(8173),s=r(2140),l=r(5112),c=TypeError,h=l("toPrimitive");e.exports=function(e,t){if(!i(e)||o(e))return e;var r,l=a(e,h);if(l){if(void 0===t&&(t="default"),r=n(l,e,t),!i(r)||o(r))return r;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),s(e,t)}},4948:(e,t,r)=>{"use strict";var n=r(7593),i=r(2190);e.exports=function(e){var t=n(e,"string");return i(t)?t:t+""}},1694:(e,t,r)=>{"use strict";var n={};n[r(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},1340:(e,t,r)=>{"use strict";var n=r(648),i=String;e.exports=function(e){if("Symbol"===n(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},6330:e=>{"use strict";var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9711:(e,t,r)=>{"use strict";var n=r(1702),i=0,o=Math.random(),a=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++i+o,36)}},3307:(e,t,r)=>{"use strict";var n=r(6293);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(e,t,r)=>{"use strict";var n=r(9781),i=r(7293);e.exports=n&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4811:(e,t,r)=>{"use strict";var n=r(7854),i=r(614),o=n.WeakMap;e.exports=i(o)&&/native code/.test(String(o))},5112:(e,t,r)=>{"use strict";var n=r(7854),i=r(2309),o=r(2597),a=r(9711),s=r(6293),l=r(3307),c=n.Symbol,h=i("wks"),u=l?c.for||c:c&&c.withoutSetter||a;e.exports=function(e){return o(h,e)||(h[e]=s&&o(c,e)?c[e]:u("Symbol."+e)),h[e]}},1038:(e,t,r)=>{"use strict";var n=r(2109),i=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(e){Array.from(e)}))},{from:i})},6992:(e,t,r)=>{"use strict";var n=r(5656),i=r(1223),o=r(7497),a=r(9909),s=r(3070).f,l=r(1656),c=r(6178),h=r(1913),u=r(9781),p="Array Iterator",m=a.set,d=a.getterFor(p);e.exports=l(Array,"Array",(function(e,t){m(this,{type:p,target:n(e),index:0,kind:t})}),(function(){var e=d(this),t=e.target,r=e.kind,n=e.index++;if(!t||n>=t.length)return e.target=void 0,c(void 0,!0);switch(r){case"keys":return c(n,!1);case"values":return c(t[n],!1)}return c([n,t[n]],!1)}),"values");var f=o.Arguments=o.Array;if(i("keys"),i("values"),i("entries"),!h&&u&&"values"!==f.name)try{s(f,"name",{value:"values"})}catch(e){}},9098:(e,t,r)=>{"use strict";r(7710)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},1532:(e,t,r)=>{"use strict";r(9098)},9601:(e,t,r)=>{"use strict";var n=r(2109),i=r(1574);n({target:"Object",stat:!0,arity:2,forced:Object.assign!==i},{assign:i})},1539:(e,t,r)=>{"use strict";var n=r(1694),i=r(8052),o=r(288);n||i(Object.prototype,"toString",o,{unsafe:!0})},7227:(e,t,r)=>{"use strict";r(7710)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},189:(e,t,r)=>{"use strict";r(7227)},8783:(e,t,r)=>{"use strict";var n=r(8710).charAt,i=r(1340),o=r(9909),a=r(1656),s=r(6178),l="String Iterator",c=o.set,h=o.getterFor(l);a(String,"String",(function(e){c(this,{type:l,string:i(e),index:0})}),(function(){var e,t=h(this),r=t.string,i=t.index;return i>=r.length?s(void 0,!0):(e=n(r,i),t.index+=e.length,s(e,!1))}))},1202:(e,t,r)=>{"use strict";var n,i=r(6677),o=r(7854),a=r(1702),s=r(9190),l=r(2423),c=r(7710),h=r(9320),u=r(111),p=r(9909).enforce,m=r(7293),d=r(4811),f=Object,g=Array.isArray,v=f.isExtensible,b=f.isFrozen,y=f.isSealed,x=f.freeze,w=f.seal,k={},S={},z=!o.ActiveXObject&&"ActiveXObject"in o,M=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},T=c("WeakMap",M,h),A=T.prototype,C=a(A.set);if(d)if(z){n=h.getConstructor(M,"WeakMap",!0),l.enable();var O=a(A.delete),E=a(A.has),B=a(A.get);s(A,{delete:function(e){if(u(e)&&!v(e)){var t=p(this);return t.frozen||(t.frozen=new n),O(this,e)||t.frozen.delete(e)}return O(this,e)},has:function(e){if(u(e)&&!v(e)){var t=p(this);return t.frozen||(t.frozen=new n),E(this,e)||t.frozen.has(e)}return E(this,e)},get:function(e){if(u(e)&&!v(e)){var t=p(this);return t.frozen||(t.frozen=new n),E(this,e)?B(this,e):t.frozen.get(e)}return B(this,e)},set:function(e,t){if(u(e)&&!v(e)){var r=p(this);r.frozen||(r.frozen=new n),E(this,e)?C(this,e,t):r.frozen.set(e,t)}else C(this,e,t);return this}})}else i&&m((function(){var e=x([]);return C(new T,e,1),!b(e)}))&&s(A,{set:function(e,t){var r;return g(e)&&(b(e)?r=k:y(e)&&(r=S)),C(this,e,t),r===k&&x(e),r===S&&w(e),this}})},4129:(e,t,r)=>{"use strict";r(1202)},642:(e,t,r)=>{(t=r(3645)(!1)).push([e.id,".topnav {\r\n    background-color: #373738;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    position: fixed;\r\n    top: 0px;\r\n    z-index: 10000;\r\n}\r\n\r\n.topnav a {\r\n    float: right;\r\n    color: #cccccc;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n.topnav a:hover {\r\n    background-color: #505050;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}\r\n\r\n.topnav a.active {\r\n    background-color: #303030;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}",""]),e.exports=t},7369:(e,t,r)=>{(t=r(3645)(!1)).push([e.id,".sidebar {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 200px;\r\n    background-color: rgb(37, 37, 38);\r\n    position: fixed;\r\n    height: calc(100% - 48px);\r\n    overflow: auto;\r\n    top: 48px;\r\n}\r\n\r\n.sidebar.sidebar-off{\r\n    display: none;\r\n}\r\n\r\n.sidebar a {\r\n    display: block;\r\n    color: #cccccc;\r\n    padding: 7px;\r\n    text-decoration: none;\r\n    font-size: 13px;\r\n    text-align: center;\r\n}\r\n\r\n.sidebar a.active {\r\n    background-color: rgb(55, 55, 61);\r\n    color: #cccccc;\r\n}\r\n\r\n.sidebar a:hover:not(.active) {\r\n    background-color: rgb(42, 45, 46);\r\n    color: #cccccc;\r\n}",""]),e.exports=t},4763:(e,t,r)=>{(t=r(3645)(!1)).push([e.id,"/*\r\nAtom One Dark by Daniel Gamage\r\nOriginal One Dark Syntax theme from https://github.com/atom/one-dark-syntax\r\nbase:    #282c34\r\nmono-1:  #abb2bf\r\nmono-2:  #818896\r\nmono-3:  #5c6370\r\nhue-1:   #56b6c2\r\nhue-2:   #61aeee\r\nhue-3:   #c678dd\r\nhue-4:   #98c379\r\nhue-5:   #e06c75\r\nhue-5-2: #be5046\r\nhue-6:   #d19a66\r\nhue-6-2: #e6c07b\r\n*/\r\n\r\n.hljs {\r\n    color: #cccccc;\r\n    background: rgb(37,37,38);\r\n  }\r\n  \r\n  .hljs-comment,\r\n  .hljs-quote {\r\n    color: #5c6370;\r\n    font-style: italic;\r\n  }\r\n  \r\n  .hljs-doctag,\r\n  .hljs-keyword,\r\n  .hljs-formula {\r\n    color: #c678dd;\r\n  }\r\n  \r\n  .hljs-section,\r\n  .hljs-name,\r\n  .hljs-selector-tag,\r\n  .hljs-deletion,\r\n  .hljs-subst {\r\n    color: #e06c75;\r\n  }\r\n  \r\n  .hljs-literal {\r\n    color: #56b6c2;\r\n  }\r\n  \r\n  .hljs-string,\r\n  .hljs-regexp,\r\n  .hljs-addition,\r\n  .hljs-attribute,\r\n  .hljs-meta .hljs-string {\r\n    color: #98c379;\r\n  }\r\n  \r\n  .hljs-attr,\r\n  .hljs-variable,\r\n  .hljs-template-variable,\r\n  .hljs-type,\r\n  .hljs-selector-class,\r\n  .hljs-selector-attr,\r\n  .hljs-selector-pseudo,\r\n  .hljs-number {\r\n    color: #d19a66;\r\n  }\r\n  \r\n  .hljs-symbol,\r\n  .hljs-bullet,\r\n  .hljs-link,\r\n  .hljs-meta,\r\n  .hljs-selector-id,\r\n  .hljs-title {\r\n    color: #61aeee;\r\n  }\r\n  \r\n  .hljs-built_in,\r\n  .hljs-title.class_,\r\n  .hljs-class .hljs-title {\r\n    color: #e6c07b;\r\n  }\r\n  \r\n  .hljs-emphasis {\r\n    font-style: italic;\r\n  }\r\n  \r\n  .hljs-strong {\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .hljs-link {\r\n    text-decoration: underline;\r\n  }",""]),e.exports=t},28:(e,t,r)=>{(t=r(3645)(!1)).push([e.id,"body {\r\n    background-color: #1e1e1e !important;\r\n    margin: 0;\r\n    overflow: hidden;\r\n}\r\n\r\npre\r\n{\r\n    background-color: rgb(37,37,38);\r\n    overflow: auto;\r\n}\r\n\r\ncode\r\n{\r\n    color: #cccccc;\r\n}\r\n\r\np\r\n{\r\n    color: #cccccc;\r\n}\r\n\r\na\r\n{\r\n    color: rgb(55, 148,255);\r\n}\r\n\r\ndiv.content {\r\n    margin-left: 200px;\r\n    margin-right: 30px;\r\n    margin-top: 15px;\r\n    /* top: 48px; */\r\n    position: fixed;\r\n    /* padding: 1px 16px; */\r\n    height: calc(100% - 48px);\r\n    width: calc(100% - 230px);\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n}\r\n\r\ndiv.content.sidebar-off {\r\n    width: calc(100% - 60px);\r\n    margin-left: 30px;\r\n}\r\n\r\n#side-close-button\r\n{\r\n    display: block;\r\n    position: fixed;\r\n    width: 30px;\r\n    height: 80px;\r\n    background-color: rgb(55, 55, 56);\r\n    left: 170px;\r\n    top: 50%;\r\n    opacity: 0.5;\r\n    text-align: center;\r\n    line-height: 80px;\r\n    font-size: 17px;\r\n    color: #cccccc;\r\n    cursor: pointer;\r\n}\r\n\r\n#side-close-button.sidebar-off\r\n{\r\n    display: none;\r\n    overflow: hidden;\r\n}\r\n\r\n#side-open-button\r\n{\r\n    display: none;\r\n}\r\n\r\n#side-open-button.sidebar-off\r\n{\r\n    display: block;\r\n    position: fixed;\r\n    width: 30px;\r\n    height: 80px;\r\n    background-color: rgb(55, 55, 56);\r\n    left: 0px;\r\n    top: 50%;\r\n    opacity: 0.5;\r\n    text-align: center;\r\n    line-height: 80px;\r\n    font-size: 17px;\r\n    color: #cccccc;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n}\r\n\r\n.blog p {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog h1 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog h2 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog h3 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog h4 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog h5 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog {\r\n    padding: 20px;\r\n    background-color: rgb(30,30,30);\r\n}\r\n\r\n.blog .medium-image {\r\n    width: 45%;\r\n    max-width: 600px;\r\n}\r\n\r\ndiv.content.noSideBar{\r\n    width: 100%;\r\n    margin-left: 0px;\r\n}\r\n\r\n.blog .katex .base{\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog .katex .tag{\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog .scrollbar-track-y {\r\n    right: 15px;\r\n    width: 15px;\r\n    background-color: rgb(30, 30, 30);\r\n}\r\n\r\n.content.miscs .scrollbar-track-y {\r\n    right: 41px;\r\n}\r\n\r\n.blog .scrollbar-thumb {\r\n    width: 15px;\r\n    background-color: rgb(79, 79, 79);\r\n    border-radius: 0px;\r\n}\r\n\r\n.blog .scroll-content {\r\n    margin-right: 25px;\r\n    margin-top: 8px;\r\n}\r\n\r\n/* width */\r\n::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n    background: rgb(30, 30, 30);\r\n    border-left: 1px solid rgb(66, 66, 66);\r\n    border-right: 1px solid rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: rgb(79, 79, 79);\r\n}",""]),e.exports=t},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r,n,i,o=e[1]||"",a=e[3];if(!a)return o;if(t&&"function"==typeof btoa){var s=(r=a,n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),"/*# ".concat(i," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([s]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&i[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},527:function(e){var t;"undefined"!=typeof self&&self,t=function(){return function(){"use strict";var e={d:function(t,r){for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{default:function(){return ri}});var r=function e(t,r){this.name=void 0,this.position=void 0,this.length=void 0,this.rawMessage=void 0;var n,i,o="KaTeX parse error: "+t,a=r&&r.loc;if(a&&a.start<=a.end){var s=a.lexer.input;n=a.start,i=a.end,n===s.length?o+=" at end of input: ":o+=" at position "+(n+1)+": ";var l=s.slice(n,i).replace(/[^]/g,"$&̲");o+=(n>15?"…"+s.slice(n-15,n):s.slice(0,n))+l+(i+15<s.length?s.slice(i,i+15)+"…":s.slice(i))}var c=new Error(o);return c.name="ParseError",c.__proto__=e.prototype,c.position=n,null!=n&&null!=i&&(c.length=i-n),c.rawMessage=t,c};r.prototype.__proto__=Error.prototype;var n=r,i=/([A-Z])/g,o={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},a=/[&><"']/g,s=function e(t){return"ordgroup"===t.type||"color"===t.type?1===t.body.length?e(t.body[0]):t:"font"===t.type?e(t.body):t},l=function(e,t){return-1!==e.indexOf(t)},c=function(e,t){return void 0===e?t:e},h=function(e){return String(e).replace(a,(function(e){return o[e]}))},u=function(e){return e.replace(i,"-$1").toLowerCase()},p=s,m=function(e){var t=s(e);return"mathord"===t.type||"textord"===t.type||"atom"===t.type},d=function(e){var t=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(e);return null!=t?t[1]:"_relative"},f={displayMode:{type:"boolean",description:"Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",cli:"-d, --display-mode"},output:{type:{enum:["htmlAndMathml","html","mathml"]},description:"Determines the markup language of the output.",cli:"-F, --format <type>"},leqno:{type:"boolean",description:"Render display math in leqno style (left-justified tags)."},fleqn:{type:"boolean",description:"Render display math flush left."},throwOnError:{type:"boolean",default:!0,cli:"-t, --no-throw-on-error",cliDescription:"Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."},errorColor:{type:"string",default:"#cc0000",cli:"-c, --error-color <color>",cliDescription:"A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",cliProcessor:function(e){return"#"+e}},macros:{type:"object",cli:"-m, --macro <def>",cliDescription:"Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",cliDefault:[],cliProcessor:function(e,t){return t.push(e),t}},minRuleThickness:{type:"number",description:"Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",processor:function(e){return Math.max(0,e)},cli:"--min-rule-thickness <size>",cliProcessor:parseFloat},colorIsTextColor:{type:"boolean",description:"Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",cli:"-b, --color-is-text-color"},strict:{type:[{enum:["warn","ignore","error"]},"boolean","function"],description:"Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",cli:"-S, --strict",cliDefault:!1},trust:{type:["boolean","function"],description:"Trust the input, enabling all HTML features such as \\url.",cli:"-T, --trust"},maxSize:{type:"number",default:1/0,description:"If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",processor:function(e){return Math.max(0,e)},cli:"-s, --max-size <n>",cliProcessor:parseInt},maxExpand:{type:"number",default:1e3,description:"Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",processor:function(e){return Math.max(0,e)},cli:"-e, --max-expand <n>",cliProcessor:function(e){return"Infinity"===e?1/0:parseInt(e)}},globalGroup:{type:"boolean",cli:!1}};function g(e){if(e.default)return e.default;var t=e.type,r=Array.isArray(t)?t[0]:t;if("string"!=typeof r)return r.enum[0];switch(r){case"boolean":return!1;case"string":return"";case"number":return 0;case"object":return{}}}var v=function(){function e(e){for(var t in this.displayMode=void 0,this.output=void 0,this.leqno=void 0,this.fleqn=void 0,this.throwOnError=void 0,this.errorColor=void 0,this.macros=void 0,this.minRuleThickness=void 0,this.colorIsTextColor=void 0,this.strict=void 0,this.trust=void 0,this.maxSize=void 0,this.maxExpand=void 0,this.globalGroup=void 0,e=e||{},f)if(f.hasOwnProperty(t)){var r=f[t];this[t]=void 0!==e[t]?r.processor?r.processor(e[t]):e[t]:g(r)}}var t=e.prototype;return t.reportNonstrict=function(e,t,r){var i=this.strict;if("function"==typeof i&&(i=i(e,t,r)),i&&"ignore"!==i){if(!0===i||"error"===i)throw new n("LaTeX-incompatible input and strict mode is set to 'error': "+t+" ["+e+"]",r);"warn"===i?"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"):"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+i+"': "+t+" ["+e+"]")}},t.useStrictBehavior=function(e,t,r){var n=this.strict;if("function"==typeof n)try{n=n(e,t,r)}catch(e){n="error"}return!(!n||"ignore"===n||!0!==n&&"error"!==n&&("warn"===n?("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"),1):("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+n+"': "+t+" ["+e+"]"),1)))},t.isTrusted=function(e){e.url&&!e.protocol&&(e.protocol=d(e.url));var t="function"==typeof this.trust?this.trust(e):this.trust;return Boolean(t)},e}(),b=function(){function e(e,t,r){this.id=void 0,this.size=void 0,this.cramped=void 0,this.id=e,this.size=t,this.cramped=r}var t=e.prototype;return t.sup=function(){return y[x[this.id]]},t.sub=function(){return y[w[this.id]]},t.fracNum=function(){return y[k[this.id]]},t.fracDen=function(){return y[S[this.id]]},t.cramp=function(){return y[z[this.id]]},t.text=function(){return y[M[this.id]]},t.isTight=function(){return this.size>=2},e}(),y=[new b(0,0,!1),new b(1,0,!0),new b(2,1,!1),new b(3,1,!0),new b(4,2,!1),new b(5,2,!0),new b(6,3,!1),new b(7,3,!0)],x=[4,5,4,5,6,7,6,7],w=[5,5,5,5,7,7,7,7],k=[2,3,4,5,6,7,6,7],S=[3,3,5,5,7,7,7,7],z=[1,1,3,3,5,5,7,7],M=[0,1,2,3,2,3,2,3],T={DISPLAY:y[0],TEXT:y[2],SCRIPT:y[4],SCRIPTSCRIPT:y[6]},A=[{name:"latin",blocks:[[256,591],[768,879]]},{name:"cyrillic",blocks:[[1024,1279]]},{name:"armenian",blocks:[[1328,1423]]},{name:"brahmic",blocks:[[2304,4255]]},{name:"georgian",blocks:[[4256,4351]]},{name:"cjk",blocks:[[12288,12543],[19968,40879],[65280,65376]]},{name:"hangul",blocks:[[44032,55215]]}],C=[];function O(e){for(var t=0;t<C.length;t+=2)if(e>=C[t]&&e<=C[t+1])return!0;return!1}A.forEach((function(e){return e.blocks.forEach((function(e){return C.push.apply(C,e)}))}));var E={doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",oiintSize1:"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",oiintSize2:"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",oiiintSize1:"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",oiiintSize2:"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widecheck1:"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",widecheck2:"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck3:"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck4:"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",baraboveleftarrow:"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",rightarrowabovebar:"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"},B=function(){function e(e){this.children=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.children=e,this.classes=[],this.height=0,this.depth=0,this.maxFontSize=0,this.style={}}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){for(var e=document.createDocumentFragment(),t=0;t<this.children.length;t++)e.appendChild(this.children[t].toNode());return e},t.toMarkup=function(){for(var e="",t=0;t<this.children.length;t++)e+=this.children[t].toMarkup();return e},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),I={"AMS-Regular":{32:[0,0,0,0,.25],65:[0,.68889,0,0,.72222],66:[0,.68889,0,0,.66667],67:[0,.68889,0,0,.72222],68:[0,.68889,0,0,.72222],69:[0,.68889,0,0,.66667],70:[0,.68889,0,0,.61111],71:[0,.68889,0,0,.77778],72:[0,.68889,0,0,.77778],73:[0,.68889,0,0,.38889],74:[.16667,.68889,0,0,.5],75:[0,.68889,0,0,.77778],76:[0,.68889,0,0,.66667],77:[0,.68889,0,0,.94445],78:[0,.68889,0,0,.72222],79:[.16667,.68889,0,0,.77778],80:[0,.68889,0,0,.61111],81:[.16667,.68889,0,0,.77778],82:[0,.68889,0,0,.72222],83:[0,.68889,0,0,.55556],84:[0,.68889,0,0,.66667],85:[0,.68889,0,0,.72222],86:[0,.68889,0,0,.72222],87:[0,.68889,0,0,1],88:[0,.68889,0,0,.72222],89:[0,.68889,0,0,.72222],90:[0,.68889,0,0,.66667],107:[0,.68889,0,0,.55556],160:[0,0,0,0,.25],165:[0,.675,.025,0,.75],174:[.15559,.69224,0,0,.94666],240:[0,.68889,0,0,.55556],295:[0,.68889,0,0,.54028],710:[0,.825,0,0,2.33334],732:[0,.9,0,0,2.33334],770:[0,.825,0,0,2.33334],771:[0,.9,0,0,2.33334],989:[.08167,.58167,0,0,.77778],1008:[0,.43056,.04028,0,.66667],8245:[0,.54986,0,0,.275],8463:[0,.68889,0,0,.54028],8487:[0,.68889,0,0,.72222],8498:[0,.68889,0,0,.55556],8502:[0,.68889,0,0,.66667],8503:[0,.68889,0,0,.44445],8504:[0,.68889,0,0,.66667],8513:[0,.68889,0,0,.63889],8592:[-.03598,.46402,0,0,.5],8594:[-.03598,.46402,0,0,.5],8602:[-.13313,.36687,0,0,1],8603:[-.13313,.36687,0,0,1],8606:[.01354,.52239,0,0,1],8608:[.01354,.52239,0,0,1],8610:[.01354,.52239,0,0,1.11111],8611:[.01354,.52239,0,0,1.11111],8619:[0,.54986,0,0,1],8620:[0,.54986,0,0,1],8621:[-.13313,.37788,0,0,1.38889],8622:[-.13313,.36687,0,0,1],8624:[0,.69224,0,0,.5],8625:[0,.69224,0,0,.5],8630:[0,.43056,0,0,1],8631:[0,.43056,0,0,1],8634:[.08198,.58198,0,0,.77778],8635:[.08198,.58198,0,0,.77778],8638:[.19444,.69224,0,0,.41667],8639:[.19444,.69224,0,0,.41667],8642:[.19444,.69224,0,0,.41667],8643:[.19444,.69224,0,0,.41667],8644:[.1808,.675,0,0,1],8646:[.1808,.675,0,0,1],8647:[.1808,.675,0,0,1],8648:[.19444,.69224,0,0,.83334],8649:[.1808,.675,0,0,1],8650:[.19444,.69224,0,0,.83334],8651:[.01354,.52239,0,0,1],8652:[.01354,.52239,0,0,1],8653:[-.13313,.36687,0,0,1],8654:[-.13313,.36687,0,0,1],8655:[-.13313,.36687,0,0,1],8666:[.13667,.63667,0,0,1],8667:[.13667,.63667,0,0,1],8669:[-.13313,.37788,0,0,1],8672:[-.064,.437,0,0,1.334],8674:[-.064,.437,0,0,1.334],8705:[0,.825,0,0,.5],8708:[0,.68889,0,0,.55556],8709:[.08167,.58167,0,0,.77778],8717:[0,.43056,0,0,.42917],8722:[-.03598,.46402,0,0,.5],8724:[.08198,.69224,0,0,.77778],8726:[.08167,.58167,0,0,.77778],8733:[0,.69224,0,0,.77778],8736:[0,.69224,0,0,.72222],8737:[0,.69224,0,0,.72222],8738:[.03517,.52239,0,0,.72222],8739:[.08167,.58167,0,0,.22222],8740:[.25142,.74111,0,0,.27778],8741:[.08167,.58167,0,0,.38889],8742:[.25142,.74111,0,0,.5],8756:[0,.69224,0,0,.66667],8757:[0,.69224,0,0,.66667],8764:[-.13313,.36687,0,0,.77778],8765:[-.13313,.37788,0,0,.77778],8769:[-.13313,.36687,0,0,.77778],8770:[-.03625,.46375,0,0,.77778],8774:[.30274,.79383,0,0,.77778],8776:[-.01688,.48312,0,0,.77778],8778:[.08167,.58167,0,0,.77778],8782:[.06062,.54986,0,0,.77778],8783:[.06062,.54986,0,0,.77778],8785:[.08198,.58198,0,0,.77778],8786:[.08198,.58198,0,0,.77778],8787:[.08198,.58198,0,0,.77778],8790:[0,.69224,0,0,.77778],8791:[.22958,.72958,0,0,.77778],8796:[.08198,.91667,0,0,.77778],8806:[.25583,.75583,0,0,.77778],8807:[.25583,.75583,0,0,.77778],8808:[.25142,.75726,0,0,.77778],8809:[.25142,.75726,0,0,.77778],8812:[.25583,.75583,0,0,.5],8814:[.20576,.70576,0,0,.77778],8815:[.20576,.70576,0,0,.77778],8816:[.30274,.79383,0,0,.77778],8817:[.30274,.79383,0,0,.77778],8818:[.22958,.72958,0,0,.77778],8819:[.22958,.72958,0,0,.77778],8822:[.1808,.675,0,0,.77778],8823:[.1808,.675,0,0,.77778],8828:[.13667,.63667,0,0,.77778],8829:[.13667,.63667,0,0,.77778],8830:[.22958,.72958,0,0,.77778],8831:[.22958,.72958,0,0,.77778],8832:[.20576,.70576,0,0,.77778],8833:[.20576,.70576,0,0,.77778],8840:[.30274,.79383,0,0,.77778],8841:[.30274,.79383,0,0,.77778],8842:[.13597,.63597,0,0,.77778],8843:[.13597,.63597,0,0,.77778],8847:[.03517,.54986,0,0,.77778],8848:[.03517,.54986,0,0,.77778],8858:[.08198,.58198,0,0,.77778],8859:[.08198,.58198,0,0,.77778],8861:[.08198,.58198,0,0,.77778],8862:[0,.675,0,0,.77778],8863:[0,.675,0,0,.77778],8864:[0,.675,0,0,.77778],8865:[0,.675,0,0,.77778],8872:[0,.69224,0,0,.61111],8873:[0,.69224,0,0,.72222],8874:[0,.69224,0,0,.88889],8876:[0,.68889,0,0,.61111],8877:[0,.68889,0,0,.61111],8878:[0,.68889,0,0,.72222],8879:[0,.68889,0,0,.72222],8882:[.03517,.54986,0,0,.77778],8883:[.03517,.54986,0,0,.77778],8884:[.13667,.63667,0,0,.77778],8885:[.13667,.63667,0,0,.77778],8888:[0,.54986,0,0,1.11111],8890:[.19444,.43056,0,0,.55556],8891:[.19444,.69224,0,0,.61111],8892:[.19444,.69224,0,0,.61111],8901:[0,.54986,0,0,.27778],8903:[.08167,.58167,0,0,.77778],8905:[.08167,.58167,0,0,.77778],8906:[.08167,.58167,0,0,.77778],8907:[0,.69224,0,0,.77778],8908:[0,.69224,0,0,.77778],8909:[-.03598,.46402,0,0,.77778],8910:[0,.54986,0,0,.76042],8911:[0,.54986,0,0,.76042],8912:[.03517,.54986,0,0,.77778],8913:[.03517,.54986,0,0,.77778],8914:[0,.54986,0,0,.66667],8915:[0,.54986,0,0,.66667],8916:[0,.69224,0,0,.66667],8918:[.0391,.5391,0,0,.77778],8919:[.0391,.5391,0,0,.77778],8920:[.03517,.54986,0,0,1.33334],8921:[.03517,.54986,0,0,1.33334],8922:[.38569,.88569,0,0,.77778],8923:[.38569,.88569,0,0,.77778],8926:[.13667,.63667,0,0,.77778],8927:[.13667,.63667,0,0,.77778],8928:[.30274,.79383,0,0,.77778],8929:[.30274,.79383,0,0,.77778],8934:[.23222,.74111,0,0,.77778],8935:[.23222,.74111,0,0,.77778],8936:[.23222,.74111,0,0,.77778],8937:[.23222,.74111,0,0,.77778],8938:[.20576,.70576,0,0,.77778],8939:[.20576,.70576,0,0,.77778],8940:[.30274,.79383,0,0,.77778],8941:[.30274,.79383,0,0,.77778],8994:[.19444,.69224,0,0,.77778],8995:[.19444,.69224,0,0,.77778],9416:[.15559,.69224,0,0,.90222],9484:[0,.69224,0,0,.5],9488:[0,.69224,0,0,.5],9492:[0,.37788,0,0,.5],9496:[0,.37788,0,0,.5],9585:[.19444,.68889,0,0,.88889],9586:[.19444,.74111,0,0,.88889],9632:[0,.675,0,0,.77778],9633:[0,.675,0,0,.77778],9650:[0,.54986,0,0,.72222],9651:[0,.54986,0,0,.72222],9654:[.03517,.54986,0,0,.77778],9660:[0,.54986,0,0,.72222],9661:[0,.54986,0,0,.72222],9664:[.03517,.54986,0,0,.77778],9674:[.11111,.69224,0,0,.66667],9733:[.19444,.69224,0,0,.94445],10003:[0,.69224,0,0,.83334],10016:[0,.69224,0,0,.83334],10731:[.11111,.69224,0,0,.66667],10846:[.19444,.75583,0,0,.61111],10877:[.13667,.63667,0,0,.77778],10878:[.13667,.63667,0,0,.77778],10885:[.25583,.75583,0,0,.77778],10886:[.25583,.75583,0,0,.77778],10887:[.13597,.63597,0,0,.77778],10888:[.13597,.63597,0,0,.77778],10889:[.26167,.75726,0,0,.77778],10890:[.26167,.75726,0,0,.77778],10891:[.48256,.98256,0,0,.77778],10892:[.48256,.98256,0,0,.77778],10901:[.13667,.63667,0,0,.77778],10902:[.13667,.63667,0,0,.77778],10933:[.25142,.75726,0,0,.77778],10934:[.25142,.75726,0,0,.77778],10935:[.26167,.75726,0,0,.77778],10936:[.26167,.75726,0,0,.77778],10937:[.26167,.75726,0,0,.77778],10938:[.26167,.75726,0,0,.77778],10949:[.25583,.75583,0,0,.77778],10950:[.25583,.75583,0,0,.77778],10955:[.28481,.79383,0,0,.77778],10956:[.28481,.79383,0,0,.77778],57350:[.08167,.58167,0,0,.22222],57351:[.08167,.58167,0,0,.38889],57352:[.08167,.58167,0,0,.77778],57353:[0,.43056,.04028,0,.66667],57356:[.25142,.75726,0,0,.77778],57357:[.25142,.75726,0,0,.77778],57358:[.41951,.91951,0,0,.77778],57359:[.30274,.79383,0,0,.77778],57360:[.30274,.79383,0,0,.77778],57361:[.41951,.91951,0,0,.77778],57366:[.25142,.75726,0,0,.77778],57367:[.25142,.75726,0,0,.77778],57368:[.25142,.75726,0,0,.77778],57369:[.25142,.75726,0,0,.77778],57370:[.13597,.63597,0,0,.77778],57371:[.13597,.63597,0,0,.77778]},"Caligraphic-Regular":{32:[0,0,0,0,.25],65:[0,.68333,0,.19445,.79847],66:[0,.68333,.03041,.13889,.65681],67:[0,.68333,.05834,.13889,.52653],68:[0,.68333,.02778,.08334,.77139],69:[0,.68333,.08944,.11111,.52778],70:[0,.68333,.09931,.11111,.71875],71:[.09722,.68333,.0593,.11111,.59487],72:[0,.68333,.00965,.11111,.84452],73:[0,.68333,.07382,0,.54452],74:[.09722,.68333,.18472,.16667,.67778],75:[0,.68333,.01445,.05556,.76195],76:[0,.68333,0,.13889,.68972],77:[0,.68333,0,.13889,1.2009],78:[0,.68333,.14736,.08334,.82049],79:[0,.68333,.02778,.11111,.79611],80:[0,.68333,.08222,.08334,.69556],81:[.09722,.68333,0,.11111,.81667],82:[0,.68333,0,.08334,.8475],83:[0,.68333,.075,.13889,.60556],84:[0,.68333,.25417,0,.54464],85:[0,.68333,.09931,.08334,.62583],86:[0,.68333,.08222,0,.61278],87:[0,.68333,.08222,.08334,.98778],88:[0,.68333,.14643,.13889,.7133],89:[.09722,.68333,.08222,.08334,.66834],90:[0,.68333,.07944,.13889,.72473],160:[0,0,0,0,.25]},"Fraktur-Regular":{32:[0,0,0,0,.25],33:[0,.69141,0,0,.29574],34:[0,.69141,0,0,.21471],38:[0,.69141,0,0,.73786],39:[0,.69141,0,0,.21201],40:[.24982,.74947,0,0,.38865],41:[.24982,.74947,0,0,.38865],42:[0,.62119,0,0,.27764],43:[.08319,.58283,0,0,.75623],44:[0,.10803,0,0,.27764],45:[.08319,.58283,0,0,.75623],46:[0,.10803,0,0,.27764],47:[.24982,.74947,0,0,.50181],48:[0,.47534,0,0,.50181],49:[0,.47534,0,0,.50181],50:[0,.47534,0,0,.50181],51:[.18906,.47534,0,0,.50181],52:[.18906,.47534,0,0,.50181],53:[.18906,.47534,0,0,.50181],54:[0,.69141,0,0,.50181],55:[.18906,.47534,0,0,.50181],56:[0,.69141,0,0,.50181],57:[.18906,.47534,0,0,.50181],58:[0,.47534,0,0,.21606],59:[.12604,.47534,0,0,.21606],61:[-.13099,.36866,0,0,.75623],63:[0,.69141,0,0,.36245],65:[0,.69141,0,0,.7176],66:[0,.69141,0,0,.88397],67:[0,.69141,0,0,.61254],68:[0,.69141,0,0,.83158],69:[0,.69141,0,0,.66278],70:[.12604,.69141,0,0,.61119],71:[0,.69141,0,0,.78539],72:[.06302,.69141,0,0,.7203],73:[0,.69141,0,0,.55448],74:[.12604,.69141,0,0,.55231],75:[0,.69141,0,0,.66845],76:[0,.69141,0,0,.66602],77:[0,.69141,0,0,1.04953],78:[0,.69141,0,0,.83212],79:[0,.69141,0,0,.82699],80:[.18906,.69141,0,0,.82753],81:[.03781,.69141,0,0,.82699],82:[0,.69141,0,0,.82807],83:[0,.69141,0,0,.82861],84:[0,.69141,0,0,.66899],85:[0,.69141,0,0,.64576],86:[0,.69141,0,0,.83131],87:[0,.69141,0,0,1.04602],88:[0,.69141,0,0,.71922],89:[.18906,.69141,0,0,.83293],90:[.12604,.69141,0,0,.60201],91:[.24982,.74947,0,0,.27764],93:[.24982,.74947,0,0,.27764],94:[0,.69141,0,0,.49965],97:[0,.47534,0,0,.50046],98:[0,.69141,0,0,.51315],99:[0,.47534,0,0,.38946],100:[0,.62119,0,0,.49857],101:[0,.47534,0,0,.40053],102:[.18906,.69141,0,0,.32626],103:[.18906,.47534,0,0,.5037],104:[.18906,.69141,0,0,.52126],105:[0,.69141,0,0,.27899],106:[0,.69141,0,0,.28088],107:[0,.69141,0,0,.38946],108:[0,.69141,0,0,.27953],109:[0,.47534,0,0,.76676],110:[0,.47534,0,0,.52666],111:[0,.47534,0,0,.48885],112:[.18906,.52396,0,0,.50046],113:[.18906,.47534,0,0,.48912],114:[0,.47534,0,0,.38919],115:[0,.47534,0,0,.44266],116:[0,.62119,0,0,.33301],117:[0,.47534,0,0,.5172],118:[0,.52396,0,0,.5118],119:[0,.52396,0,0,.77351],120:[.18906,.47534,0,0,.38865],121:[.18906,.47534,0,0,.49884],122:[.18906,.47534,0,0,.39054],160:[0,0,0,0,.25],8216:[0,.69141,0,0,.21471],8217:[0,.69141,0,0,.21471],58112:[0,.62119,0,0,.49749],58113:[0,.62119,0,0,.4983],58114:[.18906,.69141,0,0,.33328],58115:[.18906,.69141,0,0,.32923],58116:[.18906,.47534,0,0,.50343],58117:[0,.69141,0,0,.33301],58118:[0,.62119,0,0,.33409],58119:[0,.47534,0,0,.50073]},"Main-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.35],34:[0,.69444,0,0,.60278],35:[.19444,.69444,0,0,.95833],36:[.05556,.75,0,0,.575],37:[.05556,.75,0,0,.95833],38:[0,.69444,0,0,.89444],39:[0,.69444,0,0,.31944],40:[.25,.75,0,0,.44722],41:[.25,.75,0,0,.44722],42:[0,.75,0,0,.575],43:[.13333,.63333,0,0,.89444],44:[.19444,.15556,0,0,.31944],45:[0,.44444,0,0,.38333],46:[0,.15556,0,0,.31944],47:[.25,.75,0,0,.575],48:[0,.64444,0,0,.575],49:[0,.64444,0,0,.575],50:[0,.64444,0,0,.575],51:[0,.64444,0,0,.575],52:[0,.64444,0,0,.575],53:[0,.64444,0,0,.575],54:[0,.64444,0,0,.575],55:[0,.64444,0,0,.575],56:[0,.64444,0,0,.575],57:[0,.64444,0,0,.575],58:[0,.44444,0,0,.31944],59:[.19444,.44444,0,0,.31944],60:[.08556,.58556,0,0,.89444],61:[-.10889,.39111,0,0,.89444],62:[.08556,.58556,0,0,.89444],63:[0,.69444,0,0,.54305],64:[0,.69444,0,0,.89444],65:[0,.68611,0,0,.86944],66:[0,.68611,0,0,.81805],67:[0,.68611,0,0,.83055],68:[0,.68611,0,0,.88194],69:[0,.68611,0,0,.75555],70:[0,.68611,0,0,.72361],71:[0,.68611,0,0,.90416],72:[0,.68611,0,0,.9],73:[0,.68611,0,0,.43611],74:[0,.68611,0,0,.59444],75:[0,.68611,0,0,.90138],76:[0,.68611,0,0,.69166],77:[0,.68611,0,0,1.09166],78:[0,.68611,0,0,.9],79:[0,.68611,0,0,.86388],80:[0,.68611,0,0,.78611],81:[.19444,.68611,0,0,.86388],82:[0,.68611,0,0,.8625],83:[0,.68611,0,0,.63889],84:[0,.68611,0,0,.8],85:[0,.68611,0,0,.88472],86:[0,.68611,.01597,0,.86944],87:[0,.68611,.01597,0,1.18888],88:[0,.68611,0,0,.86944],89:[0,.68611,.02875,0,.86944],90:[0,.68611,0,0,.70277],91:[.25,.75,0,0,.31944],92:[.25,.75,0,0,.575],93:[.25,.75,0,0,.31944],94:[0,.69444,0,0,.575],95:[.31,.13444,.03194,0,.575],97:[0,.44444,0,0,.55902],98:[0,.69444,0,0,.63889],99:[0,.44444,0,0,.51111],100:[0,.69444,0,0,.63889],101:[0,.44444,0,0,.52708],102:[0,.69444,.10903,0,.35139],103:[.19444,.44444,.01597,0,.575],104:[0,.69444,0,0,.63889],105:[0,.69444,0,0,.31944],106:[.19444,.69444,0,0,.35139],107:[0,.69444,0,0,.60694],108:[0,.69444,0,0,.31944],109:[0,.44444,0,0,.95833],110:[0,.44444,0,0,.63889],111:[0,.44444,0,0,.575],112:[.19444,.44444,0,0,.63889],113:[.19444,.44444,0,0,.60694],114:[0,.44444,0,0,.47361],115:[0,.44444,0,0,.45361],116:[0,.63492,0,0,.44722],117:[0,.44444,0,0,.63889],118:[0,.44444,.01597,0,.60694],119:[0,.44444,.01597,0,.83055],120:[0,.44444,0,0,.60694],121:[.19444,.44444,.01597,0,.60694],122:[0,.44444,0,0,.51111],123:[.25,.75,0,0,.575],124:[.25,.75,0,0,.31944],125:[.25,.75,0,0,.575],126:[.35,.34444,0,0,.575],160:[0,0,0,0,.25],163:[0,.69444,0,0,.86853],168:[0,.69444,0,0,.575],172:[0,.44444,0,0,.76666],176:[0,.69444,0,0,.86944],177:[.13333,.63333,0,0,.89444],184:[.17014,0,0,0,.51111],198:[0,.68611,0,0,1.04166],215:[.13333,.63333,0,0,.89444],216:[.04861,.73472,0,0,.89444],223:[0,.69444,0,0,.59722],230:[0,.44444,0,0,.83055],247:[.13333,.63333,0,0,.89444],248:[.09722,.54167,0,0,.575],305:[0,.44444,0,0,.31944],338:[0,.68611,0,0,1.16944],339:[0,.44444,0,0,.89444],567:[.19444,.44444,0,0,.35139],710:[0,.69444,0,0,.575],711:[0,.63194,0,0,.575],713:[0,.59611,0,0,.575],714:[0,.69444,0,0,.575],715:[0,.69444,0,0,.575],728:[0,.69444,0,0,.575],729:[0,.69444,0,0,.31944],730:[0,.69444,0,0,.86944],732:[0,.69444,0,0,.575],733:[0,.69444,0,0,.575],915:[0,.68611,0,0,.69166],916:[0,.68611,0,0,.95833],920:[0,.68611,0,0,.89444],923:[0,.68611,0,0,.80555],926:[0,.68611,0,0,.76666],928:[0,.68611,0,0,.9],931:[0,.68611,0,0,.83055],933:[0,.68611,0,0,.89444],934:[0,.68611,0,0,.83055],936:[0,.68611,0,0,.89444],937:[0,.68611,0,0,.83055],8211:[0,.44444,.03194,0,.575],8212:[0,.44444,.03194,0,1.14999],8216:[0,.69444,0,0,.31944],8217:[0,.69444,0,0,.31944],8220:[0,.69444,0,0,.60278],8221:[0,.69444,0,0,.60278],8224:[.19444,.69444,0,0,.51111],8225:[.19444,.69444,0,0,.51111],8242:[0,.55556,0,0,.34444],8407:[0,.72444,.15486,0,.575],8463:[0,.69444,0,0,.66759],8465:[0,.69444,0,0,.83055],8467:[0,.69444,0,0,.47361],8472:[.19444,.44444,0,0,.74027],8476:[0,.69444,0,0,.83055],8501:[0,.69444,0,0,.70277],8592:[-.10889,.39111,0,0,1.14999],8593:[.19444,.69444,0,0,.575],8594:[-.10889,.39111,0,0,1.14999],8595:[.19444,.69444,0,0,.575],8596:[-.10889,.39111,0,0,1.14999],8597:[.25,.75,0,0,.575],8598:[.19444,.69444,0,0,1.14999],8599:[.19444,.69444,0,0,1.14999],8600:[.19444,.69444,0,0,1.14999],8601:[.19444,.69444,0,0,1.14999],8636:[-.10889,.39111,0,0,1.14999],8637:[-.10889,.39111,0,0,1.14999],8640:[-.10889,.39111,0,0,1.14999],8641:[-.10889,.39111,0,0,1.14999],8656:[-.10889,.39111,0,0,1.14999],8657:[.19444,.69444,0,0,.70277],8658:[-.10889,.39111,0,0,1.14999],8659:[.19444,.69444,0,0,.70277],8660:[-.10889,.39111,0,0,1.14999],8661:[.25,.75,0,0,.70277],8704:[0,.69444,0,0,.63889],8706:[0,.69444,.06389,0,.62847],8707:[0,.69444,0,0,.63889],8709:[.05556,.75,0,0,.575],8711:[0,.68611,0,0,.95833],8712:[.08556,.58556,0,0,.76666],8715:[.08556,.58556,0,0,.76666],8722:[.13333,.63333,0,0,.89444],8723:[.13333,.63333,0,0,.89444],8725:[.25,.75,0,0,.575],8726:[.25,.75,0,0,.575],8727:[-.02778,.47222,0,0,.575],8728:[-.02639,.47361,0,0,.575],8729:[-.02639,.47361,0,0,.575],8730:[.18,.82,0,0,.95833],8733:[0,.44444,0,0,.89444],8734:[0,.44444,0,0,1.14999],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.31944],8741:[.25,.75,0,0,.575],8743:[0,.55556,0,0,.76666],8744:[0,.55556,0,0,.76666],8745:[0,.55556,0,0,.76666],8746:[0,.55556,0,0,.76666],8747:[.19444,.69444,.12778,0,.56875],8764:[-.10889,.39111,0,0,.89444],8768:[.19444,.69444,0,0,.31944],8771:[.00222,.50222,0,0,.89444],8773:[.027,.638,0,0,.894],8776:[.02444,.52444,0,0,.89444],8781:[.00222,.50222,0,0,.89444],8801:[.00222,.50222,0,0,.89444],8804:[.19667,.69667,0,0,.89444],8805:[.19667,.69667,0,0,.89444],8810:[.08556,.58556,0,0,1.14999],8811:[.08556,.58556,0,0,1.14999],8826:[.08556,.58556,0,0,.89444],8827:[.08556,.58556,0,0,.89444],8834:[.08556,.58556,0,0,.89444],8835:[.08556,.58556,0,0,.89444],8838:[.19667,.69667,0,0,.89444],8839:[.19667,.69667,0,0,.89444],8846:[0,.55556,0,0,.76666],8849:[.19667,.69667,0,0,.89444],8850:[.19667,.69667,0,0,.89444],8851:[0,.55556,0,0,.76666],8852:[0,.55556,0,0,.76666],8853:[.13333,.63333,0,0,.89444],8854:[.13333,.63333,0,0,.89444],8855:[.13333,.63333,0,0,.89444],8856:[.13333,.63333,0,0,.89444],8857:[.13333,.63333,0,0,.89444],8866:[0,.69444,0,0,.70277],8867:[0,.69444,0,0,.70277],8868:[0,.69444,0,0,.89444],8869:[0,.69444,0,0,.89444],8900:[-.02639,.47361,0,0,.575],8901:[-.02639,.47361,0,0,.31944],8902:[-.02778,.47222,0,0,.575],8968:[.25,.75,0,0,.51111],8969:[.25,.75,0,0,.51111],8970:[.25,.75,0,0,.51111],8971:[.25,.75,0,0,.51111],8994:[-.13889,.36111,0,0,1.14999],8995:[-.13889,.36111,0,0,1.14999],9651:[.19444,.69444,0,0,1.02222],9657:[-.02778,.47222,0,0,.575],9661:[.19444,.69444,0,0,1.02222],9667:[-.02778,.47222,0,0,.575],9711:[.19444,.69444,0,0,1.14999],9824:[.12963,.69444,0,0,.89444],9825:[.12963,.69444,0,0,.89444],9826:[.12963,.69444,0,0,.89444],9827:[.12963,.69444,0,0,.89444],9837:[0,.75,0,0,.44722],9838:[.19444,.69444,0,0,.44722],9839:[.19444,.69444,0,0,.44722],10216:[.25,.75,0,0,.44722],10217:[.25,.75,0,0,.44722],10815:[0,.68611,0,0,.9],10927:[.19667,.69667,0,0,.89444],10928:[.19667,.69667,0,0,.89444],57376:[.19444,.69444,0,0,0]},"Main-BoldItalic":{32:[0,0,0,0,.25],33:[0,.69444,.11417,0,.38611],34:[0,.69444,.07939,0,.62055],35:[.19444,.69444,.06833,0,.94444],37:[.05556,.75,.12861,0,.94444],38:[0,.69444,.08528,0,.88555],39:[0,.69444,.12945,0,.35555],40:[.25,.75,.15806,0,.47333],41:[.25,.75,.03306,0,.47333],42:[0,.75,.14333,0,.59111],43:[.10333,.60333,.03306,0,.88555],44:[.19444,.14722,0,0,.35555],45:[0,.44444,.02611,0,.41444],46:[0,.14722,0,0,.35555],47:[.25,.75,.15806,0,.59111],48:[0,.64444,.13167,0,.59111],49:[0,.64444,.13167,0,.59111],50:[0,.64444,.13167,0,.59111],51:[0,.64444,.13167,0,.59111],52:[.19444,.64444,.13167,0,.59111],53:[0,.64444,.13167,0,.59111],54:[0,.64444,.13167,0,.59111],55:[.19444,.64444,.13167,0,.59111],56:[0,.64444,.13167,0,.59111],57:[0,.64444,.13167,0,.59111],58:[0,.44444,.06695,0,.35555],59:[.19444,.44444,.06695,0,.35555],61:[-.10889,.39111,.06833,0,.88555],63:[0,.69444,.11472,0,.59111],64:[0,.69444,.09208,0,.88555],65:[0,.68611,0,0,.86555],66:[0,.68611,.0992,0,.81666],67:[0,.68611,.14208,0,.82666],68:[0,.68611,.09062,0,.87555],69:[0,.68611,.11431,0,.75666],70:[0,.68611,.12903,0,.72722],71:[0,.68611,.07347,0,.89527],72:[0,.68611,.17208,0,.8961],73:[0,.68611,.15681,0,.47166],74:[0,.68611,.145,0,.61055],75:[0,.68611,.14208,0,.89499],76:[0,.68611,0,0,.69777],77:[0,.68611,.17208,0,1.07277],78:[0,.68611,.17208,0,.8961],79:[0,.68611,.09062,0,.85499],80:[0,.68611,.0992,0,.78721],81:[.19444,.68611,.09062,0,.85499],82:[0,.68611,.02559,0,.85944],83:[0,.68611,.11264,0,.64999],84:[0,.68611,.12903,0,.7961],85:[0,.68611,.17208,0,.88083],86:[0,.68611,.18625,0,.86555],87:[0,.68611,.18625,0,1.15999],88:[0,.68611,.15681,0,.86555],89:[0,.68611,.19803,0,.86555],90:[0,.68611,.14208,0,.70888],91:[.25,.75,.1875,0,.35611],93:[.25,.75,.09972,0,.35611],94:[0,.69444,.06709,0,.59111],95:[.31,.13444,.09811,0,.59111],97:[0,.44444,.09426,0,.59111],98:[0,.69444,.07861,0,.53222],99:[0,.44444,.05222,0,.53222],100:[0,.69444,.10861,0,.59111],101:[0,.44444,.085,0,.53222],102:[.19444,.69444,.21778,0,.4],103:[.19444,.44444,.105,0,.53222],104:[0,.69444,.09426,0,.59111],105:[0,.69326,.11387,0,.35555],106:[.19444,.69326,.1672,0,.35555],107:[0,.69444,.11111,0,.53222],108:[0,.69444,.10861,0,.29666],109:[0,.44444,.09426,0,.94444],110:[0,.44444,.09426,0,.64999],111:[0,.44444,.07861,0,.59111],112:[.19444,.44444,.07861,0,.59111],113:[.19444,.44444,.105,0,.53222],114:[0,.44444,.11111,0,.50167],115:[0,.44444,.08167,0,.48694],116:[0,.63492,.09639,0,.385],117:[0,.44444,.09426,0,.62055],118:[0,.44444,.11111,0,.53222],119:[0,.44444,.11111,0,.76777],120:[0,.44444,.12583,0,.56055],121:[.19444,.44444,.105,0,.56166],122:[0,.44444,.13889,0,.49055],126:[.35,.34444,.11472,0,.59111],160:[0,0,0,0,.25],168:[0,.69444,.11473,0,.59111],176:[0,.69444,0,0,.94888],184:[.17014,0,0,0,.53222],198:[0,.68611,.11431,0,1.02277],216:[.04861,.73472,.09062,0,.88555],223:[.19444,.69444,.09736,0,.665],230:[0,.44444,.085,0,.82666],248:[.09722,.54167,.09458,0,.59111],305:[0,.44444,.09426,0,.35555],338:[0,.68611,.11431,0,1.14054],339:[0,.44444,.085,0,.82666],567:[.19444,.44444,.04611,0,.385],710:[0,.69444,.06709,0,.59111],711:[0,.63194,.08271,0,.59111],713:[0,.59444,.10444,0,.59111],714:[0,.69444,.08528,0,.59111],715:[0,.69444,0,0,.59111],728:[0,.69444,.10333,0,.59111],729:[0,.69444,.12945,0,.35555],730:[0,.69444,0,0,.94888],732:[0,.69444,.11472,0,.59111],733:[0,.69444,.11472,0,.59111],915:[0,.68611,.12903,0,.69777],916:[0,.68611,0,0,.94444],920:[0,.68611,.09062,0,.88555],923:[0,.68611,0,0,.80666],926:[0,.68611,.15092,0,.76777],928:[0,.68611,.17208,0,.8961],931:[0,.68611,.11431,0,.82666],933:[0,.68611,.10778,0,.88555],934:[0,.68611,.05632,0,.82666],936:[0,.68611,.10778,0,.88555],937:[0,.68611,.0992,0,.82666],8211:[0,.44444,.09811,0,.59111],8212:[0,.44444,.09811,0,1.18221],8216:[0,.69444,.12945,0,.35555],8217:[0,.69444,.12945,0,.35555],8220:[0,.69444,.16772,0,.62055],8221:[0,.69444,.07939,0,.62055]},"Main-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.12417,0,.30667],34:[0,.69444,.06961,0,.51444],35:[.19444,.69444,.06616,0,.81777],37:[.05556,.75,.13639,0,.81777],38:[0,.69444,.09694,0,.76666],39:[0,.69444,.12417,0,.30667],40:[.25,.75,.16194,0,.40889],41:[.25,.75,.03694,0,.40889],42:[0,.75,.14917,0,.51111],43:[.05667,.56167,.03694,0,.76666],44:[.19444,.10556,0,0,.30667],45:[0,.43056,.02826,0,.35778],46:[0,.10556,0,0,.30667],47:[.25,.75,.16194,0,.51111],48:[0,.64444,.13556,0,.51111],49:[0,.64444,.13556,0,.51111],50:[0,.64444,.13556,0,.51111],51:[0,.64444,.13556,0,.51111],52:[.19444,.64444,.13556,0,.51111],53:[0,.64444,.13556,0,.51111],54:[0,.64444,.13556,0,.51111],55:[.19444,.64444,.13556,0,.51111],56:[0,.64444,.13556,0,.51111],57:[0,.64444,.13556,0,.51111],58:[0,.43056,.0582,0,.30667],59:[.19444,.43056,.0582,0,.30667],61:[-.13313,.36687,.06616,0,.76666],63:[0,.69444,.1225,0,.51111],64:[0,.69444,.09597,0,.76666],65:[0,.68333,0,0,.74333],66:[0,.68333,.10257,0,.70389],67:[0,.68333,.14528,0,.71555],68:[0,.68333,.09403,0,.755],69:[0,.68333,.12028,0,.67833],70:[0,.68333,.13305,0,.65277],71:[0,.68333,.08722,0,.77361],72:[0,.68333,.16389,0,.74333],73:[0,.68333,.15806,0,.38555],74:[0,.68333,.14028,0,.525],75:[0,.68333,.14528,0,.76888],76:[0,.68333,0,0,.62722],77:[0,.68333,.16389,0,.89666],78:[0,.68333,.16389,0,.74333],79:[0,.68333,.09403,0,.76666],80:[0,.68333,.10257,0,.67833],81:[.19444,.68333,.09403,0,.76666],82:[0,.68333,.03868,0,.72944],83:[0,.68333,.11972,0,.56222],84:[0,.68333,.13305,0,.71555],85:[0,.68333,.16389,0,.74333],86:[0,.68333,.18361,0,.74333],87:[0,.68333,.18361,0,.99888],88:[0,.68333,.15806,0,.74333],89:[0,.68333,.19383,0,.74333],90:[0,.68333,.14528,0,.61333],91:[.25,.75,.1875,0,.30667],93:[.25,.75,.10528,0,.30667],94:[0,.69444,.06646,0,.51111],95:[.31,.12056,.09208,0,.51111],97:[0,.43056,.07671,0,.51111],98:[0,.69444,.06312,0,.46],99:[0,.43056,.05653,0,.46],100:[0,.69444,.10333,0,.51111],101:[0,.43056,.07514,0,.46],102:[.19444,.69444,.21194,0,.30667],103:[.19444,.43056,.08847,0,.46],104:[0,.69444,.07671,0,.51111],105:[0,.65536,.1019,0,.30667],106:[.19444,.65536,.14467,0,.30667],107:[0,.69444,.10764,0,.46],108:[0,.69444,.10333,0,.25555],109:[0,.43056,.07671,0,.81777],110:[0,.43056,.07671,0,.56222],111:[0,.43056,.06312,0,.51111],112:[.19444,.43056,.06312,0,.51111],113:[.19444,.43056,.08847,0,.46],114:[0,.43056,.10764,0,.42166],115:[0,.43056,.08208,0,.40889],116:[0,.61508,.09486,0,.33222],117:[0,.43056,.07671,0,.53666],118:[0,.43056,.10764,0,.46],119:[0,.43056,.10764,0,.66444],120:[0,.43056,.12042,0,.46389],121:[.19444,.43056,.08847,0,.48555],122:[0,.43056,.12292,0,.40889],126:[.35,.31786,.11585,0,.51111],160:[0,0,0,0,.25],168:[0,.66786,.10474,0,.51111],176:[0,.69444,0,0,.83129],184:[.17014,0,0,0,.46],198:[0,.68333,.12028,0,.88277],216:[.04861,.73194,.09403,0,.76666],223:[.19444,.69444,.10514,0,.53666],230:[0,.43056,.07514,0,.71555],248:[.09722,.52778,.09194,0,.51111],338:[0,.68333,.12028,0,.98499],339:[0,.43056,.07514,0,.71555],710:[0,.69444,.06646,0,.51111],711:[0,.62847,.08295,0,.51111],713:[0,.56167,.10333,0,.51111],714:[0,.69444,.09694,0,.51111],715:[0,.69444,0,0,.51111],728:[0,.69444,.10806,0,.51111],729:[0,.66786,.11752,0,.30667],730:[0,.69444,0,0,.83129],732:[0,.66786,.11585,0,.51111],733:[0,.69444,.1225,0,.51111],915:[0,.68333,.13305,0,.62722],916:[0,.68333,0,0,.81777],920:[0,.68333,.09403,0,.76666],923:[0,.68333,0,0,.69222],926:[0,.68333,.15294,0,.66444],928:[0,.68333,.16389,0,.74333],931:[0,.68333,.12028,0,.71555],933:[0,.68333,.11111,0,.76666],934:[0,.68333,.05986,0,.71555],936:[0,.68333,.11111,0,.76666],937:[0,.68333,.10257,0,.71555],8211:[0,.43056,.09208,0,.51111],8212:[0,.43056,.09208,0,1.02222],8216:[0,.69444,.12417,0,.30667],8217:[0,.69444,.12417,0,.30667],8220:[0,.69444,.1685,0,.51444],8221:[0,.69444,.06961,0,.51444],8463:[0,.68889,0,0,.54028]},"Main-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.27778],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.77778],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.19444,.10556,0,0,.27778],45:[0,.43056,0,0,.33333],46:[0,.10556,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.64444,0,0,.5],49:[0,.64444,0,0,.5],50:[0,.64444,0,0,.5],51:[0,.64444,0,0,.5],52:[0,.64444,0,0,.5],53:[0,.64444,0,0,.5],54:[0,.64444,0,0,.5],55:[0,.64444,0,0,.5],56:[0,.64444,0,0,.5],57:[0,.64444,0,0,.5],58:[0,.43056,0,0,.27778],59:[.19444,.43056,0,0,.27778],60:[.0391,.5391,0,0,.77778],61:[-.13313,.36687,0,0,.77778],62:[.0391,.5391,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.77778],65:[0,.68333,0,0,.75],66:[0,.68333,0,0,.70834],67:[0,.68333,0,0,.72222],68:[0,.68333,0,0,.76389],69:[0,.68333,0,0,.68056],70:[0,.68333,0,0,.65278],71:[0,.68333,0,0,.78472],72:[0,.68333,0,0,.75],73:[0,.68333,0,0,.36111],74:[0,.68333,0,0,.51389],75:[0,.68333,0,0,.77778],76:[0,.68333,0,0,.625],77:[0,.68333,0,0,.91667],78:[0,.68333,0,0,.75],79:[0,.68333,0,0,.77778],80:[0,.68333,0,0,.68056],81:[.19444,.68333,0,0,.77778],82:[0,.68333,0,0,.73611],83:[0,.68333,0,0,.55556],84:[0,.68333,0,0,.72222],85:[0,.68333,0,0,.75],86:[0,.68333,.01389,0,.75],87:[0,.68333,.01389,0,1.02778],88:[0,.68333,0,0,.75],89:[0,.68333,.025,0,.75],90:[0,.68333,0,0,.61111],91:[.25,.75,0,0,.27778],92:[.25,.75,0,0,.5],93:[.25,.75,0,0,.27778],94:[0,.69444,0,0,.5],95:[.31,.12056,.02778,0,.5],97:[0,.43056,0,0,.5],98:[0,.69444,0,0,.55556],99:[0,.43056,0,0,.44445],100:[0,.69444,0,0,.55556],101:[0,.43056,0,0,.44445],102:[0,.69444,.07778,0,.30556],103:[.19444,.43056,.01389,0,.5],104:[0,.69444,0,0,.55556],105:[0,.66786,0,0,.27778],106:[.19444,.66786,0,0,.30556],107:[0,.69444,0,0,.52778],108:[0,.69444,0,0,.27778],109:[0,.43056,0,0,.83334],110:[0,.43056,0,0,.55556],111:[0,.43056,0,0,.5],112:[.19444,.43056,0,0,.55556],113:[.19444,.43056,0,0,.52778],114:[0,.43056,0,0,.39167],115:[0,.43056,0,0,.39445],116:[0,.61508,0,0,.38889],117:[0,.43056,0,0,.55556],118:[0,.43056,.01389,0,.52778],119:[0,.43056,.01389,0,.72222],120:[0,.43056,0,0,.52778],121:[.19444,.43056,.01389,0,.52778],122:[0,.43056,0,0,.44445],123:[.25,.75,0,0,.5],124:[.25,.75,0,0,.27778],125:[.25,.75,0,0,.5],126:[.35,.31786,0,0,.5],160:[0,0,0,0,.25],163:[0,.69444,0,0,.76909],167:[.19444,.69444,0,0,.44445],168:[0,.66786,0,0,.5],172:[0,.43056,0,0,.66667],176:[0,.69444,0,0,.75],177:[.08333,.58333,0,0,.77778],182:[.19444,.69444,0,0,.61111],184:[.17014,0,0,0,.44445],198:[0,.68333,0,0,.90278],215:[.08333,.58333,0,0,.77778],216:[.04861,.73194,0,0,.77778],223:[0,.69444,0,0,.5],230:[0,.43056,0,0,.72222],247:[.08333,.58333,0,0,.77778],248:[.09722,.52778,0,0,.5],305:[0,.43056,0,0,.27778],338:[0,.68333,0,0,1.01389],339:[0,.43056,0,0,.77778],567:[.19444,.43056,0,0,.30556],710:[0,.69444,0,0,.5],711:[0,.62847,0,0,.5],713:[0,.56778,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.66786,0,0,.27778],730:[0,.69444,0,0,.75],732:[0,.66786,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.68333,0,0,.625],916:[0,.68333,0,0,.83334],920:[0,.68333,0,0,.77778],923:[0,.68333,0,0,.69445],926:[0,.68333,0,0,.66667],928:[0,.68333,0,0,.75],931:[0,.68333,0,0,.72222],933:[0,.68333,0,0,.77778],934:[0,.68333,0,0,.72222],936:[0,.68333,0,0,.77778],937:[0,.68333,0,0,.72222],8211:[0,.43056,.02778,0,.5],8212:[0,.43056,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5],8224:[.19444,.69444,0,0,.44445],8225:[.19444,.69444,0,0,.44445],8230:[0,.123,0,0,1.172],8242:[0,.55556,0,0,.275],8407:[0,.71444,.15382,0,.5],8463:[0,.68889,0,0,.54028],8465:[0,.69444,0,0,.72222],8467:[0,.69444,0,.11111,.41667],8472:[.19444,.43056,0,.11111,.63646],8476:[0,.69444,0,0,.72222],8501:[0,.69444,0,0,.61111],8592:[-.13313,.36687,0,0,1],8593:[.19444,.69444,0,0,.5],8594:[-.13313,.36687,0,0,1],8595:[.19444,.69444,0,0,.5],8596:[-.13313,.36687,0,0,1],8597:[.25,.75,0,0,.5],8598:[.19444,.69444,0,0,1],8599:[.19444,.69444,0,0,1],8600:[.19444,.69444,0,0,1],8601:[.19444,.69444,0,0,1],8614:[.011,.511,0,0,1],8617:[.011,.511,0,0,1.126],8618:[.011,.511,0,0,1.126],8636:[-.13313,.36687,0,0,1],8637:[-.13313,.36687,0,0,1],8640:[-.13313,.36687,0,0,1],8641:[-.13313,.36687,0,0,1],8652:[.011,.671,0,0,1],8656:[-.13313,.36687,0,0,1],8657:[.19444,.69444,0,0,.61111],8658:[-.13313,.36687,0,0,1],8659:[.19444,.69444,0,0,.61111],8660:[-.13313,.36687,0,0,1],8661:[.25,.75,0,0,.61111],8704:[0,.69444,0,0,.55556],8706:[0,.69444,.05556,.08334,.5309],8707:[0,.69444,0,0,.55556],8709:[.05556,.75,0,0,.5],8711:[0,.68333,0,0,.83334],8712:[.0391,.5391,0,0,.66667],8715:[.0391,.5391,0,0,.66667],8722:[.08333,.58333,0,0,.77778],8723:[.08333,.58333,0,0,.77778],8725:[.25,.75,0,0,.5],8726:[.25,.75,0,0,.5],8727:[-.03472,.46528,0,0,.5],8728:[-.05555,.44445,0,0,.5],8729:[-.05555,.44445,0,0,.5],8730:[.2,.8,0,0,.83334],8733:[0,.43056,0,0,.77778],8734:[0,.43056,0,0,1],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.27778],8741:[.25,.75,0,0,.5],8743:[0,.55556,0,0,.66667],8744:[0,.55556,0,0,.66667],8745:[0,.55556,0,0,.66667],8746:[0,.55556,0,0,.66667],8747:[.19444,.69444,.11111,0,.41667],8764:[-.13313,.36687,0,0,.77778],8768:[.19444,.69444,0,0,.27778],8771:[-.03625,.46375,0,0,.77778],8773:[-.022,.589,0,0,.778],8776:[-.01688,.48312,0,0,.77778],8781:[-.03625,.46375,0,0,.77778],8784:[-.133,.673,0,0,.778],8801:[-.03625,.46375,0,0,.77778],8804:[.13597,.63597,0,0,.77778],8805:[.13597,.63597,0,0,.77778],8810:[.0391,.5391,0,0,1],8811:[.0391,.5391,0,0,1],8826:[.0391,.5391,0,0,.77778],8827:[.0391,.5391,0,0,.77778],8834:[.0391,.5391,0,0,.77778],8835:[.0391,.5391,0,0,.77778],8838:[.13597,.63597,0,0,.77778],8839:[.13597,.63597,0,0,.77778],8846:[0,.55556,0,0,.66667],8849:[.13597,.63597,0,0,.77778],8850:[.13597,.63597,0,0,.77778],8851:[0,.55556,0,0,.66667],8852:[0,.55556,0,0,.66667],8853:[.08333,.58333,0,0,.77778],8854:[.08333,.58333,0,0,.77778],8855:[.08333,.58333,0,0,.77778],8856:[.08333,.58333,0,0,.77778],8857:[.08333,.58333,0,0,.77778],8866:[0,.69444,0,0,.61111],8867:[0,.69444,0,0,.61111],8868:[0,.69444,0,0,.77778],8869:[0,.69444,0,0,.77778],8872:[.249,.75,0,0,.867],8900:[-.05555,.44445,0,0,.5],8901:[-.05555,.44445,0,0,.27778],8902:[-.03472,.46528,0,0,.5],8904:[.005,.505,0,0,.9],8942:[.03,.903,0,0,.278],8943:[-.19,.313,0,0,1.172],8945:[-.1,.823,0,0,1.282],8968:[.25,.75,0,0,.44445],8969:[.25,.75,0,0,.44445],8970:[.25,.75,0,0,.44445],8971:[.25,.75,0,0,.44445],8994:[-.14236,.35764,0,0,1],8995:[-.14236,.35764,0,0,1],9136:[.244,.744,0,0,.412],9137:[.244,.745,0,0,.412],9651:[.19444,.69444,0,0,.88889],9657:[-.03472,.46528,0,0,.5],9661:[.19444,.69444,0,0,.88889],9667:[-.03472,.46528,0,0,.5],9711:[.19444,.69444,0,0,1],9824:[.12963,.69444,0,0,.77778],9825:[.12963,.69444,0,0,.77778],9826:[.12963,.69444,0,0,.77778],9827:[.12963,.69444,0,0,.77778],9837:[0,.75,0,0,.38889],9838:[.19444,.69444,0,0,.38889],9839:[.19444,.69444,0,0,.38889],10216:[.25,.75,0,0,.38889],10217:[.25,.75,0,0,.38889],10222:[.244,.744,0,0,.412],10223:[.244,.745,0,0,.412],10229:[.011,.511,0,0,1.609],10230:[.011,.511,0,0,1.638],10231:[.011,.511,0,0,1.859],10232:[.024,.525,0,0,1.609],10233:[.024,.525,0,0,1.638],10234:[.024,.525,0,0,1.858],10236:[.011,.511,0,0,1.638],10815:[0,.68333,0,0,.75],10927:[.13597,.63597,0,0,.77778],10928:[.13597,.63597,0,0,.77778],57376:[.19444,.69444,0,0,0]},"Math-BoldItalic":{32:[0,0,0,0,.25],48:[0,.44444,0,0,.575],49:[0,.44444,0,0,.575],50:[0,.44444,0,0,.575],51:[.19444,.44444,0,0,.575],52:[.19444,.44444,0,0,.575],53:[.19444,.44444,0,0,.575],54:[0,.64444,0,0,.575],55:[.19444,.44444,0,0,.575],56:[0,.64444,0,0,.575],57:[.19444,.44444,0,0,.575],65:[0,.68611,0,0,.86944],66:[0,.68611,.04835,0,.8664],67:[0,.68611,.06979,0,.81694],68:[0,.68611,.03194,0,.93812],69:[0,.68611,.05451,0,.81007],70:[0,.68611,.15972,0,.68889],71:[0,.68611,0,0,.88673],72:[0,.68611,.08229,0,.98229],73:[0,.68611,.07778,0,.51111],74:[0,.68611,.10069,0,.63125],75:[0,.68611,.06979,0,.97118],76:[0,.68611,0,0,.75555],77:[0,.68611,.11424,0,1.14201],78:[0,.68611,.11424,0,.95034],79:[0,.68611,.03194,0,.83666],80:[0,.68611,.15972,0,.72309],81:[.19444,.68611,0,0,.86861],82:[0,.68611,.00421,0,.87235],83:[0,.68611,.05382,0,.69271],84:[0,.68611,.15972,0,.63663],85:[0,.68611,.11424,0,.80027],86:[0,.68611,.25555,0,.67778],87:[0,.68611,.15972,0,1.09305],88:[0,.68611,.07778,0,.94722],89:[0,.68611,.25555,0,.67458],90:[0,.68611,.06979,0,.77257],97:[0,.44444,0,0,.63287],98:[0,.69444,0,0,.52083],99:[0,.44444,0,0,.51342],100:[0,.69444,0,0,.60972],101:[0,.44444,0,0,.55361],102:[.19444,.69444,.11042,0,.56806],103:[.19444,.44444,.03704,0,.5449],104:[0,.69444,0,0,.66759],105:[0,.69326,0,0,.4048],106:[.19444,.69326,.0622,0,.47083],107:[0,.69444,.01852,0,.6037],108:[0,.69444,.0088,0,.34815],109:[0,.44444,0,0,1.0324],110:[0,.44444,0,0,.71296],111:[0,.44444,0,0,.58472],112:[.19444,.44444,0,0,.60092],113:[.19444,.44444,.03704,0,.54213],114:[0,.44444,.03194,0,.5287],115:[0,.44444,0,0,.53125],116:[0,.63492,0,0,.41528],117:[0,.44444,0,0,.68102],118:[0,.44444,.03704,0,.56666],119:[0,.44444,.02778,0,.83148],120:[0,.44444,0,0,.65903],121:[.19444,.44444,.03704,0,.59028],122:[0,.44444,.04213,0,.55509],160:[0,0,0,0,.25],915:[0,.68611,.15972,0,.65694],916:[0,.68611,0,0,.95833],920:[0,.68611,.03194,0,.86722],923:[0,.68611,0,0,.80555],926:[0,.68611,.07458,0,.84125],928:[0,.68611,.08229,0,.98229],931:[0,.68611,.05451,0,.88507],933:[0,.68611,.15972,0,.67083],934:[0,.68611,0,0,.76666],936:[0,.68611,.11653,0,.71402],937:[0,.68611,.04835,0,.8789],945:[0,.44444,0,0,.76064],946:[.19444,.69444,.03403,0,.65972],947:[.19444,.44444,.06389,0,.59003],948:[0,.69444,.03819,0,.52222],949:[0,.44444,0,0,.52882],950:[.19444,.69444,.06215,0,.50833],951:[.19444,.44444,.03704,0,.6],952:[0,.69444,.03194,0,.5618],953:[0,.44444,0,0,.41204],954:[0,.44444,0,0,.66759],955:[0,.69444,0,0,.67083],956:[.19444,.44444,0,0,.70787],957:[0,.44444,.06898,0,.57685],958:[.19444,.69444,.03021,0,.50833],959:[0,.44444,0,0,.58472],960:[0,.44444,.03704,0,.68241],961:[.19444,.44444,0,0,.6118],962:[.09722,.44444,.07917,0,.42361],963:[0,.44444,.03704,0,.68588],964:[0,.44444,.13472,0,.52083],965:[0,.44444,.03704,0,.63055],966:[.19444,.44444,0,0,.74722],967:[.19444,.44444,0,0,.71805],968:[.19444,.69444,.03704,0,.75833],969:[0,.44444,.03704,0,.71782],977:[0,.69444,0,0,.69155],981:[.19444,.69444,0,0,.7125],982:[0,.44444,.03194,0,.975],1009:[.19444,.44444,0,0,.6118],1013:[0,.44444,0,0,.48333],57649:[0,.44444,0,0,.39352],57911:[.19444,.44444,0,0,.43889]},"Math-Italic":{32:[0,0,0,0,.25],48:[0,.43056,0,0,.5],49:[0,.43056,0,0,.5],50:[0,.43056,0,0,.5],51:[.19444,.43056,0,0,.5],52:[.19444,.43056,0,0,.5],53:[.19444,.43056,0,0,.5],54:[0,.64444,0,0,.5],55:[.19444,.43056,0,0,.5],56:[0,.64444,0,0,.5],57:[.19444,.43056,0,0,.5],65:[0,.68333,0,.13889,.75],66:[0,.68333,.05017,.08334,.75851],67:[0,.68333,.07153,.08334,.71472],68:[0,.68333,.02778,.05556,.82792],69:[0,.68333,.05764,.08334,.7382],70:[0,.68333,.13889,.08334,.64306],71:[0,.68333,0,.08334,.78625],72:[0,.68333,.08125,.05556,.83125],73:[0,.68333,.07847,.11111,.43958],74:[0,.68333,.09618,.16667,.55451],75:[0,.68333,.07153,.05556,.84931],76:[0,.68333,0,.02778,.68056],77:[0,.68333,.10903,.08334,.97014],78:[0,.68333,.10903,.08334,.80347],79:[0,.68333,.02778,.08334,.76278],80:[0,.68333,.13889,.08334,.64201],81:[.19444,.68333,0,.08334,.79056],82:[0,.68333,.00773,.08334,.75929],83:[0,.68333,.05764,.08334,.6132],84:[0,.68333,.13889,.08334,.58438],85:[0,.68333,.10903,.02778,.68278],86:[0,.68333,.22222,0,.58333],87:[0,.68333,.13889,0,.94445],88:[0,.68333,.07847,.08334,.82847],89:[0,.68333,.22222,0,.58056],90:[0,.68333,.07153,.08334,.68264],97:[0,.43056,0,0,.52859],98:[0,.69444,0,0,.42917],99:[0,.43056,0,.05556,.43276],100:[0,.69444,0,.16667,.52049],101:[0,.43056,0,.05556,.46563],102:[.19444,.69444,.10764,.16667,.48959],103:[.19444,.43056,.03588,.02778,.47697],104:[0,.69444,0,0,.57616],105:[0,.65952,0,0,.34451],106:[.19444,.65952,.05724,0,.41181],107:[0,.69444,.03148,0,.5206],108:[0,.69444,.01968,.08334,.29838],109:[0,.43056,0,0,.87801],110:[0,.43056,0,0,.60023],111:[0,.43056,0,.05556,.48472],112:[.19444,.43056,0,.08334,.50313],113:[.19444,.43056,.03588,.08334,.44641],114:[0,.43056,.02778,.05556,.45116],115:[0,.43056,0,.05556,.46875],116:[0,.61508,0,.08334,.36111],117:[0,.43056,0,.02778,.57246],118:[0,.43056,.03588,.02778,.48472],119:[0,.43056,.02691,.08334,.71592],120:[0,.43056,0,.02778,.57153],121:[.19444,.43056,.03588,.05556,.49028],122:[0,.43056,.04398,.05556,.46505],160:[0,0,0,0,.25],915:[0,.68333,.13889,.08334,.61528],916:[0,.68333,0,.16667,.83334],920:[0,.68333,.02778,.08334,.76278],923:[0,.68333,0,.16667,.69445],926:[0,.68333,.07569,.08334,.74236],928:[0,.68333,.08125,.05556,.83125],931:[0,.68333,.05764,.08334,.77986],933:[0,.68333,.13889,.05556,.58333],934:[0,.68333,0,.08334,.66667],936:[0,.68333,.11,.05556,.61222],937:[0,.68333,.05017,.08334,.7724],945:[0,.43056,.0037,.02778,.6397],946:[.19444,.69444,.05278,.08334,.56563],947:[.19444,.43056,.05556,0,.51773],948:[0,.69444,.03785,.05556,.44444],949:[0,.43056,0,.08334,.46632],950:[.19444,.69444,.07378,.08334,.4375],951:[.19444,.43056,.03588,.05556,.49653],952:[0,.69444,.02778,.08334,.46944],953:[0,.43056,0,.05556,.35394],954:[0,.43056,0,0,.57616],955:[0,.69444,0,0,.58334],956:[.19444,.43056,0,.02778,.60255],957:[0,.43056,.06366,.02778,.49398],958:[.19444,.69444,.04601,.11111,.4375],959:[0,.43056,0,.05556,.48472],960:[0,.43056,.03588,0,.57003],961:[.19444,.43056,0,.08334,.51702],962:[.09722,.43056,.07986,.08334,.36285],963:[0,.43056,.03588,0,.57141],964:[0,.43056,.1132,.02778,.43715],965:[0,.43056,.03588,.02778,.54028],966:[.19444,.43056,0,.08334,.65417],967:[.19444,.43056,0,.05556,.62569],968:[.19444,.69444,.03588,.11111,.65139],969:[0,.43056,.03588,0,.62245],977:[0,.69444,0,.08334,.59144],981:[.19444,.69444,0,.08334,.59583],982:[0,.43056,.02778,0,.82813],1009:[.19444,.43056,0,.08334,.51702],1013:[0,.43056,0,.05556,.4059],57649:[0,.43056,0,.02778,.32246],57911:[.19444,.43056,0,.08334,.38403]},"SansSerif-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.36667],34:[0,.69444,0,0,.55834],35:[.19444,.69444,0,0,.91667],36:[.05556,.75,0,0,.55],37:[.05556,.75,0,0,1.02912],38:[0,.69444,0,0,.83056],39:[0,.69444,0,0,.30556],40:[.25,.75,0,0,.42778],41:[.25,.75,0,0,.42778],42:[0,.75,0,0,.55],43:[.11667,.61667,0,0,.85556],44:[.10556,.13056,0,0,.30556],45:[0,.45833,0,0,.36667],46:[0,.13056,0,0,.30556],47:[.25,.75,0,0,.55],48:[0,.69444,0,0,.55],49:[0,.69444,0,0,.55],50:[0,.69444,0,0,.55],51:[0,.69444,0,0,.55],52:[0,.69444,0,0,.55],53:[0,.69444,0,0,.55],54:[0,.69444,0,0,.55],55:[0,.69444,0,0,.55],56:[0,.69444,0,0,.55],57:[0,.69444,0,0,.55],58:[0,.45833,0,0,.30556],59:[.10556,.45833,0,0,.30556],61:[-.09375,.40625,0,0,.85556],63:[0,.69444,0,0,.51945],64:[0,.69444,0,0,.73334],65:[0,.69444,0,0,.73334],66:[0,.69444,0,0,.73334],67:[0,.69444,0,0,.70278],68:[0,.69444,0,0,.79445],69:[0,.69444,0,0,.64167],70:[0,.69444,0,0,.61111],71:[0,.69444,0,0,.73334],72:[0,.69444,0,0,.79445],73:[0,.69444,0,0,.33056],74:[0,.69444,0,0,.51945],75:[0,.69444,0,0,.76389],76:[0,.69444,0,0,.58056],77:[0,.69444,0,0,.97778],78:[0,.69444,0,0,.79445],79:[0,.69444,0,0,.79445],80:[0,.69444,0,0,.70278],81:[.10556,.69444,0,0,.79445],82:[0,.69444,0,0,.70278],83:[0,.69444,0,0,.61111],84:[0,.69444,0,0,.73334],85:[0,.69444,0,0,.76389],86:[0,.69444,.01528,0,.73334],87:[0,.69444,.01528,0,1.03889],88:[0,.69444,0,0,.73334],89:[0,.69444,.0275,0,.73334],90:[0,.69444,0,0,.67223],91:[.25,.75,0,0,.34306],93:[.25,.75,0,0,.34306],94:[0,.69444,0,0,.55],95:[.35,.10833,.03056,0,.55],97:[0,.45833,0,0,.525],98:[0,.69444,0,0,.56111],99:[0,.45833,0,0,.48889],100:[0,.69444,0,0,.56111],101:[0,.45833,0,0,.51111],102:[0,.69444,.07639,0,.33611],103:[.19444,.45833,.01528,0,.55],104:[0,.69444,0,0,.56111],105:[0,.69444,0,0,.25556],106:[.19444,.69444,0,0,.28611],107:[0,.69444,0,0,.53056],108:[0,.69444,0,0,.25556],109:[0,.45833,0,0,.86667],110:[0,.45833,0,0,.56111],111:[0,.45833,0,0,.55],112:[.19444,.45833,0,0,.56111],113:[.19444,.45833,0,0,.56111],114:[0,.45833,.01528,0,.37222],115:[0,.45833,0,0,.42167],116:[0,.58929,0,0,.40417],117:[0,.45833,0,0,.56111],118:[0,.45833,.01528,0,.5],119:[0,.45833,.01528,0,.74445],120:[0,.45833,0,0,.5],121:[.19444,.45833,.01528,0,.5],122:[0,.45833,0,0,.47639],126:[.35,.34444,0,0,.55],160:[0,0,0,0,.25],168:[0,.69444,0,0,.55],176:[0,.69444,0,0,.73334],180:[0,.69444,0,0,.55],184:[.17014,0,0,0,.48889],305:[0,.45833,0,0,.25556],567:[.19444,.45833,0,0,.28611],710:[0,.69444,0,0,.55],711:[0,.63542,0,0,.55],713:[0,.63778,0,0,.55],728:[0,.69444,0,0,.55],729:[0,.69444,0,0,.30556],730:[0,.69444,0,0,.73334],732:[0,.69444,0,0,.55],733:[0,.69444,0,0,.55],915:[0,.69444,0,0,.58056],916:[0,.69444,0,0,.91667],920:[0,.69444,0,0,.85556],923:[0,.69444,0,0,.67223],926:[0,.69444,0,0,.73334],928:[0,.69444,0,0,.79445],931:[0,.69444,0,0,.79445],933:[0,.69444,0,0,.85556],934:[0,.69444,0,0,.79445],936:[0,.69444,0,0,.85556],937:[0,.69444,0,0,.79445],8211:[0,.45833,.03056,0,.55],8212:[0,.45833,.03056,0,1.10001],8216:[0,.69444,0,0,.30556],8217:[0,.69444,0,0,.30556],8220:[0,.69444,0,0,.55834],8221:[0,.69444,0,0,.55834]},"SansSerif-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.05733,0,.31945],34:[0,.69444,.00316,0,.5],35:[.19444,.69444,.05087,0,.83334],36:[.05556,.75,.11156,0,.5],37:[.05556,.75,.03126,0,.83334],38:[0,.69444,.03058,0,.75834],39:[0,.69444,.07816,0,.27778],40:[.25,.75,.13164,0,.38889],41:[.25,.75,.02536,0,.38889],42:[0,.75,.11775,0,.5],43:[.08333,.58333,.02536,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,.01946,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,.13164,0,.5],48:[0,.65556,.11156,0,.5],49:[0,.65556,.11156,0,.5],50:[0,.65556,.11156,0,.5],51:[0,.65556,.11156,0,.5],52:[0,.65556,.11156,0,.5],53:[0,.65556,.11156,0,.5],54:[0,.65556,.11156,0,.5],55:[0,.65556,.11156,0,.5],56:[0,.65556,.11156,0,.5],57:[0,.65556,.11156,0,.5],58:[0,.44444,.02502,0,.27778],59:[.125,.44444,.02502,0,.27778],61:[-.13,.37,.05087,0,.77778],63:[0,.69444,.11809,0,.47222],64:[0,.69444,.07555,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,.08293,0,.66667],67:[0,.69444,.11983,0,.63889],68:[0,.69444,.07555,0,.72223],69:[0,.69444,.11983,0,.59722],70:[0,.69444,.13372,0,.56945],71:[0,.69444,.11983,0,.66667],72:[0,.69444,.08094,0,.70834],73:[0,.69444,.13372,0,.27778],74:[0,.69444,.08094,0,.47222],75:[0,.69444,.11983,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,.08094,0,.875],78:[0,.69444,.08094,0,.70834],79:[0,.69444,.07555,0,.73611],80:[0,.69444,.08293,0,.63889],81:[.125,.69444,.07555,0,.73611],82:[0,.69444,.08293,0,.64584],83:[0,.69444,.09205,0,.55556],84:[0,.69444,.13372,0,.68056],85:[0,.69444,.08094,0,.6875],86:[0,.69444,.1615,0,.66667],87:[0,.69444,.1615,0,.94445],88:[0,.69444,.13372,0,.66667],89:[0,.69444,.17261,0,.66667],90:[0,.69444,.11983,0,.61111],91:[.25,.75,.15942,0,.28889],93:[.25,.75,.08719,0,.28889],94:[0,.69444,.0799,0,.5],95:[.35,.09444,.08616,0,.5],97:[0,.44444,.00981,0,.48056],98:[0,.69444,.03057,0,.51667],99:[0,.44444,.08336,0,.44445],100:[0,.69444,.09483,0,.51667],101:[0,.44444,.06778,0,.44445],102:[0,.69444,.21705,0,.30556],103:[.19444,.44444,.10836,0,.5],104:[0,.69444,.01778,0,.51667],105:[0,.67937,.09718,0,.23889],106:[.19444,.67937,.09162,0,.26667],107:[0,.69444,.08336,0,.48889],108:[0,.69444,.09483,0,.23889],109:[0,.44444,.01778,0,.79445],110:[0,.44444,.01778,0,.51667],111:[0,.44444,.06613,0,.5],112:[.19444,.44444,.0389,0,.51667],113:[.19444,.44444,.04169,0,.51667],114:[0,.44444,.10836,0,.34167],115:[0,.44444,.0778,0,.38333],116:[0,.57143,.07225,0,.36111],117:[0,.44444,.04169,0,.51667],118:[0,.44444,.10836,0,.46111],119:[0,.44444,.10836,0,.68334],120:[0,.44444,.09169,0,.46111],121:[.19444,.44444,.10836,0,.46111],122:[0,.44444,.08752,0,.43472],126:[.35,.32659,.08826,0,.5],160:[0,0,0,0,.25],168:[0,.67937,.06385,0,.5],176:[0,.69444,0,0,.73752],184:[.17014,0,0,0,.44445],305:[0,.44444,.04169,0,.23889],567:[.19444,.44444,.04169,0,.26667],710:[0,.69444,.0799,0,.5],711:[0,.63194,.08432,0,.5],713:[0,.60889,.08776,0,.5],714:[0,.69444,.09205,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,.09483,0,.5],729:[0,.67937,.07774,0,.27778],730:[0,.69444,0,0,.73752],732:[0,.67659,.08826,0,.5],733:[0,.69444,.09205,0,.5],915:[0,.69444,.13372,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,.07555,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,.12816,0,.66667],928:[0,.69444,.08094,0,.70834],931:[0,.69444,.11983,0,.72222],933:[0,.69444,.09031,0,.77778],934:[0,.69444,.04603,0,.72222],936:[0,.69444,.09031,0,.77778],937:[0,.69444,.08293,0,.72222],8211:[0,.44444,.08616,0,.5],8212:[0,.44444,.08616,0,1],8216:[0,.69444,.07816,0,.27778],8217:[0,.69444,.07816,0,.27778],8220:[0,.69444,.14205,0,.5],8221:[0,.69444,.00316,0,.5]},"SansSerif-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.31945],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.75834],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,0,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.65556,0,0,.5],49:[0,.65556,0,0,.5],50:[0,.65556,0,0,.5],51:[0,.65556,0,0,.5],52:[0,.65556,0,0,.5],53:[0,.65556,0,0,.5],54:[0,.65556,0,0,.5],55:[0,.65556,0,0,.5],56:[0,.65556,0,0,.5],57:[0,.65556,0,0,.5],58:[0,.44444,0,0,.27778],59:[.125,.44444,0,0,.27778],61:[-.13,.37,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,0,0,.66667],67:[0,.69444,0,0,.63889],68:[0,.69444,0,0,.72223],69:[0,.69444,0,0,.59722],70:[0,.69444,0,0,.56945],71:[0,.69444,0,0,.66667],72:[0,.69444,0,0,.70834],73:[0,.69444,0,0,.27778],74:[0,.69444,0,0,.47222],75:[0,.69444,0,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,0,0,.875],78:[0,.69444,0,0,.70834],79:[0,.69444,0,0,.73611],80:[0,.69444,0,0,.63889],81:[.125,.69444,0,0,.73611],82:[0,.69444,0,0,.64584],83:[0,.69444,0,0,.55556],84:[0,.69444,0,0,.68056],85:[0,.69444,0,0,.6875],86:[0,.69444,.01389,0,.66667],87:[0,.69444,.01389,0,.94445],88:[0,.69444,0,0,.66667],89:[0,.69444,.025,0,.66667],90:[0,.69444,0,0,.61111],91:[.25,.75,0,0,.28889],93:[.25,.75,0,0,.28889],94:[0,.69444,0,0,.5],95:[.35,.09444,.02778,0,.5],97:[0,.44444,0,0,.48056],98:[0,.69444,0,0,.51667],99:[0,.44444,0,0,.44445],100:[0,.69444,0,0,.51667],101:[0,.44444,0,0,.44445],102:[0,.69444,.06944,0,.30556],103:[.19444,.44444,.01389,0,.5],104:[0,.69444,0,0,.51667],105:[0,.67937,0,0,.23889],106:[.19444,.67937,0,0,.26667],107:[0,.69444,0,0,.48889],108:[0,.69444,0,0,.23889],109:[0,.44444,0,0,.79445],110:[0,.44444,0,0,.51667],111:[0,.44444,0,0,.5],112:[.19444,.44444,0,0,.51667],113:[.19444,.44444,0,0,.51667],114:[0,.44444,.01389,0,.34167],115:[0,.44444,0,0,.38333],116:[0,.57143,0,0,.36111],117:[0,.44444,0,0,.51667],118:[0,.44444,.01389,0,.46111],119:[0,.44444,.01389,0,.68334],120:[0,.44444,0,0,.46111],121:[.19444,.44444,.01389,0,.46111],122:[0,.44444,0,0,.43472],126:[.35,.32659,0,0,.5],160:[0,0,0,0,.25],168:[0,.67937,0,0,.5],176:[0,.69444,0,0,.66667],184:[.17014,0,0,0,.44445],305:[0,.44444,0,0,.23889],567:[.19444,.44444,0,0,.26667],710:[0,.69444,0,0,.5],711:[0,.63194,0,0,.5],713:[0,.60889,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.67937,0,0,.27778],730:[0,.69444,0,0,.66667],732:[0,.67659,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.69444,0,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,0,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,0,0,.66667],928:[0,.69444,0,0,.70834],931:[0,.69444,0,0,.72222],933:[0,.69444,0,0,.77778],934:[0,.69444,0,0,.72222],936:[0,.69444,0,0,.77778],937:[0,.69444,0,0,.72222],8211:[0,.44444,.02778,0,.5],8212:[0,.44444,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5]},"Script-Regular":{32:[0,0,0,0,.25],65:[0,.7,.22925,0,.80253],66:[0,.7,.04087,0,.90757],67:[0,.7,.1689,0,.66619],68:[0,.7,.09371,0,.77443],69:[0,.7,.18583,0,.56162],70:[0,.7,.13634,0,.89544],71:[0,.7,.17322,0,.60961],72:[0,.7,.29694,0,.96919],73:[0,.7,.19189,0,.80907],74:[.27778,.7,.19189,0,1.05159],75:[0,.7,.31259,0,.91364],76:[0,.7,.19189,0,.87373],77:[0,.7,.15981,0,1.08031],78:[0,.7,.3525,0,.9015],79:[0,.7,.08078,0,.73787],80:[0,.7,.08078,0,1.01262],81:[0,.7,.03305,0,.88282],82:[0,.7,.06259,0,.85],83:[0,.7,.19189,0,.86767],84:[0,.7,.29087,0,.74697],85:[0,.7,.25815,0,.79996],86:[0,.7,.27523,0,.62204],87:[0,.7,.27523,0,.80532],88:[0,.7,.26006,0,.94445],89:[0,.7,.2939,0,.70961],90:[0,.7,.24037,0,.8212],160:[0,0,0,0,.25]},"Size1-Regular":{32:[0,0,0,0,.25],40:[.35001,.85,0,0,.45834],41:[.35001,.85,0,0,.45834],47:[.35001,.85,0,0,.57778],91:[.35001,.85,0,0,.41667],92:[.35001,.85,0,0,.57778],93:[.35001,.85,0,0,.41667],123:[.35001,.85,0,0,.58334],125:[.35001,.85,0,0,.58334],160:[0,0,0,0,.25],710:[0,.72222,0,0,.55556],732:[0,.72222,0,0,.55556],770:[0,.72222,0,0,.55556],771:[0,.72222,0,0,.55556],8214:[-99e-5,.601,0,0,.77778],8593:[1e-5,.6,0,0,.66667],8595:[1e-5,.6,0,0,.66667],8657:[1e-5,.6,0,0,.77778],8659:[1e-5,.6,0,0,.77778],8719:[.25001,.75,0,0,.94445],8720:[.25001,.75,0,0,.94445],8721:[.25001,.75,0,0,1.05556],8730:[.35001,.85,0,0,1],8739:[-.00599,.606,0,0,.33333],8741:[-.00599,.606,0,0,.55556],8747:[.30612,.805,.19445,0,.47222],8748:[.306,.805,.19445,0,.47222],8749:[.306,.805,.19445,0,.47222],8750:[.30612,.805,.19445,0,.47222],8896:[.25001,.75,0,0,.83334],8897:[.25001,.75,0,0,.83334],8898:[.25001,.75,0,0,.83334],8899:[.25001,.75,0,0,.83334],8968:[.35001,.85,0,0,.47222],8969:[.35001,.85,0,0,.47222],8970:[.35001,.85,0,0,.47222],8971:[.35001,.85,0,0,.47222],9168:[-99e-5,.601,0,0,.66667],10216:[.35001,.85,0,0,.47222],10217:[.35001,.85,0,0,.47222],10752:[.25001,.75,0,0,1.11111],10753:[.25001,.75,0,0,1.11111],10754:[.25001,.75,0,0,1.11111],10756:[.25001,.75,0,0,.83334],10758:[.25001,.75,0,0,.83334]},"Size2-Regular":{32:[0,0,0,0,.25],40:[.65002,1.15,0,0,.59722],41:[.65002,1.15,0,0,.59722],47:[.65002,1.15,0,0,.81111],91:[.65002,1.15,0,0,.47222],92:[.65002,1.15,0,0,.81111],93:[.65002,1.15,0,0,.47222],123:[.65002,1.15,0,0,.66667],125:[.65002,1.15,0,0,.66667],160:[0,0,0,0,.25],710:[0,.75,0,0,1],732:[0,.75,0,0,1],770:[0,.75,0,0,1],771:[0,.75,0,0,1],8719:[.55001,1.05,0,0,1.27778],8720:[.55001,1.05,0,0,1.27778],8721:[.55001,1.05,0,0,1.44445],8730:[.65002,1.15,0,0,1],8747:[.86225,1.36,.44445,0,.55556],8748:[.862,1.36,.44445,0,.55556],8749:[.862,1.36,.44445,0,.55556],8750:[.86225,1.36,.44445,0,.55556],8896:[.55001,1.05,0,0,1.11111],8897:[.55001,1.05,0,0,1.11111],8898:[.55001,1.05,0,0,1.11111],8899:[.55001,1.05,0,0,1.11111],8968:[.65002,1.15,0,0,.52778],8969:[.65002,1.15,0,0,.52778],8970:[.65002,1.15,0,0,.52778],8971:[.65002,1.15,0,0,.52778],10216:[.65002,1.15,0,0,.61111],10217:[.65002,1.15,0,0,.61111],10752:[.55001,1.05,0,0,1.51112],10753:[.55001,1.05,0,0,1.51112],10754:[.55001,1.05,0,0,1.51112],10756:[.55001,1.05,0,0,1.11111],10758:[.55001,1.05,0,0,1.11111]},"Size3-Regular":{32:[0,0,0,0,.25],40:[.95003,1.45,0,0,.73611],41:[.95003,1.45,0,0,.73611],47:[.95003,1.45,0,0,1.04445],91:[.95003,1.45,0,0,.52778],92:[.95003,1.45,0,0,1.04445],93:[.95003,1.45,0,0,.52778],123:[.95003,1.45,0,0,.75],125:[.95003,1.45,0,0,.75],160:[0,0,0,0,.25],710:[0,.75,0,0,1.44445],732:[0,.75,0,0,1.44445],770:[0,.75,0,0,1.44445],771:[0,.75,0,0,1.44445],8730:[.95003,1.45,0,0,1],8968:[.95003,1.45,0,0,.58334],8969:[.95003,1.45,0,0,.58334],8970:[.95003,1.45,0,0,.58334],8971:[.95003,1.45,0,0,.58334],10216:[.95003,1.45,0,0,.75],10217:[.95003,1.45,0,0,.75]},"Size4-Regular":{32:[0,0,0,0,.25],40:[1.25003,1.75,0,0,.79167],41:[1.25003,1.75,0,0,.79167],47:[1.25003,1.75,0,0,1.27778],91:[1.25003,1.75,0,0,.58334],92:[1.25003,1.75,0,0,1.27778],93:[1.25003,1.75,0,0,.58334],123:[1.25003,1.75,0,0,.80556],125:[1.25003,1.75,0,0,.80556],160:[0,0,0,0,.25],710:[0,.825,0,0,1.8889],732:[0,.825,0,0,1.8889],770:[0,.825,0,0,1.8889],771:[0,.825,0,0,1.8889],8730:[1.25003,1.75,0,0,1],8968:[1.25003,1.75,0,0,.63889],8969:[1.25003,1.75,0,0,.63889],8970:[1.25003,1.75,0,0,.63889],8971:[1.25003,1.75,0,0,.63889],9115:[.64502,1.155,0,0,.875],9116:[1e-5,.6,0,0,.875],9117:[.64502,1.155,0,0,.875],9118:[.64502,1.155,0,0,.875],9119:[1e-5,.6,0,0,.875],9120:[.64502,1.155,0,0,.875],9121:[.64502,1.155,0,0,.66667],9122:[-99e-5,.601,0,0,.66667],9123:[.64502,1.155,0,0,.66667],9124:[.64502,1.155,0,0,.66667],9125:[-99e-5,.601,0,0,.66667],9126:[.64502,1.155,0,0,.66667],9127:[1e-5,.9,0,0,.88889],9128:[.65002,1.15,0,0,.88889],9129:[.90001,0,0,0,.88889],9130:[0,.3,0,0,.88889],9131:[1e-5,.9,0,0,.88889],9132:[.65002,1.15,0,0,.88889],9133:[.90001,0,0,0,.88889],9143:[.88502,.915,0,0,1.05556],10216:[1.25003,1.75,0,0,.80556],10217:[1.25003,1.75,0,0,.80556],57344:[-.00499,.605,0,0,1.05556],57345:[-.00499,.605,0,0,1.05556],57680:[0,.12,0,0,.45],57681:[0,.12,0,0,.45],57682:[0,.12,0,0,.45],57683:[0,.12,0,0,.45]},"Typewriter-Regular":{32:[0,0,0,0,.525],33:[0,.61111,0,0,.525],34:[0,.61111,0,0,.525],35:[0,.61111,0,0,.525],36:[.08333,.69444,0,0,.525],37:[.08333,.69444,0,0,.525],38:[0,.61111,0,0,.525],39:[0,.61111,0,0,.525],40:[.08333,.69444,0,0,.525],41:[.08333,.69444,0,0,.525],42:[0,.52083,0,0,.525],43:[-.08056,.53055,0,0,.525],44:[.13889,.125,0,0,.525],45:[-.08056,.53055,0,0,.525],46:[0,.125,0,0,.525],47:[.08333,.69444,0,0,.525],48:[0,.61111,0,0,.525],49:[0,.61111,0,0,.525],50:[0,.61111,0,0,.525],51:[0,.61111,0,0,.525],52:[0,.61111,0,0,.525],53:[0,.61111,0,0,.525],54:[0,.61111,0,0,.525],55:[0,.61111,0,0,.525],56:[0,.61111,0,0,.525],57:[0,.61111,0,0,.525],58:[0,.43056,0,0,.525],59:[.13889,.43056,0,0,.525],60:[-.05556,.55556,0,0,.525],61:[-.19549,.41562,0,0,.525],62:[-.05556,.55556,0,0,.525],63:[0,.61111,0,0,.525],64:[0,.61111,0,0,.525],65:[0,.61111,0,0,.525],66:[0,.61111,0,0,.525],67:[0,.61111,0,0,.525],68:[0,.61111,0,0,.525],69:[0,.61111,0,0,.525],70:[0,.61111,0,0,.525],71:[0,.61111,0,0,.525],72:[0,.61111,0,0,.525],73:[0,.61111,0,0,.525],74:[0,.61111,0,0,.525],75:[0,.61111,0,0,.525],76:[0,.61111,0,0,.525],77:[0,.61111,0,0,.525],78:[0,.61111,0,0,.525],79:[0,.61111,0,0,.525],80:[0,.61111,0,0,.525],81:[.13889,.61111,0,0,.525],82:[0,.61111,0,0,.525],83:[0,.61111,0,0,.525],84:[0,.61111,0,0,.525],85:[0,.61111,0,0,.525],86:[0,.61111,0,0,.525],87:[0,.61111,0,0,.525],88:[0,.61111,0,0,.525],89:[0,.61111,0,0,.525],90:[0,.61111,0,0,.525],91:[.08333,.69444,0,0,.525],92:[.08333,.69444,0,0,.525],93:[.08333,.69444,0,0,.525],94:[0,.61111,0,0,.525],95:[.09514,0,0,0,.525],96:[0,.61111,0,0,.525],97:[0,.43056,0,0,.525],98:[0,.61111,0,0,.525],99:[0,.43056,0,0,.525],100:[0,.61111,0,0,.525],101:[0,.43056,0,0,.525],102:[0,.61111,0,0,.525],103:[.22222,.43056,0,0,.525],104:[0,.61111,0,0,.525],105:[0,.61111,0,0,.525],106:[.22222,.61111,0,0,.525],107:[0,.61111,0,0,.525],108:[0,.61111,0,0,.525],109:[0,.43056,0,0,.525],110:[0,.43056,0,0,.525],111:[0,.43056,0,0,.525],112:[.22222,.43056,0,0,.525],113:[.22222,.43056,0,0,.525],114:[0,.43056,0,0,.525],115:[0,.43056,0,0,.525],116:[0,.55358,0,0,.525],117:[0,.43056,0,0,.525],118:[0,.43056,0,0,.525],119:[0,.43056,0,0,.525],120:[0,.43056,0,0,.525],121:[.22222,.43056,0,0,.525],122:[0,.43056,0,0,.525],123:[.08333,.69444,0,0,.525],124:[.08333,.69444,0,0,.525],125:[.08333,.69444,0,0,.525],126:[0,.61111,0,0,.525],127:[0,.61111,0,0,.525],160:[0,0,0,0,.525],176:[0,.61111,0,0,.525],184:[.19445,0,0,0,.525],305:[0,.43056,0,0,.525],567:[.22222,.43056,0,0,.525],711:[0,.56597,0,0,.525],713:[0,.56555,0,0,.525],714:[0,.61111,0,0,.525],715:[0,.61111,0,0,.525],728:[0,.61111,0,0,.525],730:[0,.61111,0,0,.525],770:[0,.61111,0,0,.525],771:[0,.61111,0,0,.525],776:[0,.61111,0,0,.525],915:[0,.61111,0,0,.525],916:[0,.61111,0,0,.525],920:[0,.61111,0,0,.525],923:[0,.61111,0,0,.525],926:[0,.61111,0,0,.525],928:[0,.61111,0,0,.525],931:[0,.61111,0,0,.525],933:[0,.61111,0,0,.525],934:[0,.61111,0,0,.525],936:[0,.61111,0,0,.525],937:[0,.61111,0,0,.525],8216:[0,.61111,0,0,.525],8217:[0,.61111,0,0,.525],8242:[0,.61111,0,0,.525],9251:[.11111,.21944,0,0,.525]}},R={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25],defaultRuleThickness:[.04,.049,.049],bigOpSpacing1:[.111,.111,.111],bigOpSpacing2:[.166,.166,.166],bigOpSpacing3:[.2,.2,.2],bigOpSpacing4:[.6,.611,.611],bigOpSpacing5:[.1,.143,.143],sqrtRuleThickness:[.04,.04,.04],ptPerEm:[10,10,10],doubleRuleSep:[.2,.2,.2],arrayRuleWidth:[.04,.04,.04],fboxsep:[.3,.3,.3],fboxrule:[.04,.04,.04]},N={Å:"A",Ð:"D",Þ:"o",å:"a",ð:"d",þ:"o",А:"A",Б:"B",В:"B",Г:"F",Д:"A",Е:"E",Ж:"K",З:"3",И:"N",Й:"N",К:"K",Л:"N",М:"M",Н:"H",О:"O",П:"N",Р:"P",С:"C",Т:"T",У:"y",Ф:"O",Х:"X",Ц:"U",Ч:"h",Ш:"W",Щ:"W",Ъ:"B",Ы:"X",Ь:"B",Э:"3",Ю:"X",Я:"R",а:"a",б:"b",в:"a",г:"r",д:"y",е:"e",ж:"m",з:"e",и:"n",й:"n",к:"n",л:"n",м:"m",н:"n",о:"o",п:"n",р:"p",с:"c",т:"o",у:"y",ф:"b",х:"x",ц:"n",ч:"n",ш:"w",щ:"w",ъ:"a",ы:"m",ь:"a",э:"e",ю:"m",я:"r"};function _(e,t,r){if(!I[t])throw new Error("Font metrics not found for font: "+t+".");var n=e.charCodeAt(0),i=I[t][n];if(!i&&e[0]in N&&(n=N[e[0]].charCodeAt(0),i=I[t][n]),i||"text"!==r||O(n)&&(i=I[t][77]),i)return{depth:i[0],height:i[1],italic:i[2],skew:i[3],width:i[4]}}var q={},P=[[1,1,1],[2,1,1],[3,1,1],[4,2,1],[5,2,1],[6,3,1],[7,4,2],[8,6,3],[9,7,6],[10,8,7],[11,10,9]],D=[.5,.6,.7,.8,.9,1,1.2,1.44,1.728,2.074,2.488],L=function(e,t){return t.size<2?e:P[e-1][t.size-1]},H=function(){function e(t){this.style=void 0,this.color=void 0,this.size=void 0,this.textSize=void 0,this.phantom=void 0,this.font=void 0,this.fontFamily=void 0,this.fontWeight=void 0,this.fontShape=void 0,this.sizeMultiplier=void 0,this.maxSize=void 0,this.minRuleThickness=void 0,this._fontMetrics=void 0,this.style=t.style,this.color=t.color,this.size=t.size||e.BASESIZE,this.textSize=t.textSize||this.size,this.phantom=!!t.phantom,this.font=t.font||"",this.fontFamily=t.fontFamily||"",this.fontWeight=t.fontWeight||"",this.fontShape=t.fontShape||"",this.sizeMultiplier=D[this.size-1],this.maxSize=t.maxSize,this.minRuleThickness=t.minRuleThickness,this._fontMetrics=void 0}var t=e.prototype;return t.extend=function(t){var r={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize,minRuleThickness:this.minRuleThickness};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n]);return new e(r)},t.havingStyle=function(e){return this.style===e?this:this.extend({style:e,size:L(this.textSize,e)})},t.havingCrampedStyle=function(){return this.havingStyle(this.style.cramp())},t.havingSize=function(e){return this.size===e&&this.textSize===e?this:this.extend({style:this.style.text(),size:e,textSize:e,sizeMultiplier:D[e-1]})},t.havingBaseStyle=function(t){t=t||this.style.text();var r=L(e.BASESIZE,t);return this.size===r&&this.textSize===e.BASESIZE&&this.style===t?this:this.extend({style:t,size:r})},t.havingBaseSizing=function(){var e;switch(this.style.id){case 4:case 5:e=3;break;case 6:case 7:e=1;break;default:e=6}return this.extend({style:this.style.text(),size:e})},t.withColor=function(e){return this.extend({color:e})},t.withPhantom=function(){return this.extend({phantom:!0})},t.withFont=function(e){return this.extend({font:e})},t.withTextFontFamily=function(e){return this.extend({fontFamily:e,font:""})},t.withTextFontWeight=function(e){return this.extend({fontWeight:e,font:""})},t.withTextFontShape=function(e){return this.extend({fontShape:e,font:""})},t.sizingClasses=function(e){return e.size!==this.size?["sizing","reset-size"+e.size,"size"+this.size]:[]},t.baseSizingClasses=function(){return this.size!==e.BASESIZE?["sizing","reset-size"+this.size,"size"+e.BASESIZE]:[]},t.fontMetrics=function(){return this._fontMetrics||(this._fontMetrics=function(e){var t;if(!q[t=e>=5?0:e>=3?1:2]){var r=q[t]={cssEmPerMu:R.quad[t]/18};for(var n in R)R.hasOwnProperty(n)&&(r[n]=R[n][t])}return q[t]}(this.size)),this._fontMetrics},t.getColor=function(){return this.phantom?"transparent":this.color},e}();H.BASESIZE=6;var j=H,F={pt:1,mm:7227/2540,cm:7227/254,in:72.27,bp:1.00375,pc:12,dd:1238/1157,cc:14856/1157,nd:685/642,nc:1370/107,sp:1/65536,px:1.00375},$={ex:!0,em:!0,mu:!0},V=function(e){return"string"!=typeof e&&(e=e.unit),e in F||e in $||"ex"===e},G=function(e,t){var r;if(e.unit in F)r=F[e.unit]/t.fontMetrics().ptPerEm/t.sizeMultiplier;else if("mu"===e.unit)r=t.fontMetrics().cssEmPerMu;else{var i;if(i=t.style.isTight()?t.havingStyle(t.style.text()):t,"ex"===e.unit)r=i.fontMetrics().xHeight;else{if("em"!==e.unit)throw new n("Invalid unit: '"+e.unit+"'");r=i.fontMetrics().quad}i!==t&&(r*=i.sizeMultiplier/t.sizeMultiplier)}return Math.min(e.number*r,t.maxSize)},U=function(e){return+e.toFixed(4)+"em"},W=function(e){return e.filter((function(e){return e})).join(" ")},X=function(e,t,r){if(this.classes=e||[],this.attributes={},this.height=0,this.depth=0,this.maxFontSize=0,this.style=r||{},t){t.style.isTight()&&this.classes.push("mtight");var n=t.getColor();n&&(this.style.color=n)}},Y=function(e){var t=document.createElement(e);for(var r in t.className=W(this.classes),this.style)this.style.hasOwnProperty(r)&&(t.style[r]=this.style[r]);for(var n in this.attributes)this.attributes.hasOwnProperty(n)&&t.setAttribute(n,this.attributes[n]);for(var i=0;i<this.children.length;i++)t.appendChild(this.children[i].toNode());return t},Z=function(e){var t="<"+e;this.classes.length&&(t+=' class="'+h(W(this.classes))+'"');var r="";for(var n in this.style)this.style.hasOwnProperty(n)&&(r+=u(n)+":"+this.style[n]+";");for(var i in r&&(t+=' style="'+h(r)+'"'),this.attributes)this.attributes.hasOwnProperty(i)&&(t+=" "+i+'="'+h(this.attributes[i])+'"');t+=">";for(var o=0;o<this.children.length;o++)t+=this.children[o].toMarkup();return t+"</"+e+">"},K=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.width=void 0,this.maxFontSize=void 0,this.style=void 0,X.call(this,e,r,n),this.children=t||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){return Y.call(this,"span")},t.toMarkup=function(){return Z.call(this,"span")},e}(),Q=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,X.call(this,t,n),this.children=r||[],this.setAttribute("href",e)}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){return Y.call(this,"a")},t.toMarkup=function(){return Z.call(this,"a")},e}(),J=function(){function e(e,t,r){this.src=void 0,this.alt=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.alt=t,this.src=e,this.classes=["mord"],this.style=r}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){var e=document.createElement("img");for(var t in e.src=this.src,e.alt=this.alt,e.className="mord",this.style)this.style.hasOwnProperty(t)&&(e.style[t]=this.style[t]);return e},t.toMarkup=function(){var e="<img  src='"+this.src+" 'alt='"+this.alt+"' ",t="";for(var r in this.style)this.style.hasOwnProperty(r)&&(t+=u(r)+":"+this.style[r]+";");return t&&(e+=' style="'+h(t)+'"'),e+"'/>"},e}(),ee={î:"ı̂",ï:"ı̈",í:"ı́",ì:"ı̀"},te=function(){function e(e,t,r,n,i,o,a,s){this.text=void 0,this.height=void 0,this.depth=void 0,this.italic=void 0,this.skew=void 0,this.width=void 0,this.maxFontSize=void 0,this.classes=void 0,this.style=void 0,this.text=e,this.height=t||0,this.depth=r||0,this.italic=n||0,this.skew=i||0,this.width=o||0,this.classes=a||[],this.style=s||{},this.maxFontSize=0;var l=function(e){for(var t=0;t<A.length;t++)for(var r=A[t],n=0;n<r.blocks.length;n++){var i=r.blocks[n];if(e>=i[0]&&e<=i[1])return r.name}return null}(this.text.charCodeAt(0));l&&this.classes.push(l+"_fallback"),/[îïíì]/.test(this.text)&&(this.text=ee[this.text])}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){var e=document.createTextNode(this.text),t=null;for(var r in this.italic>0&&((t=document.createElement("span")).style.marginRight=U(this.italic)),this.classes.length>0&&((t=t||document.createElement("span")).className=W(this.classes)),this.style)this.style.hasOwnProperty(r)&&((t=t||document.createElement("span")).style[r]=this.style[r]);return t?(t.appendChild(e),t):e},t.toMarkup=function(){var e=!1,t="<span";this.classes.length&&(e=!0,t+=' class="',t+=h(W(this.classes)),t+='"');var r="";for(var n in this.italic>0&&(r+="margin-right:"+this.italic+"em;"),this.style)this.style.hasOwnProperty(n)&&(r+=u(n)+":"+this.style[n]+";");r&&(e=!0,t+=' style="'+h(r)+'"');var i=h(this.text);return e?(t+=">",t+=i,t+="</span>"):i},e}(),re=function(){function e(e,t){this.children=void 0,this.attributes=void 0,this.children=e||[],this.attributes=t||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e='<svg xmlns="http://www.w3.org/2000/svg"';for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+"</svg>"},e}(),ne=function(){function e(e,t){this.pathName=void 0,this.alternate=void 0,this.pathName=e,this.alternate=t}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");return this.alternate?e.setAttribute("d",this.alternate):e.setAttribute("d",E[this.pathName]),e},t.toMarkup=function(){return this.alternate?"<path d='"+this.alternate+"'/>":"<path d='"+E[this.pathName]+"'/>"},e}(),ie=function(){function e(e){this.attributes=void 0,this.attributes=e||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","line");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);return e},t.toMarkup=function(){var e="<line";for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");return e+"/>"},e}();function oe(e){if(e instanceof te)return e;throw new Error("Expected symbolNode but got "+String(e)+".")}var ae={bin:1,close:1,inner:1,open:1,punct:1,rel:1},se={"accent-token":1,mathord:1,"op-token":1,spacing:1,textord:1},le={math:{},text:{}},ce=le;function he(e,t,r,n,i,o){le[e][i]={font:t,group:r,replace:n},o&&n&&(le[e][n]=le[e][i])}var ue="math",pe="text",me="main",de="ams",fe="accent-token",ge="bin",ve="close",be="inner",ye="mathord",xe="op-token",we="open",ke="punct",Se="rel",ze="spacing",Me="textord";he(ue,me,Se,"≡","\\equiv",!0),he(ue,me,Se,"≺","\\prec",!0),he(ue,me,Se,"≻","\\succ",!0),he(ue,me,Se,"∼","\\sim",!0),he(ue,me,Se,"⊥","\\perp"),he(ue,me,Se,"⪯","\\preceq",!0),he(ue,me,Se,"⪰","\\succeq",!0),he(ue,me,Se,"≃","\\simeq",!0),he(ue,me,Se,"∣","\\mid",!0),he(ue,me,Se,"≪","\\ll",!0),he(ue,me,Se,"≫","\\gg",!0),he(ue,me,Se,"≍","\\asymp",!0),he(ue,me,Se,"∥","\\parallel"),he(ue,me,Se,"⋈","\\bowtie",!0),he(ue,me,Se,"⌣","\\smile",!0),he(ue,me,Se,"⊑","\\sqsubseteq",!0),he(ue,me,Se,"⊒","\\sqsupseteq",!0),he(ue,me,Se,"≐","\\doteq",!0),he(ue,me,Se,"⌢","\\frown",!0),he(ue,me,Se,"∋","\\ni",!0),he(ue,me,Se,"∝","\\propto",!0),he(ue,me,Se,"⊢","\\vdash",!0),he(ue,me,Se,"⊣","\\dashv",!0),he(ue,me,Se,"∋","\\owns"),he(ue,me,ke,".","\\ldotp"),he(ue,me,ke,"⋅","\\cdotp"),he(ue,me,Me,"#","\\#"),he(pe,me,Me,"#","\\#"),he(ue,me,Me,"&","\\&"),he(pe,me,Me,"&","\\&"),he(ue,me,Me,"ℵ","\\aleph",!0),he(ue,me,Me,"∀","\\forall",!0),he(ue,me,Me,"ℏ","\\hbar",!0),he(ue,me,Me,"∃","\\exists",!0),he(ue,me,Me,"∇","\\nabla",!0),he(ue,me,Me,"♭","\\flat",!0),he(ue,me,Me,"ℓ","\\ell",!0),he(ue,me,Me,"♮","\\natural",!0),he(ue,me,Me,"♣","\\clubsuit",!0),he(ue,me,Me,"℘","\\wp",!0),he(ue,me,Me,"♯","\\sharp",!0),he(ue,me,Me,"♢","\\diamondsuit",!0),he(ue,me,Me,"ℜ","\\Re",!0),he(ue,me,Me,"♡","\\heartsuit",!0),he(ue,me,Me,"ℑ","\\Im",!0),he(ue,me,Me,"♠","\\spadesuit",!0),he(ue,me,Me,"§","\\S",!0),he(pe,me,Me,"§","\\S"),he(ue,me,Me,"¶","\\P",!0),he(pe,me,Me,"¶","\\P"),he(ue,me,Me,"†","\\dag"),he(pe,me,Me,"†","\\dag"),he(pe,me,Me,"†","\\textdagger"),he(ue,me,Me,"‡","\\ddag"),he(pe,me,Me,"‡","\\ddag"),he(pe,me,Me,"‡","\\textdaggerdbl"),he(ue,me,ve,"⎱","\\rmoustache",!0),he(ue,me,we,"⎰","\\lmoustache",!0),he(ue,me,ve,"⟯","\\rgroup",!0),he(ue,me,we,"⟮","\\lgroup",!0),he(ue,me,ge,"∓","\\mp",!0),he(ue,me,ge,"⊖","\\ominus",!0),he(ue,me,ge,"⊎","\\uplus",!0),he(ue,me,ge,"⊓","\\sqcap",!0),he(ue,me,ge,"∗","\\ast"),he(ue,me,ge,"⊔","\\sqcup",!0),he(ue,me,ge,"◯","\\bigcirc",!0),he(ue,me,ge,"∙","\\bullet",!0),he(ue,me,ge,"‡","\\ddagger"),he(ue,me,ge,"≀","\\wr",!0),he(ue,me,ge,"⨿","\\amalg"),he(ue,me,ge,"&","\\And"),he(ue,me,Se,"⟵","\\longleftarrow",!0),he(ue,me,Se,"⇐","\\Leftarrow",!0),he(ue,me,Se,"⟸","\\Longleftarrow",!0),he(ue,me,Se,"⟶","\\longrightarrow",!0),he(ue,me,Se,"⇒","\\Rightarrow",!0),he(ue,me,Se,"⟹","\\Longrightarrow",!0),he(ue,me,Se,"↔","\\leftrightarrow",!0),he(ue,me,Se,"⟷","\\longleftrightarrow",!0),he(ue,me,Se,"⇔","\\Leftrightarrow",!0),he(ue,me,Se,"⟺","\\Longleftrightarrow",!0),he(ue,me,Se,"↦","\\mapsto",!0),he(ue,me,Se,"⟼","\\longmapsto",!0),he(ue,me,Se,"↗","\\nearrow",!0),he(ue,me,Se,"↩","\\hookleftarrow",!0),he(ue,me,Se,"↪","\\hookrightarrow",!0),he(ue,me,Se,"↘","\\searrow",!0),he(ue,me,Se,"↼","\\leftharpoonup",!0),he(ue,me,Se,"⇀","\\rightharpoonup",!0),he(ue,me,Se,"↙","\\swarrow",!0),he(ue,me,Se,"↽","\\leftharpoondown",!0),he(ue,me,Se,"⇁","\\rightharpoondown",!0),he(ue,me,Se,"↖","\\nwarrow",!0),he(ue,me,Se,"⇌","\\rightleftharpoons",!0),he(ue,de,Se,"≮","\\nless",!0),he(ue,de,Se,"","\\@nleqslant"),he(ue,de,Se,"","\\@nleqq"),he(ue,de,Se,"⪇","\\lneq",!0),he(ue,de,Se,"≨","\\lneqq",!0),he(ue,de,Se,"","\\@lvertneqq"),he(ue,de,Se,"⋦","\\lnsim",!0),he(ue,de,Se,"⪉","\\lnapprox",!0),he(ue,de,Se,"⊀","\\nprec",!0),he(ue,de,Se,"⋠","\\npreceq",!0),he(ue,de,Se,"⋨","\\precnsim",!0),he(ue,de,Se,"⪹","\\precnapprox",!0),he(ue,de,Se,"≁","\\nsim",!0),he(ue,de,Se,"","\\@nshortmid"),he(ue,de,Se,"∤","\\nmid",!0),he(ue,de,Se,"⊬","\\nvdash",!0),he(ue,de,Se,"⊭","\\nvDash",!0),he(ue,de,Se,"⋪","\\ntriangleleft"),he(ue,de,Se,"⋬","\\ntrianglelefteq",!0),he(ue,de,Se,"⊊","\\subsetneq",!0),he(ue,de,Se,"","\\@varsubsetneq"),he(ue,de,Se,"⫋","\\subsetneqq",!0),he(ue,de,Se,"","\\@varsubsetneqq"),he(ue,de,Se,"≯","\\ngtr",!0),he(ue,de,Se,"","\\@ngeqslant"),he(ue,de,Se,"","\\@ngeqq"),he(ue,de,Se,"⪈","\\gneq",!0),he(ue,de,Se,"≩","\\gneqq",!0),he(ue,de,Se,"","\\@gvertneqq"),he(ue,de,Se,"⋧","\\gnsim",!0),he(ue,de,Se,"⪊","\\gnapprox",!0),he(ue,de,Se,"⊁","\\nsucc",!0),he(ue,de,Se,"⋡","\\nsucceq",!0),he(ue,de,Se,"⋩","\\succnsim",!0),he(ue,de,Se,"⪺","\\succnapprox",!0),he(ue,de,Se,"≆","\\ncong",!0),he(ue,de,Se,"","\\@nshortparallel"),he(ue,de,Se,"∦","\\nparallel",!0),he(ue,de,Se,"⊯","\\nVDash",!0),he(ue,de,Se,"⋫","\\ntriangleright"),he(ue,de,Se,"⋭","\\ntrianglerighteq",!0),he(ue,de,Se,"","\\@nsupseteqq"),he(ue,de,Se,"⊋","\\supsetneq",!0),he(ue,de,Se,"","\\@varsupsetneq"),he(ue,de,Se,"⫌","\\supsetneqq",!0),he(ue,de,Se,"","\\@varsupsetneqq"),he(ue,de,Se,"⊮","\\nVdash",!0),he(ue,de,Se,"⪵","\\precneqq",!0),he(ue,de,Se,"⪶","\\succneqq",!0),he(ue,de,Se,"","\\@nsubseteqq"),he(ue,de,ge,"⊴","\\unlhd"),he(ue,de,ge,"⊵","\\unrhd"),he(ue,de,Se,"↚","\\nleftarrow",!0),he(ue,de,Se,"↛","\\nrightarrow",!0),he(ue,de,Se,"⇍","\\nLeftarrow",!0),he(ue,de,Se,"⇏","\\nRightarrow",!0),he(ue,de,Se,"↮","\\nleftrightarrow",!0),he(ue,de,Se,"⇎","\\nLeftrightarrow",!0),he(ue,de,Se,"△","\\vartriangle"),he(ue,de,Me,"ℏ","\\hslash"),he(ue,de,Me,"▽","\\triangledown"),he(ue,de,Me,"◊","\\lozenge"),he(ue,de,Me,"Ⓢ","\\circledS"),he(ue,de,Me,"®","\\circledR"),he(pe,de,Me,"®","\\circledR"),he(ue,de,Me,"∡","\\measuredangle",!0),he(ue,de,Me,"∄","\\nexists"),he(ue,de,Me,"℧","\\mho"),he(ue,de,Me,"Ⅎ","\\Finv",!0),he(ue,de,Me,"⅁","\\Game",!0),he(ue,de,Me,"‵","\\backprime"),he(ue,de,Me,"▲","\\blacktriangle"),he(ue,de,Me,"▼","\\blacktriangledown"),he(ue,de,Me,"■","\\blacksquare"),he(ue,de,Me,"⧫","\\blacklozenge"),he(ue,de,Me,"★","\\bigstar"),he(ue,de,Me,"∢","\\sphericalangle",!0),he(ue,de,Me,"∁","\\complement",!0),he(ue,de,Me,"ð","\\eth",!0),he(pe,me,Me,"ð","ð"),he(ue,de,Me,"╱","\\diagup"),he(ue,de,Me,"╲","\\diagdown"),he(ue,de,Me,"□","\\square"),he(ue,de,Me,"□","\\Box"),he(ue,de,Me,"◊","\\Diamond"),he(ue,de,Me,"¥","\\yen",!0),he(pe,de,Me,"¥","\\yen",!0),he(ue,de,Me,"✓","\\checkmark",!0),he(pe,de,Me,"✓","\\checkmark"),he(ue,de,Me,"ℶ","\\beth",!0),he(ue,de,Me,"ℸ","\\daleth",!0),he(ue,de,Me,"ℷ","\\gimel",!0),he(ue,de,Me,"ϝ","\\digamma",!0),he(ue,de,Me,"ϰ","\\varkappa"),he(ue,de,we,"┌","\\@ulcorner",!0),he(ue,de,ve,"┐","\\@urcorner",!0),he(ue,de,we,"└","\\@llcorner",!0),he(ue,de,ve,"┘","\\@lrcorner",!0),he(ue,de,Se,"≦","\\leqq",!0),he(ue,de,Se,"⩽","\\leqslant",!0),he(ue,de,Se,"⪕","\\eqslantless",!0),he(ue,de,Se,"≲","\\lesssim",!0),he(ue,de,Se,"⪅","\\lessapprox",!0),he(ue,de,Se,"≊","\\approxeq",!0),he(ue,de,ge,"⋖","\\lessdot"),he(ue,de,Se,"⋘","\\lll",!0),he(ue,de,Se,"≶","\\lessgtr",!0),he(ue,de,Se,"⋚","\\lesseqgtr",!0),he(ue,de,Se,"⪋","\\lesseqqgtr",!0),he(ue,de,Se,"≑","\\doteqdot"),he(ue,de,Se,"≓","\\risingdotseq",!0),he(ue,de,Se,"≒","\\fallingdotseq",!0),he(ue,de,Se,"∽","\\backsim",!0),he(ue,de,Se,"⋍","\\backsimeq",!0),he(ue,de,Se,"⫅","\\subseteqq",!0),he(ue,de,Se,"⋐","\\Subset",!0),he(ue,de,Se,"⊏","\\sqsubset",!0),he(ue,de,Se,"≼","\\preccurlyeq",!0),he(ue,de,Se,"⋞","\\curlyeqprec",!0),he(ue,de,Se,"≾","\\precsim",!0),he(ue,de,Se,"⪷","\\precapprox",!0),he(ue,de,Se,"⊲","\\vartriangleleft"),he(ue,de,Se,"⊴","\\trianglelefteq"),he(ue,de,Se,"⊨","\\vDash",!0),he(ue,de,Se,"⊪","\\Vvdash",!0),he(ue,de,Se,"⌣","\\smallsmile"),he(ue,de,Se,"⌢","\\smallfrown"),he(ue,de,Se,"≏","\\bumpeq",!0),he(ue,de,Se,"≎","\\Bumpeq",!0),he(ue,de,Se,"≧","\\geqq",!0),he(ue,de,Se,"⩾","\\geqslant",!0),he(ue,de,Se,"⪖","\\eqslantgtr",!0),he(ue,de,Se,"≳","\\gtrsim",!0),he(ue,de,Se,"⪆","\\gtrapprox",!0),he(ue,de,ge,"⋗","\\gtrdot"),he(ue,de,Se,"⋙","\\ggg",!0),he(ue,de,Se,"≷","\\gtrless",!0),he(ue,de,Se,"⋛","\\gtreqless",!0),he(ue,de,Se,"⪌","\\gtreqqless",!0),he(ue,de,Se,"≖","\\eqcirc",!0),he(ue,de,Se,"≗","\\circeq",!0),he(ue,de,Se,"≜","\\triangleq",!0),he(ue,de,Se,"∼","\\thicksim"),he(ue,de,Se,"≈","\\thickapprox"),he(ue,de,Se,"⫆","\\supseteqq",!0),he(ue,de,Se,"⋑","\\Supset",!0),he(ue,de,Se,"⊐","\\sqsupset",!0),he(ue,de,Se,"≽","\\succcurlyeq",!0),he(ue,de,Se,"⋟","\\curlyeqsucc",!0),he(ue,de,Se,"≿","\\succsim",!0),he(ue,de,Se,"⪸","\\succapprox",!0),he(ue,de,Se,"⊳","\\vartriangleright"),he(ue,de,Se,"⊵","\\trianglerighteq"),he(ue,de,Se,"⊩","\\Vdash",!0),he(ue,de,Se,"∣","\\shortmid"),he(ue,de,Se,"∥","\\shortparallel"),he(ue,de,Se,"≬","\\between",!0),he(ue,de,Se,"⋔","\\pitchfork",!0),he(ue,de,Se,"∝","\\varpropto"),he(ue,de,Se,"◀","\\blacktriangleleft"),he(ue,de,Se,"∴","\\therefore",!0),he(ue,de,Se,"∍","\\backepsilon"),he(ue,de,Se,"▶","\\blacktriangleright"),he(ue,de,Se,"∵","\\because",!0),he(ue,de,Se,"⋘","\\llless"),he(ue,de,Se,"⋙","\\gggtr"),he(ue,de,ge,"⊲","\\lhd"),he(ue,de,ge,"⊳","\\rhd"),he(ue,de,Se,"≂","\\eqsim",!0),he(ue,me,Se,"⋈","\\Join"),he(ue,de,Se,"≑","\\Doteq",!0),he(ue,de,ge,"∔","\\dotplus",!0),he(ue,de,ge,"∖","\\smallsetminus"),he(ue,de,ge,"⋒","\\Cap",!0),he(ue,de,ge,"⋓","\\Cup",!0),he(ue,de,ge,"⩞","\\doublebarwedge",!0),he(ue,de,ge,"⊟","\\boxminus",!0),he(ue,de,ge,"⊞","\\boxplus",!0),he(ue,de,ge,"⋇","\\divideontimes",!0),he(ue,de,ge,"⋉","\\ltimes",!0),he(ue,de,ge,"⋊","\\rtimes",!0),he(ue,de,ge,"⋋","\\leftthreetimes",!0),he(ue,de,ge,"⋌","\\rightthreetimes",!0),he(ue,de,ge,"⋏","\\curlywedge",!0),he(ue,de,ge,"⋎","\\curlyvee",!0),he(ue,de,ge,"⊝","\\circleddash",!0),he(ue,de,ge,"⊛","\\circledast",!0),he(ue,de,ge,"⋅","\\centerdot"),he(ue,de,ge,"⊺","\\intercal",!0),he(ue,de,ge,"⋒","\\doublecap"),he(ue,de,ge,"⋓","\\doublecup"),he(ue,de,ge,"⊠","\\boxtimes",!0),he(ue,de,Se,"⇢","\\dashrightarrow",!0),he(ue,de,Se,"⇠","\\dashleftarrow",!0),he(ue,de,Se,"⇇","\\leftleftarrows",!0),he(ue,de,Se,"⇆","\\leftrightarrows",!0),he(ue,de,Se,"⇚","\\Lleftarrow",!0),he(ue,de,Se,"↞","\\twoheadleftarrow",!0),he(ue,de,Se,"↢","\\leftarrowtail",!0),he(ue,de,Se,"↫","\\looparrowleft",!0),he(ue,de,Se,"⇋","\\leftrightharpoons",!0),he(ue,de,Se,"↶","\\curvearrowleft",!0),he(ue,de,Se,"↺","\\circlearrowleft",!0),he(ue,de,Se,"↰","\\Lsh",!0),he(ue,de,Se,"⇈","\\upuparrows",!0),he(ue,de,Se,"↿","\\upharpoonleft",!0),he(ue,de,Se,"⇃","\\downharpoonleft",!0),he(ue,me,Se,"⊶","\\origof",!0),he(ue,me,Se,"⊷","\\imageof",!0),he(ue,de,Se,"⊸","\\multimap",!0),he(ue,de,Se,"↭","\\leftrightsquigarrow",!0),he(ue,de,Se,"⇉","\\rightrightarrows",!0),he(ue,de,Se,"⇄","\\rightleftarrows",!0),he(ue,de,Se,"↠","\\twoheadrightarrow",!0),he(ue,de,Se,"↣","\\rightarrowtail",!0),he(ue,de,Se,"↬","\\looparrowright",!0),he(ue,de,Se,"↷","\\curvearrowright",!0),he(ue,de,Se,"↻","\\circlearrowright",!0),he(ue,de,Se,"↱","\\Rsh",!0),he(ue,de,Se,"⇊","\\downdownarrows",!0),he(ue,de,Se,"↾","\\upharpoonright",!0),he(ue,de,Se,"⇂","\\downharpoonright",!0),he(ue,de,Se,"⇝","\\rightsquigarrow",!0),he(ue,de,Se,"⇝","\\leadsto"),he(ue,de,Se,"⇛","\\Rrightarrow",!0),he(ue,de,Se,"↾","\\restriction"),he(ue,me,Me,"‘","`"),he(ue,me,Me,"$","\\$"),he(pe,me,Me,"$","\\$"),he(pe,me,Me,"$","\\textdollar"),he(ue,me,Me,"%","\\%"),he(pe,me,Me,"%","\\%"),he(ue,me,Me,"_","\\_"),he(pe,me,Me,"_","\\_"),he(pe,me,Me,"_","\\textunderscore"),he(ue,me,Me,"∠","\\angle",!0),he(ue,me,Me,"∞","\\infty",!0),he(ue,me,Me,"′","\\prime"),he(ue,me,Me,"△","\\triangle"),he(ue,me,Me,"Γ","\\Gamma",!0),he(ue,me,Me,"Δ","\\Delta",!0),he(ue,me,Me,"Θ","\\Theta",!0),he(ue,me,Me,"Λ","\\Lambda",!0),he(ue,me,Me,"Ξ","\\Xi",!0),he(ue,me,Me,"Π","\\Pi",!0),he(ue,me,Me,"Σ","\\Sigma",!0),he(ue,me,Me,"Υ","\\Upsilon",!0),he(ue,me,Me,"Φ","\\Phi",!0),he(ue,me,Me,"Ψ","\\Psi",!0),he(ue,me,Me,"Ω","\\Omega",!0),he(ue,me,Me,"A","Α"),he(ue,me,Me,"B","Β"),he(ue,me,Me,"E","Ε"),he(ue,me,Me,"Z","Ζ"),he(ue,me,Me,"H","Η"),he(ue,me,Me,"I","Ι"),he(ue,me,Me,"K","Κ"),he(ue,me,Me,"M","Μ"),he(ue,me,Me,"N","Ν"),he(ue,me,Me,"O","Ο"),he(ue,me,Me,"P","Ρ"),he(ue,me,Me,"T","Τ"),he(ue,me,Me,"X","Χ"),he(ue,me,Me,"¬","\\neg",!0),he(ue,me,Me,"¬","\\lnot"),he(ue,me,Me,"⊤","\\top"),he(ue,me,Me,"⊥","\\bot"),he(ue,me,Me,"∅","\\emptyset"),he(ue,de,Me,"∅","\\varnothing"),he(ue,me,ye,"α","\\alpha",!0),he(ue,me,ye,"β","\\beta",!0),he(ue,me,ye,"γ","\\gamma",!0),he(ue,me,ye,"δ","\\delta",!0),he(ue,me,ye,"ϵ","\\epsilon",!0),he(ue,me,ye,"ζ","\\zeta",!0),he(ue,me,ye,"η","\\eta",!0),he(ue,me,ye,"θ","\\theta",!0),he(ue,me,ye,"ι","\\iota",!0),he(ue,me,ye,"κ","\\kappa",!0),he(ue,me,ye,"λ","\\lambda",!0),he(ue,me,ye,"μ","\\mu",!0),he(ue,me,ye,"ν","\\nu",!0),he(ue,me,ye,"ξ","\\xi",!0),he(ue,me,ye,"ο","\\omicron",!0),he(ue,me,ye,"π","\\pi",!0),he(ue,me,ye,"ρ","\\rho",!0),he(ue,me,ye,"σ","\\sigma",!0),he(ue,me,ye,"τ","\\tau",!0),he(ue,me,ye,"υ","\\upsilon",!0),he(ue,me,ye,"ϕ","\\phi",!0),he(ue,me,ye,"χ","\\chi",!0),he(ue,me,ye,"ψ","\\psi",!0),he(ue,me,ye,"ω","\\omega",!0),he(ue,me,ye,"ε","\\varepsilon",!0),he(ue,me,ye,"ϑ","\\vartheta",!0),he(ue,me,ye,"ϖ","\\varpi",!0),he(ue,me,ye,"ϱ","\\varrho",!0),he(ue,me,ye,"ς","\\varsigma",!0),he(ue,me,ye,"φ","\\varphi",!0),he(ue,me,ge,"∗","*",!0),he(ue,me,ge,"+","+"),he(ue,me,ge,"−","-",!0),he(ue,me,ge,"⋅","\\cdot",!0),he(ue,me,ge,"∘","\\circ",!0),he(ue,me,ge,"÷","\\div",!0),he(ue,me,ge,"±","\\pm",!0),he(ue,me,ge,"×","\\times",!0),he(ue,me,ge,"∩","\\cap",!0),he(ue,me,ge,"∪","\\cup",!0),he(ue,me,ge,"∖","\\setminus",!0),he(ue,me,ge,"∧","\\land"),he(ue,me,ge,"∨","\\lor"),he(ue,me,ge,"∧","\\wedge",!0),he(ue,me,ge,"∨","\\vee",!0),he(ue,me,Me,"√","\\surd"),he(ue,me,we,"⟨","\\langle",!0),he(ue,me,we,"∣","\\lvert"),he(ue,me,we,"∥","\\lVert"),he(ue,me,ve,"?","?"),he(ue,me,ve,"!","!"),he(ue,me,ve,"⟩","\\rangle",!0),he(ue,me,ve,"∣","\\rvert"),he(ue,me,ve,"∥","\\rVert"),he(ue,me,Se,"=","="),he(ue,me,Se,":",":"),he(ue,me,Se,"≈","\\approx",!0),he(ue,me,Se,"≅","\\cong",!0),he(ue,me,Se,"≥","\\ge"),he(ue,me,Se,"≥","\\geq",!0),he(ue,me,Se,"←","\\gets"),he(ue,me,Se,">","\\gt",!0),he(ue,me,Se,"∈","\\in",!0),he(ue,me,Se,"","\\@not"),he(ue,me,Se,"⊂","\\subset",!0),he(ue,me,Se,"⊃","\\supset",!0),he(ue,me,Se,"⊆","\\subseteq",!0),he(ue,me,Se,"⊇","\\supseteq",!0),he(ue,de,Se,"⊈","\\nsubseteq",!0),he(ue,de,Se,"⊉","\\nsupseteq",!0),he(ue,me,Se,"⊨","\\models"),he(ue,me,Se,"←","\\leftarrow",!0),he(ue,me,Se,"≤","\\le"),he(ue,me,Se,"≤","\\leq",!0),he(ue,me,Se,"<","\\lt",!0),he(ue,me,Se,"→","\\rightarrow",!0),he(ue,me,Se,"→","\\to"),he(ue,de,Se,"≱","\\ngeq",!0),he(ue,de,Se,"≰","\\nleq",!0),he(ue,me,ze," ","\\ "),he(ue,me,ze," ","\\space"),he(ue,me,ze," ","\\nobreakspace"),he(pe,me,ze," ","\\ "),he(pe,me,ze," "," "),he(pe,me,ze," ","\\space"),he(pe,me,ze," ","\\nobreakspace"),he(ue,me,ze,null,"\\nobreak"),he(ue,me,ze,null,"\\allowbreak"),he(ue,me,ke,",",","),he(ue,me,ke,";",";"),he(ue,de,ge,"⊼","\\barwedge",!0),he(ue,de,ge,"⊻","\\veebar",!0),he(ue,me,ge,"⊙","\\odot",!0),he(ue,me,ge,"⊕","\\oplus",!0),he(ue,me,ge,"⊗","\\otimes",!0),he(ue,me,Me,"∂","\\partial",!0),he(ue,me,ge,"⊘","\\oslash",!0),he(ue,de,ge,"⊚","\\circledcirc",!0),he(ue,de,ge,"⊡","\\boxdot",!0),he(ue,me,ge,"△","\\bigtriangleup"),he(ue,me,ge,"▽","\\bigtriangledown"),he(ue,me,ge,"†","\\dagger"),he(ue,me,ge,"⋄","\\diamond"),he(ue,me,ge,"⋆","\\star"),he(ue,me,ge,"◃","\\triangleleft"),he(ue,me,ge,"▹","\\triangleright"),he(ue,me,we,"{","\\{"),he(pe,me,Me,"{","\\{"),he(pe,me,Me,"{","\\textbraceleft"),he(ue,me,ve,"}","\\}"),he(pe,me,Me,"}","\\}"),he(pe,me,Me,"}","\\textbraceright"),he(ue,me,we,"{","\\lbrace"),he(ue,me,ve,"}","\\rbrace"),he(ue,me,we,"[","\\lbrack",!0),he(pe,me,Me,"[","\\lbrack",!0),he(ue,me,ve,"]","\\rbrack",!0),he(pe,me,Me,"]","\\rbrack",!0),he(ue,me,we,"(","\\lparen",!0),he(ue,me,ve,")","\\rparen",!0),he(pe,me,Me,"<","\\textless",!0),he(pe,me,Me,">","\\textgreater",!0),he(ue,me,we,"⌊","\\lfloor",!0),he(ue,me,ve,"⌋","\\rfloor",!0),he(ue,me,we,"⌈","\\lceil",!0),he(ue,me,ve,"⌉","\\rceil",!0),he(ue,me,Me,"\\","\\backslash"),he(ue,me,Me,"∣","|"),he(ue,me,Me,"∣","\\vert"),he(pe,me,Me,"|","\\textbar",!0),he(ue,me,Me,"∥","\\|"),he(ue,me,Me,"∥","\\Vert"),he(pe,me,Me,"∥","\\textbardbl"),he(pe,me,Me,"~","\\textasciitilde"),he(pe,me,Me,"\\","\\textbackslash"),he(pe,me,Me,"^","\\textasciicircum"),he(ue,me,Se,"↑","\\uparrow",!0),he(ue,me,Se,"⇑","\\Uparrow",!0),he(ue,me,Se,"↓","\\downarrow",!0),he(ue,me,Se,"⇓","\\Downarrow",!0),he(ue,me,Se,"↕","\\updownarrow",!0),he(ue,me,Se,"⇕","\\Updownarrow",!0),he(ue,me,xe,"∐","\\coprod"),he(ue,me,xe,"⋁","\\bigvee"),he(ue,me,xe,"⋀","\\bigwedge"),he(ue,me,xe,"⨄","\\biguplus"),he(ue,me,xe,"⋂","\\bigcap"),he(ue,me,xe,"⋃","\\bigcup"),he(ue,me,xe,"∫","\\int"),he(ue,me,xe,"∫","\\intop"),he(ue,me,xe,"∬","\\iint"),he(ue,me,xe,"∭","\\iiint"),he(ue,me,xe,"∏","\\prod"),he(ue,me,xe,"∑","\\sum"),he(ue,me,xe,"⨂","\\bigotimes"),he(ue,me,xe,"⨁","\\bigoplus"),he(ue,me,xe,"⨀","\\bigodot"),he(ue,me,xe,"∮","\\oint"),he(ue,me,xe,"∯","\\oiint"),he(ue,me,xe,"∰","\\oiiint"),he(ue,me,xe,"⨆","\\bigsqcup"),he(ue,me,xe,"∫","\\smallint"),he(pe,me,be,"…","\\textellipsis"),he(ue,me,be,"…","\\mathellipsis"),he(pe,me,be,"…","\\ldots",!0),he(ue,me,be,"…","\\ldots",!0),he(ue,me,be,"⋯","\\@cdots",!0),he(ue,me,be,"⋱","\\ddots",!0),he(ue,me,Me,"⋮","\\varvdots"),he(ue,me,fe,"ˊ","\\acute"),he(ue,me,fe,"ˋ","\\grave"),he(ue,me,fe,"¨","\\ddot"),he(ue,me,fe,"~","\\tilde"),he(ue,me,fe,"ˉ","\\bar"),he(ue,me,fe,"˘","\\breve"),he(ue,me,fe,"ˇ","\\check"),he(ue,me,fe,"^","\\hat"),he(ue,me,fe,"⃗","\\vec"),he(ue,me,fe,"˙","\\dot"),he(ue,me,fe,"˚","\\mathring"),he(ue,me,ye,"","\\@imath"),he(ue,me,ye,"","\\@jmath"),he(ue,me,Me,"ı","ı"),he(ue,me,Me,"ȷ","ȷ"),he(pe,me,Me,"ı","\\i",!0),he(pe,me,Me,"ȷ","\\j",!0),he(pe,me,Me,"ß","\\ss",!0),he(pe,me,Me,"æ","\\ae",!0),he(pe,me,Me,"œ","\\oe",!0),he(pe,me,Me,"ø","\\o",!0),he(pe,me,Me,"Æ","\\AE",!0),he(pe,me,Me,"Œ","\\OE",!0),he(pe,me,Me,"Ø","\\O",!0),he(pe,me,fe,"ˊ","\\'"),he(pe,me,fe,"ˋ","\\`"),he(pe,me,fe,"ˆ","\\^"),he(pe,me,fe,"˜","\\~"),he(pe,me,fe,"ˉ","\\="),he(pe,me,fe,"˘","\\u"),he(pe,me,fe,"˙","\\."),he(pe,me,fe,"¸","\\c"),he(pe,me,fe,"˚","\\r"),he(pe,me,fe,"ˇ","\\v"),he(pe,me,fe,"¨",'\\"'),he(pe,me,fe,"˝","\\H"),he(pe,me,fe,"◯","\\textcircled");var Te={"--":!0,"---":!0,"``":!0,"''":!0};he(pe,me,Me,"–","--",!0),he(pe,me,Me,"–","\\textendash"),he(pe,me,Me,"—","---",!0),he(pe,me,Me,"—","\\textemdash"),he(pe,me,Me,"‘","`",!0),he(pe,me,Me,"‘","\\textquoteleft"),he(pe,me,Me,"’","'",!0),he(pe,me,Me,"’","\\textquoteright"),he(pe,me,Me,"“","``",!0),he(pe,me,Me,"“","\\textquotedblleft"),he(pe,me,Me,"”","''",!0),he(pe,me,Me,"”","\\textquotedblright"),he(ue,me,Me,"°","\\degree",!0),he(pe,me,Me,"°","\\degree"),he(pe,me,Me,"°","\\textdegree",!0),he(ue,me,Me,"£","\\pounds"),he(ue,me,Me,"£","\\mathsterling",!0),he(pe,me,Me,"£","\\pounds"),he(pe,me,Me,"£","\\textsterling",!0),he(ue,de,Me,"✠","\\maltese"),he(pe,de,Me,"✠","\\maltese");for(var Ae=0;Ae<14;Ae++){var Ce='0123456789/@."'.charAt(Ae);he(ue,me,Me,Ce,Ce)}for(var Oe=0;Oe<25;Oe++){var Ee='0123456789!@*()-=+";:?/.,'.charAt(Oe);he(pe,me,Me,Ee,Ee)}for(var Be="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",Ie=0;Ie<52;Ie++){var Re=Be.charAt(Ie);he(ue,me,ye,Re,Re),he(pe,me,Me,Re,Re)}he(ue,de,Me,"C","ℂ"),he(pe,de,Me,"C","ℂ"),he(ue,de,Me,"H","ℍ"),he(pe,de,Me,"H","ℍ"),he(ue,de,Me,"N","ℕ"),he(pe,de,Me,"N","ℕ"),he(ue,de,Me,"P","ℙ"),he(pe,de,Me,"P","ℙ"),he(ue,de,Me,"Q","ℚ"),he(pe,de,Me,"Q","ℚ"),he(ue,de,Me,"R","ℝ"),he(pe,de,Me,"R","ℝ"),he(ue,de,Me,"Z","ℤ"),he(pe,de,Me,"Z","ℤ"),he(ue,me,ye,"h","ℎ"),he(pe,me,ye,"h","ℎ");for(var Ne="",_e=0;_e<52;_e++){var qe=Be.charAt(_e);he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56320+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56372+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56424+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56580+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56736+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56788+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56840+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56944+_e)),he(pe,me,Me,qe,Ne),_e<26&&(he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56632+_e)),he(pe,me,Me,qe,Ne),he(ue,me,ye,qe,Ne=String.fromCharCode(55349,56476+_e)),he(pe,me,Me,qe,Ne))}he(ue,me,ye,"k",Ne=String.fromCharCode(55349,56668)),he(pe,me,Me,"k",Ne);for(var Pe=0;Pe<10;Pe++){var De=Pe.toString();he(ue,me,ye,De,Ne=String.fromCharCode(55349,57294+Pe)),he(pe,me,Me,De,Ne),he(ue,me,ye,De,Ne=String.fromCharCode(55349,57314+Pe)),he(pe,me,Me,De,Ne),he(ue,me,ye,De,Ne=String.fromCharCode(55349,57324+Pe)),he(pe,me,Me,De,Ne),he(ue,me,ye,De,Ne=String.fromCharCode(55349,57334+Pe)),he(pe,me,Me,De,Ne)}for(var Le=0;Le<3;Le++){var He="ÐÞþ".charAt(Le);he(ue,me,ye,He,He),he(pe,me,Me,He,He)}var je=[["mathbf","textbf","Main-Bold"],["mathbf","textbf","Main-Bold"],["mathnormal","textit","Math-Italic"],["mathnormal","textit","Math-Italic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["mathscr","textscr","Script-Regular"],["","",""],["","",""],["","",""],["mathfrak","textfrak","Fraktur-Regular"],["mathfrak","textfrak","Fraktur-Regular"],["mathbb","textbb","AMS-Regular"],["mathbb","textbb","AMS-Regular"],["","",""],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathitsf","textitsf","SansSerif-Italic"],["mathitsf","textitsf","SansSerif-Italic"],["","",""],["","",""],["mathtt","texttt","Typewriter-Regular"],["mathtt","texttt","Typewriter-Regular"]],Fe=[["mathbf","textbf","Main-Bold"],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathtt","texttt","Typewriter-Regular"]],$e=function(e,t,r){return ce[r][e]&&ce[r][e].replace&&(e=ce[r][e].replace),{value:e,metrics:_(e,t,r)}},Ve=function(e,t,r,n,i){var o,a=$e(e,t,r),s=a.metrics;if(e=a.value,s){var l=s.italic;("text"===r||n&&"mathit"===n.font)&&(l=0),o=new te(e,s.height,s.depth,l,s.skew,s.width,i)}else"undefined"!=typeof console&&console.warn("No character metrics for '"+e+"' in style '"+t+"' and mode '"+r+"'"),o=new te(e,0,0,0,0,0,i);if(n){o.maxFontSize=n.sizeMultiplier,n.style.isTight()&&o.classes.push("mtight");var c=n.getColor();c&&(o.style.color=c)}return o},Ge=function(e,t){if(W(e.classes)!==W(t.classes)||e.skew!==t.skew||e.maxFontSize!==t.maxFontSize)return!1;if(1===e.classes.length){var r=e.classes[0];if("mbin"===r||"mord"===r)return!1}for(var n in e.style)if(e.style.hasOwnProperty(n)&&e.style[n]!==t.style[n])return!1;for(var i in t.style)if(t.style.hasOwnProperty(i)&&e.style[i]!==t.style[i])return!1;return!0},Ue=function(e){for(var t=0,r=0,n=0,i=0;i<e.children.length;i++){var o=e.children[i];o.height>t&&(t=o.height),o.depth>r&&(r=o.depth),o.maxFontSize>n&&(n=o.maxFontSize)}e.height=t,e.depth=r,e.maxFontSize=n},We=function(e,t,r,n){var i=new K(e,t,r,n);return Ue(i),i},Xe=function(e,t,r,n){return new K(e,t,r,n)},Ye=function(e){var t=new B(e);return Ue(t),t},Ze=function(e,t,r){var n="";switch(e){case"amsrm":n="AMS";break;case"textrm":n="Main";break;case"textsf":n="SansSerif";break;case"texttt":n="Typewriter";break;default:n=e}return n+"-"+("textbf"===t&&"textit"===r?"BoldItalic":"textbf"===t?"Bold":"textit"===t?"Italic":"Regular")},Ke={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathit:{variant:"italic",fontName:"Main-Italic"},mathnormal:{variant:"italic",fontName:"Math-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}},Qe={vec:["vec",.471,.714],oiintSize1:["oiintSize1",.957,.499],oiintSize2:["oiintSize2",1.472,.659],oiiintSize1:["oiiintSize1",1.304,.499],oiiintSize2:["oiiintSize2",1.98,.659]},Je={fontMap:Ke,makeSymbol:Ve,mathsym:function(e,t,r,n){return void 0===n&&(n=[]),"boldsymbol"===r.font&&$e(e,"Main-Bold",t).metrics?Ve(e,"Main-Bold",t,r,n.concat(["mathbf"])):"\\"===e||"main"===ce[t][e].font?Ve(e,"Main-Regular",t,r,n):Ve(e,"AMS-Regular",t,r,n.concat(["amsrm"]))},makeSpan:We,makeSvgSpan:Xe,makeLineSpan:function(e,t,r){var n=We([e],[],t);return n.height=Math.max(r||t.fontMetrics().defaultRuleThickness,t.minRuleThickness),n.style.borderBottomWidth=U(n.height),n.maxFontSize=1,n},makeAnchor:function(e,t,r,n){var i=new Q(e,t,r,n);return Ue(i),i},makeFragment:Ye,wrapFragment:function(e,t){return e instanceof B?We([],[e],t):e},makeVList:function(e,t){for(var r=function(e){if("individualShift"===e.positionType){for(var t=e.children,r=[t[0]],n=-t[0].shift-t[0].elem.depth,i=n,o=1;o<t.length;o++){var a=-t[o].shift-i-t[o].elem.depth,s=a-(t[o-1].elem.height+t[o-1].elem.depth);i+=a,r.push({type:"kern",size:s}),r.push(t[o])}return{children:r,depth:n}}var l;if("top"===e.positionType){for(var c=e.positionData,h=0;h<e.children.length;h++){var u=e.children[h];c-="kern"===u.type?u.size:u.elem.height+u.elem.depth}l=c}else if("bottom"===e.positionType)l=-e.positionData;else{var p=e.children[0];if("elem"!==p.type)throw new Error('First child must have type "elem".');if("shift"===e.positionType)l=-p.elem.depth-e.positionData;else{if("firstBaseline"!==e.positionType)throw new Error("Invalid positionType "+e.positionType+".");l=-p.elem.depth}}return{children:e.children,depth:l}}(e),n=r.children,i=r.depth,o=0,a=0;a<n.length;a++){var s=n[a];if("elem"===s.type){var l=s.elem;o=Math.max(o,l.maxFontSize,l.height)}}o+=2;var c=We(["pstrut"],[]);c.style.height=U(o);for(var h=[],u=i,p=i,m=i,d=0;d<n.length;d++){var f=n[d];if("kern"===f.type)m+=f.size;else{var g=f.elem,v=f.wrapperClasses||[],b=f.wrapperStyle||{},y=We(v,[c,g],void 0,b);y.style.top=U(-o-m-g.depth),f.marginLeft&&(y.style.marginLeft=f.marginLeft),f.marginRight&&(y.style.marginRight=f.marginRight),h.push(y),m+=g.height+g.depth}u=Math.min(u,m),p=Math.max(p,m)}var x,w=We(["vlist"],h);if(w.style.height=U(p),u<0){var k=We([],[]),S=We(["vlist"],[k]);S.style.height=U(-u);var z=We(["vlist-s"],[new te("​")]);x=[We(["vlist-r"],[w,z]),We(["vlist-r"],[S])]}else x=[We(["vlist-r"],[w])];var M=We(["vlist-t"],x);return 2===x.length&&M.classes.push("vlist-t2"),M.height=p,M.depth=-u,M},makeOrd:function(e,t,r){var i=e.mode,o=e.text,a=["mord"],s="math"===i||"text"===i&&t.font,l=s?t.font:t.fontFamily;if(55349===o.charCodeAt(0)){var c=function(e,t){var r=1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536,i="math"===t?0:1;if(119808<=r&&r<120484){var o=Math.floor((r-119808)/26);return[je[o][2],je[o][i]]}if(120782<=r&&r<=120831){var a=Math.floor((r-120782)/10);return[Fe[a][2],Fe[a][i]]}if(120485===r||120486===r)return[je[0][2],je[0][i]];if(120486<r&&r<120782)return["",""];throw new n("Unsupported character: "+e)}(o,i),h=c[0],u=c[1];return Ve(o,h,i,t,a.concat(u))}if(l){var p,m;if("boldsymbol"===l){var d=function(e,t,r,n,i){return"textord"!==i&&$e(e,"Math-BoldItalic",t).metrics?{fontName:"Math-BoldItalic",fontClass:"boldsymbol"}:{fontName:"Main-Bold",fontClass:"mathbf"}}(o,i,0,0,r);p=d.fontName,m=[d.fontClass]}else s?(p=Ke[l].fontName,m=[l]):(p=Ze(l,t.fontWeight,t.fontShape),m=[l,t.fontWeight,t.fontShape]);if($e(o,p,i).metrics)return Ve(o,p,i,t,a.concat(m));if(Te.hasOwnProperty(o)&&"Typewriter"===p.slice(0,10)){for(var f=[],g=0;g<o.length;g++)f.push(Ve(o[g],p,i,t,a.concat(m)));return Ye(f)}}if("mathord"===r)return Ve(o,"Math-Italic",i,t,a.concat(["mathnormal"]));if("textord"===r){var v=ce[i][o]&&ce[i][o].font;if("ams"===v){var b=Ze("amsrm",t.fontWeight,t.fontShape);return Ve(o,b,i,t,a.concat("amsrm",t.fontWeight,t.fontShape))}if("main"!==v&&v){var y=Ze(v,t.fontWeight,t.fontShape);return Ve(o,y,i,t,a.concat(y,t.fontWeight,t.fontShape))}var x=Ze("textrm",t.fontWeight,t.fontShape);return Ve(o,x,i,t,a.concat(t.fontWeight,t.fontShape))}throw new Error("unexpected type: "+r+" in makeOrd")},makeGlue:function(e,t){var r=We(["mspace"],[],t),n=G(e,t);return r.style.marginRight=U(n),r},staticSvg:function(e,t){var r=Qe[e],n=r[0],i=r[1],o=r[2],a=new ne(n),s=new re([a],{width:U(i),height:U(o),style:"width:"+U(i),viewBox:"0 0 "+1e3*i+" "+1e3*o,preserveAspectRatio:"xMinYMin"}),l=Xe(["overlay"],[s],t);return l.height=o,l.style.height=U(o),l.style.width=U(i),l},svgData:Qe,tryCombineChars:function(e){for(var t=0;t<e.length-1;t++){var r=e[t],n=e[t+1];r instanceof te&&n instanceof te&&Ge(r,n)&&(r.text+=n.text,r.height=Math.max(r.height,n.height),r.depth=Math.max(r.depth,n.depth),r.italic=n.italic,e.splice(t+1,1),t--)}return e}},et={number:3,unit:"mu"},tt={number:4,unit:"mu"},rt={number:5,unit:"mu"},nt={mord:{mop:et,mbin:tt,mrel:rt,minner:et},mop:{mord:et,mop:et,mrel:rt,minner:et},mbin:{mord:tt,mop:tt,mopen:tt,minner:tt},mrel:{mord:rt,mop:rt,mopen:rt,minner:rt},mopen:{},mclose:{mop:et,mbin:tt,mrel:rt,minner:et},mpunct:{mord:et,mop:et,mrel:rt,mopen:et,mclose:et,mpunct:et,minner:et},minner:{mord:et,mop:et,mbin:tt,mrel:rt,mopen:et,mpunct:et,minner:et}},it={mord:{mop:et},mop:{mord:et,mop:et},mbin:{},mrel:{},mopen:{},mclose:{mop:et},mpunct:{},minner:{mop:et}},ot={},at={},st={};function lt(e){for(var t=e.type,r=e.names,n=e.props,i=e.handler,o=e.htmlBuilder,a=e.mathmlBuilder,s={type:t,numArgs:n.numArgs,argTypes:n.argTypes,allowedInArgument:!!n.allowedInArgument,allowedInText:!!n.allowedInText,allowedInMath:void 0===n.allowedInMath||n.allowedInMath,numOptionalArgs:n.numOptionalArgs||0,infix:!!n.infix,primitive:!!n.primitive,handler:i},l=0;l<r.length;++l)ot[r[l]]=s;t&&(o&&(at[t]=o),a&&(st[t]=a))}function ct(e){lt({type:e.type,names:[],props:{numArgs:0},handler:function(){throw new Error("Should never be called.")},htmlBuilder:e.htmlBuilder,mathmlBuilder:e.mathmlBuilder})}var ht=function(e){return"ordgroup"===e.type&&1===e.body.length?e.body[0]:e},ut=function(e){return"ordgroup"===e.type?e.body:[e]},pt=Je.makeSpan,mt=["leftmost","mbin","mopen","mrel","mop","mpunct"],dt=["rightmost","mrel","mclose","mpunct"],ft={display:T.DISPLAY,text:T.TEXT,script:T.SCRIPT,scriptscript:T.SCRIPTSCRIPT},gt={mord:"mord",mop:"mop",mbin:"mbin",mrel:"mrel",mopen:"mopen",mclose:"mclose",mpunct:"mpunct",minner:"minner"},vt=function(e,t,r,n){void 0===n&&(n=[null,null]);for(var i=[],o=0;o<e.length;o++){var a=St(e[o],t);if(a instanceof B){var s=a.children;i.push.apply(i,s)}else i.push(a)}if(Je.tryCombineChars(i),!r)return i;var c=t;if(1===e.length){var h=e[0];"sizing"===h.type?c=t.havingSize(h.size):"styling"===h.type&&(c=t.havingStyle(ft[h.style]))}var u=pt([n[0]||"leftmost"],[],t),p=pt([n[1]||"rightmost"],[],t),m="root"===r;return bt(i,(function(e,t){var r=t.classes[0],n=e.classes[0];"mbin"===r&&l(dt,n)?t.classes[0]="mord":"mbin"===n&&l(mt,r)&&(e.classes[0]="mord")}),{node:u},p,m),bt(i,(function(e,t){var r=wt(t),n=wt(e),i=r&&n?e.hasClass("mtight")?it[r][n]:nt[r][n]:null;if(i)return Je.makeGlue(i,c)}),{node:u},p,m),i},bt=function e(t,r,n,i,o){i&&t.push(i);for(var a=0;a<t.length;a++){var s=t[a],l=yt(s);if(l)e(l.children,r,n,null,o);else{var c=!s.hasClass("mspace");if(c){var h=r(s,n.node);h&&(n.insertAfter?n.insertAfter(h):(t.unshift(h),a++))}c?n.node=s:o&&s.hasClass("newline")&&(n.node=pt(["leftmost"])),n.insertAfter=function(e){return function(r){t.splice(e+1,0,r),a++}}(a)}}i&&t.pop()},yt=function(e){return e instanceof B||e instanceof Q||e instanceof K&&e.hasClass("enclosing")?e:null},xt=function e(t,r){var n=yt(t);if(n){var i=n.children;if(i.length){if("right"===r)return e(i[i.length-1],"right");if("left"===r)return e(i[0],"left")}}return t},wt=function(e,t){return e?(t&&(e=xt(e,t)),gt[e.classes[0]]||null):null},kt=function(e,t){var r=["nulldelimiter"].concat(e.baseSizingClasses());return pt(t.concat(r))},St=function(e,t,r){if(!e)return pt();if(at[e.type]){var i=at[e.type](e,t);if(r&&t.size!==r.size){i=pt(t.sizingClasses(r),[i],t);var o=t.sizeMultiplier/r.sizeMultiplier;i.height*=o,i.depth*=o}return i}throw new n("Got group of unknown type: '"+e.type+"'")};function zt(e,t){var r=pt(["base"],e,t),n=pt(["strut"]);return n.style.height=U(r.height+r.depth),r.depth&&(n.style.verticalAlign=U(-r.depth)),r.children.unshift(n),r}function Mt(e,t){var r=null;1===e.length&&"tag"===e[0].type&&(r=e[0].tag,e=e[0].body);var n,i=vt(e,t,"root");2===i.length&&i[1].hasClass("tag")&&(n=i.pop());for(var o,a=[],s=[],l=0;l<i.length;l++)if(s.push(i[l]),i[l].hasClass("mbin")||i[l].hasClass("mrel")||i[l].hasClass("allowbreak")){for(var c=!1;l<i.length-1&&i[l+1].hasClass("mspace")&&!i[l+1].hasClass("newline");)l++,s.push(i[l]),i[l].hasClass("nobreak")&&(c=!0);c||(a.push(zt(s,t)),s=[])}else i[l].hasClass("newline")&&(s.pop(),s.length>0&&(a.push(zt(s,t)),s=[]),a.push(i[l]));s.length>0&&a.push(zt(s,t)),r?((o=zt(vt(r,t,!0))).classes=["tag"],a.push(o)):n&&a.push(n);var h=pt(["katex-html"],a);if(h.setAttribute("aria-hidden","true"),o){var u=o.children[0];u.style.height=U(h.height+h.depth),h.depth&&(u.style.verticalAlign=U(-h.depth))}return h}function Tt(e){return new B(e)}var At=function(){function e(e,t,r){this.type=void 0,this.attributes=void 0,this.children=void 0,this.classes=void 0,this.type=e,this.attributes={},this.children=t||[],this.classes=r||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.getAttribute=function(e){return this.attributes[e]},t.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);this.classes.length>0&&(e.className=W(this.classes));for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+'="',e+=h(this.attributes[t]),e+='"');this.classes.length>0&&(e+=' class ="'+h(W(this.classes))+'"'),e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+"</"+this.type+">"},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),Ct=function(){function e(e){this.text=void 0,this.text=e}var t=e.prototype;return t.toNode=function(){return document.createTextNode(this.text)},t.toMarkup=function(){return h(this.toText())},t.toText=function(){return this.text},e}(),Ot={MathNode:At,TextNode:Ct,SpaceNode:function(){function e(e){this.width=void 0,this.character=void 0,this.width=e,this.character=e>=.05555&&e<=.05556?" ":e>=.1666&&e<=.1667?" ":e>=.2222&&e<=.2223?" ":e>=.2777&&e<=.2778?"  ":e>=-.05556&&e<=-.05555?" ⁣":e>=-.1667&&e<=-.1666?" ⁣":e>=-.2223&&e<=-.2222?" ⁣":e>=-.2778&&e<=-.2777?" ⁣":null}var t=e.prototype;return t.toNode=function(){if(this.character)return document.createTextNode(this.character);var e=document.createElementNS("http://www.w3.org/1998/Math/MathML","mspace");return e.setAttribute("width",U(this.width)),e},t.toMarkup=function(){return this.character?"<mtext>"+this.character+"</mtext>":'<mspace width="'+U(this.width)+'"/>'},t.toText=function(){return this.character?this.character:" "},e}(),newDocumentFragment:Tt},Et=function(e,t,r){return!ce[t][e]||!ce[t][e].replace||55349===e.charCodeAt(0)||Te.hasOwnProperty(e)&&r&&(r.fontFamily&&"tt"===r.fontFamily.slice(4,6)||r.font&&"tt"===r.font.slice(4,6))||(e=ce[t][e].replace),new Ot.TextNode(e)},Bt=function(e){return 1===e.length?e[0]:new Ot.MathNode("mrow",e)},It=function(e,t){if("texttt"===t.fontFamily)return"monospace";if("textsf"===t.fontFamily)return"textit"===t.fontShape&&"textbf"===t.fontWeight?"sans-serif-bold-italic":"textit"===t.fontShape?"sans-serif-italic":"textbf"===t.fontWeight?"bold-sans-serif":"sans-serif";if("textit"===t.fontShape&&"textbf"===t.fontWeight)return"bold-italic";if("textit"===t.fontShape)return"italic";if("textbf"===t.fontWeight)return"bold";var r=t.font;if(!r||"mathnormal"===r)return null;var n=e.mode;if("mathit"===r)return"italic";if("boldsymbol"===r)return"textord"===e.type?"bold":"bold-italic";if("mathbf"===r)return"bold";if("mathbb"===r)return"double-struck";if("mathfrak"===r)return"fraktur";if("mathscr"===r||"mathcal"===r)return"script";if("mathsf"===r)return"sans-serif";if("mathtt"===r)return"monospace";var i=e.text;return l(["\\imath","\\jmath"],i)?null:(ce[n][i]&&ce[n][i].replace&&(i=ce[n][i].replace),_(i,Je.fontMap[r].fontName,n)?Je.fontMap[r].variant:null)},Rt=function(e,t,r){if(1===e.length){var n=_t(e[0],t);return r&&n instanceof At&&"mo"===n.type&&(n.setAttribute("lspace","0em"),n.setAttribute("rspace","0em")),[n]}for(var i,o=[],a=0;a<e.length;a++){var s=_t(e[a],t);if(s instanceof At&&i instanceof At){if("mtext"===s.type&&"mtext"===i.type&&s.getAttribute("mathvariant")===i.getAttribute("mathvariant")){var l;(l=i.children).push.apply(l,s.children);continue}if("mn"===s.type&&"mn"===i.type){var c;(c=i.children).push.apply(c,s.children);continue}if("mi"===s.type&&1===s.children.length&&"mn"===i.type){var h=s.children[0];if(h instanceof Ct&&"."===h.text){var u;(u=i.children).push.apply(u,s.children);continue}}else if("mi"===i.type&&1===i.children.length){var p=i.children[0];if(p instanceof Ct&&"̸"===p.text&&("mo"===s.type||"mi"===s.type||"mn"===s.type)){var m=s.children[0];m instanceof Ct&&m.text.length>0&&(m.text=m.text.slice(0,1)+"̸"+m.text.slice(1),o.pop())}}}o.push(s),i=s}return o},Nt=function(e,t,r){return Bt(Rt(e,t,r))},_t=function(e,t){if(!e)return new Ot.MathNode("mrow");if(st[e.type])return st[e.type](e,t);throw new n("Got group of unknown type: '"+e.type+"'")};function qt(e,t,r,n,i){var o,a=Rt(e,r);o=1===a.length&&a[0]instanceof At&&l(["mrow","mtable"],a[0].type)?a[0]:new Ot.MathNode("mrow",a);var s=new Ot.MathNode("annotation",[new Ot.TextNode(t)]);s.setAttribute("encoding","application/x-tex");var c=new Ot.MathNode("semantics",[o,s]),h=new Ot.MathNode("math",[c]);return h.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML"),n&&h.setAttribute("display","block"),Je.makeSpan([i?"katex":"katex-mathml"],[h])}var Pt=function(e){return new j({style:e.displayMode?T.DISPLAY:T.TEXT,maxSize:e.maxSize,minRuleThickness:e.minRuleThickness})},Dt=function(e,t){if(t.displayMode){var r=["katex-display"];t.leqno&&r.push("leqno"),t.fleqn&&r.push("fleqn"),e=Je.makeSpan(r,[e])}return e},Lt={widehat:"^",widecheck:"ˇ",widetilde:"~",utilde:"~",overleftarrow:"←",underleftarrow:"←",xleftarrow:"←",overrightarrow:"→",underrightarrow:"→",xrightarrow:"→",underbrace:"⏟",overbrace:"⏞",overgroup:"⏠",undergroup:"⏡",overleftrightarrow:"↔",underleftrightarrow:"↔",xleftrightarrow:"↔",Overrightarrow:"⇒",xRightarrow:"⇒",overleftharpoon:"↼",xleftharpoonup:"↼",overrightharpoon:"⇀",xrightharpoonup:"⇀",xLeftarrow:"⇐",xLeftrightarrow:"⇔",xhookleftarrow:"↩",xhookrightarrow:"↪",xmapsto:"↦",xrightharpoondown:"⇁",xleftharpoondown:"↽",xrightleftharpoons:"⇌",xleftrightharpoons:"⇋",xtwoheadleftarrow:"↞",xtwoheadrightarrow:"↠",xlongequal:"=",xtofrom:"⇄",xrightleftarrows:"⇄",xrightequilibrium:"⇌",xleftequilibrium:"⇋","\\cdrightarrow":"→","\\cdleftarrow":"←","\\cdlongequal":"="},Ht={overrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],"\\cdrightarrow":[["rightarrow"],3,522,"xMaxYMin"],xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],"\\cdleftarrow":[["leftarrow"],3,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],.888,522,"xMaxYMin"],xlongequal:[["longequal"],.888,334,"xMinYMin"],"\\cdlongequal":[["longequal"],3,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],overgroup:[["leftgroup","rightgroup"],.888,342],undergroup:[["leftgroupunder","rightgroupunder"],.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,901],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]},jt=function(e){var t=new Ot.MathNode("mo",[new Ot.TextNode(Lt[e.replace(/^\\/,"")])]);return t.setAttribute("stretchy","true"),t},Ft=function(e,t){var r=function(){var r=4e5,n=e.label.slice(1);if(l(["widehat","widecheck","widetilde","utilde"],n)){var i,o,a,s="ordgroup"===(d=e.base).type?d.body.length:1;if(s>5)"widehat"===n||"widecheck"===n?(i=420,r=2364,a=.42,o=n+"4"):(i=312,r=2340,a=.34,o="tilde4");else{var c=[1,1,2,2,3,3][s];"widehat"===n||"widecheck"===n?(r=[0,1062,2364,2364,2364][c],i=[0,239,300,360,420][c],a=[0,.24,.3,.3,.36,.42][c],o=n+c):(r=[0,600,1033,2339,2340][c],i=[0,260,286,306,312][c],a=[0,.26,.286,.3,.306,.34][c],o="tilde"+c)}var h=new ne(o),u=new re([h],{width:"100%",height:U(a),viewBox:"0 0 "+r+" "+i,preserveAspectRatio:"none"});return{span:Je.makeSvgSpan([],[u],t),minWidth:0,height:a}}var p,m,d,f=[],g=Ht[n],v=g[0],b=g[1],y=g[2],x=y/1e3,w=v.length;if(1===w)p=["hide-tail"],m=[g[3]];else if(2===w)p=["halfarrow-left","halfarrow-right"],m=["xMinYMin","xMaxYMin"];else{if(3!==w)throw new Error("Correct katexImagesData or update code here to support\n                    "+w+" children.");p=["brace-left","brace-center","brace-right"],m=["xMinYMin","xMidYMin","xMaxYMin"]}for(var k=0;k<w;k++){var S=new ne(v[k]),z=new re([S],{width:"400em",height:U(x),viewBox:"0 0 "+r+" "+y,preserveAspectRatio:m[k]+" slice"}),M=Je.makeSvgSpan([p[k]],[z],t);if(1===w)return{span:M,minWidth:b,height:x};M.style.height=U(x),f.push(M)}return{span:Je.makeSpan(["stretchy"],f,t),minWidth:b,height:x}}(),n=r.span,i=r.minWidth,o=r.height;return n.height=o,n.style.height=U(o),i>0&&(n.style.minWidth=U(i)),n};function $t(e,t){if(!e||e.type!==t)throw new Error("Expected node of type "+t+", but got "+(e?"node of type "+e.type:String(e)));return e}function Vt(e){var t=Gt(e);if(!t)throw new Error("Expected node of symbol group type, but got "+(e?"node of type "+e.type:String(e)));return t}function Gt(e){return e&&("atom"===e.type||se.hasOwnProperty(e.type))?e:null}var Ut=function(e,t){var r,n,i;e&&"supsub"===e.type?(r=(n=$t(e.base,"accent")).base,e.base=r,i=function(e){if(e instanceof K)return e;throw new Error("Expected span<HtmlDomNode> but got "+String(e)+".")}(St(e,t)),e.base=n):r=(n=$t(e,"accent")).base;var o=St(r,t.havingCrampedStyle()),a=0;if(n.isShifty&&m(r)){var s=p(r);a=oe(St(s,t.havingCrampedStyle())).skew}var l,c="\\c"===n.label,h=c?o.height+o.depth:Math.min(o.height,t.fontMetrics().xHeight);if(n.isStretchy)l=Ft(n,t),l=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:o},{type:"elem",elem:l,wrapperClasses:["svg-align"],wrapperStyle:a>0?{width:"calc(100% - "+U(2*a)+")",marginLeft:U(2*a)}:void 0}]},t);else{var u,d;"\\vec"===n.label?(u=Je.staticSvg("vec",t),d=Je.svgData.vec[1]):((u=oe(u=Je.makeOrd({mode:n.mode,text:n.label},t,"textord"))).italic=0,d=u.width,c&&(h+=u.depth)),l=Je.makeSpan(["accent-body"],[u]);var f="\\textcircled"===n.label;f&&(l.classes.push("accent-full"),h=o.height);var g=a;f||(g-=d/2),l.style.left=U(g),"\\textcircled"===n.label&&(l.style.top=".2em"),l=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:o},{type:"kern",size:-h},{type:"elem",elem:l}]},t)}var v=Je.makeSpan(["mord","accent"],[l],t);return i?(i.children[0]=v,i.height=Math.max(v.height,i.height),i.classes[0]="mord",i):v},Wt=function(e,t){var r=e.isStretchy?jt(e.label):new Ot.MathNode("mo",[Et(e.label,e.mode)]),n=new Ot.MathNode("mover",[_t(e.base,t),r]);return n.setAttribute("accent","true"),n},Xt=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map((function(e){return"\\"+e})).join("|"));lt({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widecheck","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function(e,t){var r=ht(t[0]),n=!Xt.test(e.funcName),i=!n||"\\widehat"===e.funcName||"\\widetilde"===e.funcName||"\\widecheck"===e.funcName;return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:n,isShifty:i,base:r}},htmlBuilder:Ut,mathmlBuilder:Wt}),lt({type:"accent",names:["\\'","\\`","\\^","\\~","\\=","\\u","\\.",'\\"',"\\c","\\r","\\H","\\v","\\textcircled"],props:{numArgs:1,allowedInText:!0,allowedInMath:!0,argTypes:["primitive"]},handler:function(e,t){var r=t[0],n=e.parser.mode;return"math"===n&&(e.parser.settings.reportNonstrict("mathVsTextAccents","LaTeX's accent "+e.funcName+" works only in text mode"),n="text"),{type:"accent",mode:n,label:e.funcName,isStretchy:!1,isShifty:!0,base:r}},htmlBuilder:Ut,mathmlBuilder:Wt}),lt({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\utilde"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"accentUnder",mode:r.mode,label:n,base:i}},htmlBuilder:function(e,t){var r=St(e.base,t),n=Ft(e,t),i="\\utilde"===e.label?.12:0,o=Je.makeVList({positionType:"top",positionData:r.height,children:[{type:"elem",elem:n,wrapperClasses:["svg-align"]},{type:"kern",size:i},{type:"elem",elem:r}]},t);return Je.makeSpan(["mord","accentunder"],[o],t)},mathmlBuilder:function(e,t){var r=jt(e.label),n=new Ot.MathNode("munder",[_t(e.base,t),r]);return n.setAttribute("accentunder","true"),n}});var Yt=function(e){var t=new Ot.MathNode("mpadded",e?[e]:[]);return t.setAttribute("width","+0.6em"),t.setAttribute("lspace","0.3em"),t};lt({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom","\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium","\\\\cdrightarrow","\\\\cdleftarrow","\\\\cdlongequal"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,i=e.funcName;return{type:"xArrow",mode:n.mode,label:i,body:t[0],below:r[0]}},htmlBuilder:function(e,t){var r,n=t.style,i=t.havingStyle(n.sup()),o=Je.wrapFragment(St(e.body,i,t),t),a="\\x"===e.label.slice(0,2)?"x":"cd";o.classes.push(a+"-arrow-pad"),e.below&&(i=t.havingStyle(n.sub()),(r=Je.wrapFragment(St(e.below,i,t),t)).classes.push(a+"-arrow-pad"));var s,l=Ft(e,t),c=-t.fontMetrics().axisHeight+.5*l.height,h=-t.fontMetrics().axisHeight-.5*l.height-.111;if((o.depth>.25||"\\xleftequilibrium"===e.label)&&(h-=o.depth),r){var u=-t.fontMetrics().axisHeight+r.height+.5*l.height+.111;s=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:h},{type:"elem",elem:l,shift:c},{type:"elem",elem:r,shift:u}]},t)}else s=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:h},{type:"elem",elem:l,shift:c}]},t);return s.children[0].children[0].children[1].classes.push("svg-align"),Je.makeSpan(["mrel","x-arrow"],[s],t)},mathmlBuilder:function(e,t){var r,n=jt(e.label);if(n.setAttribute("minsize","x"===e.label.charAt(0)?"1.75em":"3.0em"),e.body){var i=Yt(_t(e.body,t));if(e.below){var o=Yt(_t(e.below,t));r=new Ot.MathNode("munderover",[n,o,i])}else r=new Ot.MathNode("mover",[n,i])}else if(e.below){var a=Yt(_t(e.below,t));r=new Ot.MathNode("munder",[n,a])}else r=Yt(),r=new Ot.MathNode("mover",[n,r]);return r}});var Zt=Je.makeSpan;function Kt(e,t){var r=vt(e.body,t,!0);return Zt([e.mclass],r,t)}function Qt(e,t){var r,n=Rt(e.body,t);return"minner"===e.mclass?r=new Ot.MathNode("mpadded",n):"mord"===e.mclass?e.isCharacterBox?(r=n[0]).type="mi":r=new Ot.MathNode("mi",n):(e.isCharacterBox?(r=n[0]).type="mo":r=new Ot.MathNode("mo",n),"mbin"===e.mclass?(r.attributes.lspace="0.22em",r.attributes.rspace="0.22em"):"mpunct"===e.mclass?(r.attributes.lspace="0em",r.attributes.rspace="0.17em"):"mopen"===e.mclass||"mclose"===e.mclass?(r.attributes.lspace="0em",r.attributes.rspace="0em"):"minner"===e.mclass&&(r.attributes.lspace="0.0556em",r.attributes.width="+0.1111em")),r}lt({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"mclass",mode:r.mode,mclass:"m"+n.slice(5),body:ut(i),isCharacterBox:m(i)}},htmlBuilder:Kt,mathmlBuilder:Qt});var Jt=function(e){var t="ordgroup"===e.type&&e.body.length?e.body[0]:e;return"atom"!==t.type||"bin"!==t.family&&"rel"!==t.family?"mord":"m"+t.family};lt({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler:function(e,t){return{type:"mclass",mode:e.parser.mode,mclass:Jt(t[0]),body:ut(t[1]),isCharacterBox:m(t[1])}}}),lt({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler:function(e,t){var r,n=e.parser,i=e.funcName,o=t[1],a=t[0];r="\\stackrel"!==i?Jt(o):"mrel";var s={type:"op",mode:o.mode,limits:!0,alwaysHandleSupSub:!0,parentIsSupSub:!1,symbol:!1,suppressBaseShift:"\\stackrel"!==i,body:ut(o)},l={type:"supsub",mode:a.mode,base:s,sup:"\\underset"===i?null:a,sub:"\\underset"===i?a:null};return{type:"mclass",mode:n.mode,mclass:r,body:[l],isCharacterBox:m(l)}},htmlBuilder:Kt,mathmlBuilder:Qt}),lt({type:"pmb",names:["\\pmb"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){return{type:"pmb",mode:e.parser.mode,mclass:Jt(t[0]),body:ut(t[0])}},htmlBuilder:function(e,t){var r=vt(e.body,t,!0),n=Je.makeSpan([e.mclass],r,t);return n.style.textShadow="0.02em 0.01em 0.04px",n},mathmlBuilder:function(e,t){var r=Rt(e.body,t),n=new Ot.MathNode("mstyle",r);return n.setAttribute("style","text-shadow: 0.02em 0.01em 0.04px"),n}});var er={">":"\\\\cdrightarrow","<":"\\\\cdleftarrow","=":"\\\\cdlongequal",A:"\\uparrow",V:"\\downarrow","|":"\\Vert",".":"no arrow"},tr=function(e){return"textord"===e.type&&"@"===e.text};function rr(e,t,r){var n=er[e];switch(n){case"\\\\cdrightarrow":case"\\\\cdleftarrow":return r.callFunction(n,[t[0]],[t[1]]);case"\\uparrow":case"\\downarrow":var i={type:"atom",text:n,mode:"math",family:"rel"},o={type:"ordgroup",mode:"math",body:[r.callFunction("\\\\cdleft",[t[0]],[]),r.callFunction("\\Big",[i],[]),r.callFunction("\\\\cdright",[t[1]],[])]};return r.callFunction("\\\\cdparent",[o],[]);case"\\\\cdlongequal":return r.callFunction("\\\\cdlongequal",[],[]);case"\\Vert":return r.callFunction("\\Big",[{type:"textord",text:"\\Vert",mode:"math"}],[]);default:return{type:"textord",text:" ",mode:"math"}}}lt({type:"cdlabel",names:["\\\\cdleft","\\\\cdright"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"cdlabel",mode:r.mode,side:n.slice(4),label:t[0]}},htmlBuilder:function(e,t){var r=t.havingStyle(t.style.sup()),n=Je.wrapFragment(St(e.label,r,t),t);return n.classes.push("cd-label-"+e.side),n.style.bottom=U(.8-n.depth),n.height=0,n.depth=0,n},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mrow",[_t(e.label,t)]);return(r=new Ot.MathNode("mpadded",[r])).setAttribute("width","0"),"left"===e.side&&r.setAttribute("lspace","-1width"),r.setAttribute("voffset","0.7em"),(r=new Ot.MathNode("mstyle",[r])).setAttribute("displaystyle","false"),r.setAttribute("scriptlevel","1"),r}}),lt({type:"cdlabelparent",names:["\\\\cdparent"],props:{numArgs:1},handler:function(e,t){return{type:"cdlabelparent",mode:e.parser.mode,fragment:t[0]}},htmlBuilder:function(e,t){var r=Je.wrapFragment(St(e.fragment,t),t);return r.classes.push("cd-vert-arrow"),r},mathmlBuilder:function(e,t){return new Ot.MathNode("mrow",[_t(e.fragment,t)])}}),lt({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){for(var r=e.parser,i=$t(t[0],"ordgroup").body,o="",a=0;a<i.length;a++)o+=$t(i[a],"textord").text;var s,l=parseInt(o);if(isNaN(l))throw new n("\\@char has non-numeric argument "+o);if(l<0||l>=1114111)throw new n("\\@char with invalid code point "+o);return l<=65535?s=String.fromCharCode(l):(l-=65536,s=String.fromCharCode(55296+(l>>10),56320+(1023&l))),{type:"textord",mode:r.mode,text:s}}});var nr=function(e,t){var r=vt(e.body,t.withColor(e.color),!1);return Je.makeFragment(r)},ir=function(e,t){var r=Rt(e.body,t.withColor(e.color)),n=new Ot.MathNode("mstyle",r);return n.setAttribute("mathcolor",e.color),n};lt({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:!0,argTypes:["color","original"]},handler:function(e,t){var r=e.parser,n=$t(t[0],"color-token").color,i=t[1];return{type:"color",mode:r.mode,color:n,body:ut(i)}},htmlBuilder:nr,mathmlBuilder:ir}),lt({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:!0,argTypes:["color"]},handler:function(e,t){var r=e.parser,n=e.breakOnTokenText,i=$t(t[0],"color-token").color;r.gullet.macros.set("\\current@color",i);var o=r.parseExpression(!0,n);return{type:"color",mode:r.mode,color:i,body:o}},htmlBuilder:nr,mathmlBuilder:ir}),lt({type:"cr",names:["\\\\"],props:{numArgs:0,numOptionalArgs:0,allowedInText:!0},handler:function(e,t,r){var n=e.parser,i="["===n.gullet.future().text?n.parseSizeGroup(!0):null,o=!n.settings.displayMode||!n.settings.useStrictBehavior("newLineInDisplayMode","In LaTeX, \\\\ or \\newline does nothing in display mode");return{type:"cr",mode:n.mode,newLine:o,size:i&&$t(i,"size").value}},htmlBuilder:function(e,t){var r=Je.makeSpan(["mspace"],[],t);return e.newLine&&(r.classes.push("newline"),e.size&&(r.style.marginTop=U(G(e.size,t)))),r},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mspace");return e.newLine&&(r.setAttribute("linebreak","newline"),e.size&&r.setAttribute("height",U(G(e.size,t)))),r}});var or={"\\global":"\\global","\\long":"\\\\globallong","\\\\globallong":"\\\\globallong","\\def":"\\gdef","\\gdef":"\\gdef","\\edef":"\\xdef","\\xdef":"\\xdef","\\let":"\\\\globallet","\\futurelet":"\\\\globalfuture"},ar=function(e){var t=e.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(t))throw new n("Expected a control sequence",e);return t},sr=function(e,t,r,n){var i=e.gullet.macros.get(r.text);null==i&&(r.noexpand=!0,i={tokens:[r],numArgs:0,unexpandable:!e.gullet.isExpandable(r.text)}),e.gullet.macros.set(t,i,n)};lt({type:"internal",names:["\\global","\\long","\\\\globallong"],props:{numArgs:0,allowedInText:!0},handler:function(e){var t=e.parser,r=e.funcName;t.consumeSpaces();var i=t.fetch();if(or[i.text])return"\\global"!==r&&"\\\\globallong"!==r||(i.text=or[i.text]),$t(t.parseFunction(),"internal");throw new n("Invalid token after macro prefix",i)}}),lt({type:"internal",names:["\\def","\\gdef","\\edef","\\xdef"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,i=t.gullet.popToken(),o=i.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(o))throw new n("Expected a control sequence",i);for(var a,s=0,l=[[]];"{"!==t.gullet.future().text;)if("#"===(i=t.gullet.popToken()).text){if("{"===t.gullet.future().text){a=t.gullet.future(),l[s].push("{");break}if(i=t.gullet.popToken(),!/^[1-9]$/.test(i.text))throw new n('Invalid argument number "'+i.text+'"');if(parseInt(i.text)!==s+1)throw new n('Argument number "'+i.text+'" out of order');s++,l.push([])}else{if("EOF"===i.text)throw new n("Expected a macro definition");l[s].push(i.text)}var c=t.gullet.consumeArg().tokens;return a&&c.unshift(a),"\\edef"!==r&&"\\xdef"!==r||(c=t.gullet.expandTokens(c)).reverse(),t.gullet.macros.set(o,{tokens:c,numArgs:s,delimiters:l},r===or[r]),{type:"internal",mode:t.mode}}}),lt({type:"internal",names:["\\let","\\\\globallet"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=ar(t.gullet.popToken());t.gullet.consumeSpaces();var i=function(e){var t=e.gullet.popToken();return"="===t.text&&" "===(t=e.gullet.popToken()).text&&(t=e.gullet.popToken()),t}(t);return sr(t,n,i,"\\\\globallet"===r),{type:"internal",mode:t.mode}}}),lt({type:"internal",names:["\\futurelet","\\\\globalfuture"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=ar(t.gullet.popToken()),i=t.gullet.popToken(),o=t.gullet.popToken();return sr(t,n,o,"\\\\globalfuture"===r),t.gullet.pushToken(o),t.gullet.pushToken(i),{type:"internal",mode:t.mode}}});var lr=function(e,t,r){var n=_(ce.math[e]&&ce.math[e].replace||e,t,r);if(!n)throw new Error("Unsupported symbol "+e+" and font size "+t+".");return n},cr=function(e,t,r,n){var i=r.havingBaseStyle(t),o=Je.makeSpan(n.concat(i.sizingClasses(r)),[e],r),a=i.sizeMultiplier/r.sizeMultiplier;return o.height*=a,o.depth*=a,o.maxFontSize=i.sizeMultiplier,o},hr=function(e,t,r){var n=t.havingBaseStyle(r),i=(1-t.sizeMultiplier/n.sizeMultiplier)*t.fontMetrics().axisHeight;e.classes.push("delimcenter"),e.style.top=U(i),e.height-=i,e.depth+=i},ur=function(e,t,r,n,i,o){var a=function(e,t,r,n){return Je.makeSymbol(e,"Size"+t+"-Regular",r,n)}(e,t,i,n),s=cr(Je.makeSpan(["delimsizing","size"+t],[a],n),T.TEXT,n,o);return r&&hr(s,n,T.TEXT),s},pr=function(e,t,r){return{type:"elem",elem:Je.makeSpan(["delimsizinginner","Size1-Regular"===t?"delim-size1":"delim-size4"],[Je.makeSpan([],[Je.makeSymbol(e,t,r)])])}},mr=function(e,t,r){var n=I["Size4-Regular"][e.charCodeAt(0)]?I["Size4-Regular"][e.charCodeAt(0)][4]:I["Size1-Regular"][e.charCodeAt(0)][4],i=new ne("inner",function(e,t){switch(e){case"⎜":return"M291 0 H417 V"+t+" H291z M291 0 H417 V"+t+" H291z";case"∣":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145z";case"∥":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145zM367 0 H410 V"+t+" H367z M367 0 H410 V"+t+" H367z";case"⎟":return"M457 0 H583 V"+t+" H457z M457 0 H583 V"+t+" H457z";case"⎢":return"M319 0 H403 V"+t+" H319z M319 0 H403 V"+t+" H319z";case"⎥":return"M263 0 H347 V"+t+" H263z M263 0 H347 V"+t+" H263z";case"⎪":return"M384 0 H504 V"+t+" H384z M384 0 H504 V"+t+" H384z";case"⏐":return"M312 0 H355 V"+t+" H312z M312 0 H355 V"+t+" H312z";case"‖":return"M257 0 H300 V"+t+" H257z M257 0 H300 V"+t+" H257zM478 0 H521 V"+t+" H478z M478 0 H521 V"+t+" H478z";default:return""}}(e,Math.round(1e3*t))),o=new re([i],{width:U(n),height:U(t),style:"width:"+U(n),viewBox:"0 0 "+1e3*n+" "+Math.round(1e3*t),preserveAspectRatio:"xMinYMin"}),a=Je.makeSvgSpan([],[o],r);return a.height=t,a.style.height=U(t),a.style.width=U(n),{type:"elem",elem:a}},dr={type:"kern",size:-.008},fr=["|","\\lvert","\\rvert","\\vert"],gr=["\\|","\\lVert","\\rVert","\\Vert"],vr=function(e,t,r,n,i,o){var a,s,c,h,u="",p=0;a=c=h=e,s=null;var m="Size1-Regular";"\\uparrow"===e?c=h="⏐":"\\Uparrow"===e?c=h="‖":"\\downarrow"===e?a=c="⏐":"\\Downarrow"===e?a=c="‖":"\\updownarrow"===e?(a="\\uparrow",c="⏐",h="\\downarrow"):"\\Updownarrow"===e?(a="\\Uparrow",c="‖",h="\\Downarrow"):l(fr,e)?(c="∣",u="vert",p=333):l(gr,e)?(c="∥",u="doublevert",p=556):"["===e||"\\lbrack"===e?(a="⎡",c="⎢",h="⎣",m="Size4-Regular",u="lbrack",p=667):"]"===e||"\\rbrack"===e?(a="⎤",c="⎥",h="⎦",m="Size4-Regular",u="rbrack",p=667):"\\lfloor"===e||"⌊"===e?(c=a="⎢",h="⎣",m="Size4-Regular",u="lfloor",p=667):"\\lceil"===e||"⌈"===e?(a="⎡",c=h="⎢",m="Size4-Regular",u="lceil",p=667):"\\rfloor"===e||"⌋"===e?(c=a="⎥",h="⎦",m="Size4-Regular",u="rfloor",p=667):"\\rceil"===e||"⌉"===e?(a="⎤",c=h="⎥",m="Size4-Regular",u="rceil",p=667):"("===e||"\\lparen"===e?(a="⎛",c="⎜",h="⎝",m="Size4-Regular",u="lparen",p=875):")"===e||"\\rparen"===e?(a="⎞",c="⎟",h="⎠",m="Size4-Regular",u="rparen",p=875):"\\{"===e||"\\lbrace"===e?(a="⎧",s="⎨",h="⎩",c="⎪",m="Size4-Regular"):"\\}"===e||"\\rbrace"===e?(a="⎫",s="⎬",h="⎭",c="⎪",m="Size4-Regular"):"\\lgroup"===e||"⟮"===e?(a="⎧",h="⎩",c="⎪",m="Size4-Regular"):"\\rgroup"===e||"⟯"===e?(a="⎫",h="⎭",c="⎪",m="Size4-Regular"):"\\lmoustache"===e||"⎰"===e?(a="⎧",h="⎭",c="⎪",m="Size4-Regular"):"\\rmoustache"!==e&&"⎱"!==e||(a="⎫",h="⎩",c="⎪",m="Size4-Regular");var d=lr(a,m,i),f=d.height+d.depth,g=lr(c,m,i),v=g.height+g.depth,b=lr(h,m,i),y=b.height+b.depth,x=0,w=1;if(null!==s){var k=lr(s,m,i);x=k.height+k.depth,w=2}var S=f+y+x,z=S+Math.max(0,Math.ceil((t-S)/(w*v)))*w*v,M=n.fontMetrics().axisHeight;r&&(M*=n.sizeMultiplier);var A=z/2-M,C=[];if(u.length>0){var O=z-f-y,E=Math.round(1e3*z),B=function(e,t){switch(e){case"lbrack":return"M403 1759 V84 H666 V0 H319 V1759 v"+t+" v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v"+t+" v1759 h84z";case"rbrack":return"M347 1759 V0 H0 V84 H263 V1759 v"+t+" v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v"+t+" v1759 h84z";case"vert":return"M145 15 v585 v"+t+" v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v"+-t+" v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v"+t+" v585 h43z";case"doublevert":return"M145 15 v585 v"+t+" v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v"+-t+" v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v"+t+" v585 h43z\nM367 15 v585 v"+t+" v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v"+-t+" v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v"+t+" v585 h43z";case"lfloor":return"M319 602 V0 H403 V602 v"+t+" v1715 h263 v84 H319z\nMM319 602 V0 H403 V602 v"+t+" v1715 H319z";case"rfloor":return"M319 602 V0 H403 V602 v"+t+" v1799 H0 v-84 H319z\nMM319 602 V0 H403 V602 v"+t+" v1715 H319z";case"lceil":return"M403 1759 V84 H666 V0 H319 V1759 v"+t+" v602 h84z\nM403 1759 V0 H319 V1759 v"+t+" v602 h84z";case"rceil":return"M347 1759 V0 H0 V84 H263 V1759 v"+t+" v602 h84z\nM347 1759 V0 h-84 V1759 v"+t+" v602 h84z";case"lparen":return"M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\n-36,557 l0,"+(t+84)+"c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\nl0,-"+(t+92)+"c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z";case"rparen":return"M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,"+(t+9)+"\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\nl0,-"+(t+144)+"c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z";default:throw new Error("Unknown stretchy delimiter.")}}(u,Math.round(1e3*O)),I=new ne(u,B),R=(p/1e3).toFixed(3)+"em",N=(E/1e3).toFixed(3)+"em",_=new re([I],{width:R,height:N,viewBox:"0 0 "+p+" "+E}),q=Je.makeSvgSpan([],[_],n);q.height=E/1e3,q.style.width=R,q.style.height=N,C.push({type:"elem",elem:q})}else{if(C.push(pr(h,m,i)),C.push(dr),null===s){var P=z-f-y+.016;C.push(mr(c,P,n))}else{var D=(z-f-y-x)/2+.016;C.push(mr(c,D,n)),C.push(dr),C.push(pr(s,m,i)),C.push(dr),C.push(mr(c,D,n))}C.push(dr),C.push(pr(a,m,i))}var L=n.havingBaseStyle(T.TEXT),H=Je.makeVList({positionType:"bottom",positionData:A,children:C},L);return cr(Je.makeSpan(["delimsizing","mult"],[H],L),T.TEXT,n,o)},br=.08,yr=function(e,t,r,n,i){var o=function(e,t,r){t*=1e3;var n="";switch(e){case"sqrtMain":n=function(e,t){return"M95,"+(622+e+80)+"\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl"+e/2.075+" -"+e+"\nc5.3,-9.3,12,-14,20,-14\nH400000v"+(40+e)+"H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM"+(834+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize1":n=function(e,t){return"M263,"+(601+e+80)+"c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl"+e/2.084+" -"+e+"\nc4.7,-7.3,11,-11,19,-11\nH40000v"+(40+e)+"H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM"+(1001+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize2":n=function(e,t){return"M983 "+(10+e+80)+"\nl"+e/3.13+" -"+e+"\nc4,-6.7,10,-10,18,-10 H400000v"+(40+e)+"\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM"+(1001+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize3":n=function(e,t){return"M424,"+(2398+e+80)+"\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl"+e/4.223+" -"+e+"c4,-6.7,10,-10,18,-10 H400000\nv"+(40+e)+"H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M"+(1001+e)+" 80\nh400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize4":n=function(e,t){return"M473,"+(2713+e+80)+"\nc339.3,-1799.3,509.3,-2700,510,-2702 l"+e/5.298+" -"+e+"\nc3.3,-7.3,9.3,-11,18,-11 H400000v"+(40+e)+"H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM"+(1001+e)+" 80h400000v"+(40+e)+"H1017.7z"}(t);break;case"sqrtTall":n=function(e,t,r){return"M702 "+(e+80)+"H400000"+(40+e)+"\nH742v"+(r-54-80-e)+"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 80H400000v"+(40+e)+"H742z"}(t,0,r)}return n}(e,n,r),a=new ne(e,o),s=new re([a],{width:"400em",height:U(t),viewBox:"0 0 400000 "+r,preserveAspectRatio:"xMinYMin slice"});return Je.makeSvgSpan(["hide-tail"],[s],i)},xr=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","\\surd"],wr=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱"],kr=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"],Sr=[0,1.2,1.8,2.4,3],zr=[{type:"small",style:T.SCRIPTSCRIPT},{type:"small",style:T.SCRIPT},{type:"small",style:T.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}],Mr=[{type:"small",style:T.SCRIPTSCRIPT},{type:"small",style:T.SCRIPT},{type:"small",style:T.TEXT},{type:"stack"}],Tr=[{type:"small",style:T.SCRIPTSCRIPT},{type:"small",style:T.SCRIPT},{type:"small",style:T.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}],Ar=function(e){if("small"===e.type)return"Main-Regular";if("large"===e.type)return"Size"+e.size+"-Regular";if("stack"===e.type)return"Size4-Regular";throw new Error("Add support for delim type '"+e.type+"' here.")},Cr=function(e,t,r,n){for(var i=Math.min(2,3-n.style.size);i<r.length&&"stack"!==r[i].type;i++){var o=lr(e,Ar(r[i]),"math"),a=o.height+o.depth;if("small"===r[i].type&&(a*=n.havingBaseStyle(r[i].style).sizeMultiplier),a>t)return r[i]}return r[r.length-1]},Or=function(e,t,r,n,i,o){var a;"<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),a=l(kr,e)?zr:l(xr,e)?Tr:Mr;var s=Cr(e,t,a,n);return"small"===s.type?function(e,t,r,n,i,o){var a=Je.makeSymbol(e,"Main-Regular",i,n),s=cr(a,t,n,o);return r&&hr(s,n,t),s}(e,s.style,r,n,i,o):"large"===s.type?ur(e,s.size,r,n,i,o):vr(e,t,r,n,i,o)},Er={sqrtImage:function(e,t){var r,n,i=t.havingBaseSizing(),o=Cr("\\surd",e*i.sizeMultiplier,Tr,i),a=i.sizeMultiplier,s=Math.max(0,t.minRuleThickness-t.fontMetrics().sqrtRuleThickness),l=0,c=0,h=0;return"small"===o.type?(e<1?a=1:e<1.4&&(a=.7),c=(1+s)/a,(r=yr("sqrtMain",l=(1+s+br)/a,h=1e3+1e3*s+80,s,t)).style.minWidth="0.853em",n=.833/a):"large"===o.type?(h=1080*Sr[o.size],c=(Sr[o.size]+s)/a,l=(Sr[o.size]+s+br)/a,(r=yr("sqrtSize"+o.size,l,h,s,t)).style.minWidth="1.02em",n=1/a):(l=e+s+br,c=e+s,h=Math.floor(1e3*e+s)+80,(r=yr("sqrtTall",l,h,s,t)).style.minWidth="0.742em",n=1.056),r.height=c,r.style.height=U(l),{span:r,advanceWidth:n,ruleWidth:(t.fontMetrics().sqrtRuleThickness+s)*a}},sizedDelim:function(e,t,r,i,o){if("<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),l(xr,e)||l(kr,e))return ur(e,t,!1,r,i,o);if(l(wr,e))return vr(e,Sr[t],!1,r,i,o);throw new n("Illegal delimiter: '"+e+"'")},sizeToMaxHeight:Sr,customSizedDelim:Or,leftRightDelim:function(e,t,r,n,i,o){var a=n.fontMetrics().axisHeight*n.sizeMultiplier,s=5/n.fontMetrics().ptPerEm,l=Math.max(t-a,r+a),c=Math.max(l/500*901,2*l-s);return Or(e,c,!0,n,i,o)}},Br={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}},Ir=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","<",">","\\langle","⟨","\\rangle","⟩","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];function Rr(e,t){var r=Gt(e);if(r&&l(Ir,r.text))return r;throw new n(r?"Invalid delimiter '"+r.text+"' after '"+t.funcName+"'":"Invalid delimiter type '"+e.type+"'",e)}function Nr(e){if(!e.body)throw new Error("Bug: The leftright ParseNode wasn't fully parsed.")}lt({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1,argTypes:["primitive"]},handler:function(e,t){var r=Rr(t[0],e);return{type:"delimsizing",mode:e.parser.mode,size:Br[e.funcName].size,mclass:Br[e.funcName].mclass,delim:r.text}},htmlBuilder:function(e,t){return"."===e.delim?Je.makeSpan([e.mclass]):Er.sizedDelim(e.delim,e.size,t,e.mode,[e.mclass])},mathmlBuilder:function(e){var t=[];"."!==e.delim&&t.push(Et(e.delim,e.mode));var r=new Ot.MathNode("mo",t);"mopen"===e.mclass||"mclose"===e.mclass?r.setAttribute("fence","true"):r.setAttribute("fence","false"),r.setAttribute("stretchy","true");var n=U(Er.sizeToMaxHeight[e.size]);return r.setAttribute("minsize",n),r.setAttribute("maxsize",n),r}}),lt({type:"leftright-right",names:["\\right"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser.gullet.macros.get("\\current@color");if(r&&"string"!=typeof r)throw new n("\\current@color set to non-string in \\right");return{type:"leftright-right",mode:e.parser.mode,delim:Rr(t[0],e).text,color:r}}}),lt({type:"leftright",names:["\\left"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=Rr(t[0],e),n=e.parser;++n.leftrightDepth;var i=n.parseExpression(!1);--n.leftrightDepth,n.expect("\\right",!1);var o=$t(n.parseFunction(),"leftright-right");return{type:"leftright",mode:n.mode,body:i,left:r.text,right:o.delim,rightColor:o.color}},htmlBuilder:function(e,t){Nr(e);for(var r,n,i=vt(e.body,t,!0,["mopen","mclose"]),o=0,a=0,s=!1,l=0;l<i.length;l++)i[l].isMiddle?s=!0:(o=Math.max(i[l].height,o),a=Math.max(i[l].depth,a));if(o*=t.sizeMultiplier,a*=t.sizeMultiplier,r="."===e.left?kt(t,["mopen"]):Er.leftRightDelim(e.left,o,a,t,e.mode,["mopen"]),i.unshift(r),s)for(var c=1;c<i.length;c++){var h=i[c].isMiddle;h&&(i[c]=Er.leftRightDelim(h.delim,o,a,h.options,e.mode,[]))}if("."===e.right)n=kt(t,["mclose"]);else{var u=e.rightColor?t.withColor(e.rightColor):t;n=Er.leftRightDelim(e.right,o,a,u,e.mode,["mclose"])}return i.push(n),Je.makeSpan(["minner"],i,t)},mathmlBuilder:function(e,t){Nr(e);var r=Rt(e.body,t);if("."!==e.left){var n=new Ot.MathNode("mo",[Et(e.left,e.mode)]);n.setAttribute("fence","true"),r.unshift(n)}if("."!==e.right){var i=new Ot.MathNode("mo",[Et(e.right,e.mode)]);i.setAttribute("fence","true"),e.rightColor&&i.setAttribute("mathcolor",e.rightColor),r.push(i)}return Bt(r)}}),lt({type:"middle",names:["\\middle"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=Rr(t[0],e);if(!e.parser.leftrightDepth)throw new n("\\middle without preceding \\left",r);return{type:"middle",mode:e.parser.mode,delim:r.text}},htmlBuilder:function(e,t){var r;if("."===e.delim)r=kt(t,[]);else{r=Er.sizedDelim(e.delim,1,t,e.mode,[]);var n={delim:e.delim,options:t};r.isMiddle=n}return r},mathmlBuilder:function(e,t){var r="\\vert"===e.delim||"|"===e.delim?Et("|","text"):Et(e.delim,e.mode),n=new Ot.MathNode("mo",[r]);return n.setAttribute("fence","true"),n.setAttribute("lspace","0.05em"),n.setAttribute("rspace","0.05em"),n}});var _r=function(e,t){var r,n,i,o=Je.wrapFragment(St(e.body,t),t),a=e.label.slice(1),s=t.sizeMultiplier,l=0,c=m(e.body);if("sout"===a)(r=Je.makeSpan(["stretchy","sout"])).height=t.fontMetrics().defaultRuleThickness/s,l=-.5*t.fontMetrics().xHeight;else if("phase"===a){var h=G({number:.6,unit:"pt"},t),u=G({number:.35,unit:"ex"},t);s/=t.havingBaseSizing().sizeMultiplier;var p=o.height+o.depth+h+u;o.style.paddingLeft=U(p/2+h);var d=Math.floor(1e3*p*s),f="M400000 "+(n=d)+" H0 L"+n/2+" 0 l65 45 L145 "+(n-80)+" H400000z",g=new re([new ne("phase",f)],{width:"400em",height:U(d/1e3),viewBox:"0 0 400000 "+d,preserveAspectRatio:"xMinYMin slice"});(r=Je.makeSvgSpan(["hide-tail"],[g],t)).style.height=U(p),l=o.depth+h+u}else{/cancel/.test(a)?c||o.classes.push("cancel-pad"):"angl"===a?o.classes.push("anglpad"):o.classes.push("boxpad");var v=0,b=0,y=0;/box/.test(a)?(y=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness),b=v=t.fontMetrics().fboxsep+("colorbox"===a?0:y)):"angl"===a?(v=4*(y=Math.max(t.fontMetrics().defaultRuleThickness,t.minRuleThickness)),b=Math.max(0,.25-o.depth)):b=v=c?.2:0,r=function(e,t,r,n,i){var o,a=e.height+e.depth+r+n;if(/fbox|color|angl/.test(t)){if(o=Je.makeSpan(["stretchy",t],[],i),"fbox"===t){var s=i.color&&i.getColor();s&&(o.style.borderColor=s)}}else{var l=[];/^[bx]cancel$/.test(t)&&l.push(new ie({x1:"0",y1:"0",x2:"100%",y2:"100%","stroke-width":"0.046em"})),/^x?cancel$/.test(t)&&l.push(new ie({x1:"0",y1:"100%",x2:"100%",y2:"0","stroke-width":"0.046em"}));var c=new re(l,{width:"100%",height:U(a)});o=Je.makeSvgSpan([],[c],i)}return o.height=a,o.style.height=U(a),o}(o,a,v,b,t),/fbox|boxed|fcolorbox/.test(a)?(r.style.borderStyle="solid",r.style.borderWidth=U(y)):"angl"===a&&.049!==y&&(r.style.borderTopWidth=U(y),r.style.borderRightWidth=U(y)),l=o.depth+b,e.backgroundColor&&(r.style.backgroundColor=e.backgroundColor,e.borderColor&&(r.style.borderColor=e.borderColor))}if(e.backgroundColor)i=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:r,shift:l},{type:"elem",elem:o,shift:0}]},t);else{var x=/cancel|phase/.test(a)?["svg-align"]:[];i=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:0},{type:"elem",elem:r,shift:l,wrapperClasses:x}]},t)}return/cancel/.test(a)&&(i.height=o.height,i.depth=o.depth),/cancel/.test(a)&&!c?Je.makeSpan(["mord","cancel-lap"],[i],t):Je.makeSpan(["mord"],[i],t)},qr=function(e,t){var r=0,n=new Ot.MathNode(e.label.indexOf("colorbox")>-1?"mpadded":"menclose",[_t(e.body,t)]);switch(e.label){case"\\cancel":n.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":n.setAttribute("notation","downdiagonalstrike");break;case"\\phase":n.setAttribute("notation","phasorangle");break;case"\\sout":n.setAttribute("notation","horizontalstrike");break;case"\\fbox":n.setAttribute("notation","box");break;case"\\angl":n.setAttribute("notation","actuarial");break;case"\\fcolorbox":case"\\colorbox":if(r=t.fontMetrics().fboxsep*t.fontMetrics().ptPerEm,n.setAttribute("width","+"+2*r+"pt"),n.setAttribute("height","+"+2*r+"pt"),n.setAttribute("lspace",r+"pt"),n.setAttribute("voffset",r+"pt"),"\\fcolorbox"===e.label){var i=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness);n.setAttribute("style","border: "+i+"em solid "+String(e.borderColor))}break;case"\\xcancel":n.setAttribute("notation","updiagonalstrike downdiagonalstrike")}return e.backgroundColor&&n.setAttribute("mathbackground",e.backgroundColor),n};lt({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:!0,argTypes:["color","text"]},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=$t(t[0],"color-token").color,a=t[1];return{type:"enclose",mode:n.mode,label:i,backgroundColor:o,body:a}},htmlBuilder:_r,mathmlBuilder:qr}),lt({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:!0,argTypes:["color","color","text"]},handler:function(e,t,r){var n=e.parser,i=e.funcName,o=$t(t[0],"color-token").color,a=$t(t[1],"color-token").color,s=t[2];return{type:"enclose",mode:n.mode,label:i,backgroundColor:a,borderColor:o,body:s}},htmlBuilder:_r,mathmlBuilder:qr}),lt({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!0},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\fbox",body:t[0]}}}),lt({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout","\\phase"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"enclose",mode:r.mode,label:n,body:i}},htmlBuilder:_r,mathmlBuilder:qr}),lt({type:"enclose",names:["\\angl"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!1},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\angl",body:t[0]}}});var Pr={};function Dr(e){for(var t=e.type,r=e.names,n=e.props,i=e.handler,o=e.htmlBuilder,a=e.mathmlBuilder,s={type:t,numArgs:n.numArgs||0,allowedInText:!1,numOptionalArgs:0,handler:i},l=0;l<r.length;++l)Pr[r[l]]=s;o&&(at[t]=o),a&&(st[t]=a)}var Lr={};function Hr(e,t){Lr[e]=t}var jr=function(){function e(e,t,r){this.lexer=void 0,this.start=void 0,this.end=void 0,this.lexer=e,this.start=t,this.end=r}return e.range=function(t,r){return r?t&&t.loc&&r.loc&&t.loc.lexer===r.loc.lexer?new e(t.loc.lexer,t.loc.start,r.loc.end):null:t&&t.loc},e}(),Fr=function(){function e(e,t){this.text=void 0,this.loc=void 0,this.noexpand=void 0,this.treatAsRelax=void 0,this.text=e,this.loc=t}return e.prototype.range=function(t,r){return new e(r,jr.range(this,t))},e}();function $r(e){var t=[];e.consumeSpaces();var r=e.fetch().text;for("\\relax"===r&&(e.consume(),e.consumeSpaces(),r=e.fetch().text);"\\hline"===r||"\\hdashline"===r;)e.consume(),t.push("\\hdashline"===r),e.consumeSpaces(),r=e.fetch().text;return t}var Vr=function(e){if(!e.parser.settings.displayMode)throw new n("{"+e.envName+"} can be used only in display mode.")};function Gr(e){if(-1===e.indexOf("ed"))return-1===e.indexOf("*")}function Ur(e,t,r){var i=t.hskipBeforeAndAfter,o=t.addJot,a=t.cols,s=t.arraystretch,l=t.colSeparationType,c=t.autoTag,h=t.singleRow,u=t.emptySingleRow,p=t.maxNumCols,m=t.leqno;if(e.gullet.beginGroup(),h||e.gullet.macros.set("\\cr","\\\\\\relax"),!s){var d=e.gullet.expandMacroAsText("\\arraystretch");if(null==d)s=1;else if(!(s=parseFloat(d))||s<0)throw new n("Invalid \\arraystretch: "+d)}e.gullet.beginGroup();var f=[],g=[f],v=[],b=[],y=null!=c?[]:void 0;function x(){c&&e.gullet.macros.set("\\@eqnsw","1",!0)}function w(){y&&(e.gullet.macros.get("\\df@tag")?(y.push(e.subparse([new Fr("\\df@tag")])),e.gullet.macros.set("\\df@tag",void 0,!0)):y.push(Boolean(c)&&"1"===e.gullet.macros.get("\\@eqnsw")))}for(x(),b.push($r(e));;){var k=e.parseExpression(!1,h?"\\end":"\\\\");e.gullet.endGroup(),e.gullet.beginGroup(),k={type:"ordgroup",mode:e.mode,body:k},r&&(k={type:"styling",mode:e.mode,style:r,body:[k]}),f.push(k);var S=e.fetch().text;if("&"===S){if(p&&f.length===p){if(h||l)throw new n("Too many tab characters: &",e.nextToken);e.settings.reportNonstrict("textEnv","Too few columns specified in the {array} column argument.")}e.consume()}else{if("\\end"===S){w(),1===f.length&&"styling"===k.type&&0===k.body[0].body.length&&(g.length>1||!u)&&g.pop(),b.length<g.length+1&&b.push([]);break}if("\\\\"!==S)throw new n("Expected & or \\\\ or \\cr or \\end",e.nextToken);e.consume();var z=void 0;" "!==e.gullet.future().text&&(z=e.parseSizeGroup(!0)),v.push(z?z.value:null),w(),b.push($r(e)),f=[],g.push(f),x()}}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:e.mode,addJot:o,arraystretch:s,body:g,cols:a,rowGaps:v,hskipBeforeAndAfter:i,hLinesBeforeRow:b,colSeparationType:l,tags:y,leqno:m}}function Wr(e){return"d"===e.slice(0,1)?"display":"text"}var Xr=function(e,t){var r,i,o=e.body.length,a=e.hLinesBeforeRow,s=0,l=new Array(o),h=[],u=Math.max(t.fontMetrics().arrayRuleWidth,t.minRuleThickness),p=1/t.fontMetrics().ptPerEm,m=5*p;e.colSeparationType&&"small"===e.colSeparationType&&(m=t.havingStyle(T.SCRIPT).sizeMultiplier/t.sizeMultiplier*.2778);var d="CD"===e.colSeparationType?G({number:3,unit:"ex"},t):12*p,f=3*p,g=e.arraystretch*d,v=.7*g,b=.3*g,y=0;function x(e){for(var t=0;t<e.length;++t)t>0&&(y+=.25),h.push({pos:y,isDashed:e[t]})}for(x(a[0]),r=0;r<e.body.length;++r){var w=e.body[r],k=v,S=b;s<w.length&&(s=w.length);var z=new Array(w.length);for(i=0;i<w.length;++i){var M=St(w[i],t);S<M.depth&&(S=M.depth),k<M.height&&(k=M.height),z[i]=M}var A=e.rowGaps[r],C=0;A&&(C=G(A,t))>0&&(S<(C+=b)&&(S=C),C=0),e.addJot&&(S+=f),z.height=k,z.depth=S,y+=k,z.pos=y,y+=S+C,l[r]=z,x(a[r+1])}var O,E,B=y/2+t.fontMetrics().axisHeight,I=e.cols||[],R=[],N=[];if(e.tags&&e.tags.some((function(e){return e})))for(r=0;r<o;++r){var _=l[r],q=_.pos-B,P=e.tags[r],D=void 0;(D=!0===P?Je.makeSpan(["eqn-num"],[],t):Je.makeSpan([],!1===P?[]:vt(P,t,!0),t)).depth=_.depth,D.height=_.height,N.push({type:"elem",elem:D,shift:q})}for(i=0,E=0;i<s||E<I.length;++i,++E){for(var L=I[E]||{},H=!0;"separator"===L.type;){if(H||((O=Je.makeSpan(["arraycolsep"],[])).style.width=U(t.fontMetrics().doubleRuleSep),R.push(O)),"|"!==L.separator&&":"!==L.separator)throw new n("Invalid separator type: "+L.separator);var j="|"===L.separator?"solid":"dashed",F=Je.makeSpan(["vertical-separator"],[],t);F.style.height=U(y),F.style.borderRightWidth=U(u),F.style.borderRightStyle=j,F.style.margin="0 "+U(-u/2);var $=y-B;$&&(F.style.verticalAlign=U(-$)),R.push(F),L=I[++E]||{},H=!1}if(!(i>=s)){var V=void 0;(i>0||e.hskipBeforeAndAfter)&&0!==(V=c(L.pregap,m))&&((O=Je.makeSpan(["arraycolsep"],[])).style.width=U(V),R.push(O));var W=[];for(r=0;r<o;++r){var X=l[r],Y=X[i];if(Y){var Z=X.pos-B;Y.depth=X.depth,Y.height=X.height,W.push({type:"elem",elem:Y,shift:Z})}}W=Je.makeVList({positionType:"individualShift",children:W},t),W=Je.makeSpan(["col-align-"+(L.align||"c")],[W]),R.push(W),(i<s-1||e.hskipBeforeAndAfter)&&0!==(V=c(L.postgap,m))&&((O=Je.makeSpan(["arraycolsep"],[])).style.width=U(V),R.push(O))}}if(l=Je.makeSpan(["mtable"],R),h.length>0){for(var K=Je.makeLineSpan("hline",t,u),Q=Je.makeLineSpan("hdashline",t,u),J=[{type:"elem",elem:l,shift:0}];h.length>0;){var ee=h.pop(),te=ee.pos-B;ee.isDashed?J.push({type:"elem",elem:Q,shift:te}):J.push({type:"elem",elem:K,shift:te})}l=Je.makeVList({positionType:"individualShift",children:J},t)}if(0===N.length)return Je.makeSpan(["mord"],[l],t);var re=Je.makeVList({positionType:"individualShift",children:N},t);return re=Je.makeSpan(["tag"],[re],t),Je.makeFragment([l,re])},Yr={c:"center ",l:"left ",r:"right "},Zr=function(e,t){for(var r=[],n=new Ot.MathNode("mtd",[],["mtr-glue"]),i=new Ot.MathNode("mtd",[],["mml-eqn-num"]),o=0;o<e.body.length;o++){for(var a=e.body[o],s=[],l=0;l<a.length;l++)s.push(new Ot.MathNode("mtd",[_t(a[l],t)]));e.tags&&e.tags[o]&&(s.unshift(n),s.push(n),e.leqno?s.unshift(i):s.push(i)),r.push(new Ot.MathNode("mtr",s))}var c=new Ot.MathNode("mtable",r),h=.5===e.arraystretch?.1:.16+e.arraystretch-1+(e.addJot?.09:0);c.setAttribute("rowspacing",U(h));var u="",p="";if(e.cols&&e.cols.length>0){var m=e.cols,d="",f=!1,g=0,v=m.length;"separator"===m[0].type&&(u+="top ",g=1),"separator"===m[m.length-1].type&&(u+="bottom ",v-=1);for(var b=g;b<v;b++)"align"===m[b].type?(p+=Yr[m[b].align],f&&(d+="none "),f=!0):"separator"===m[b].type&&f&&(d+="|"===m[b].separator?"solid ":"dashed ",f=!1);c.setAttribute("columnalign",p.trim()),/[sd]/.test(d)&&c.setAttribute("columnlines",d.trim())}if("align"===e.colSeparationType){for(var y=e.cols||[],x="",w=1;w<y.length;w++)x+=w%2?"0em ":"1em ";c.setAttribute("columnspacing",x.trim())}else"alignat"===e.colSeparationType||"gather"===e.colSeparationType?c.setAttribute("columnspacing","0em"):"small"===e.colSeparationType?c.setAttribute("columnspacing","0.2778em"):"CD"===e.colSeparationType?c.setAttribute("columnspacing","0.5em"):c.setAttribute("columnspacing","1em");var k="",S=e.hLinesBeforeRow;u+=S[0].length>0?"left ":"",u+=S[S.length-1].length>0?"right ":"";for(var z=1;z<S.length-1;z++)k+=0===S[z].length?"none ":S[z][0]?"dashed ":"solid ";return/[sd]/.test(k)&&c.setAttribute("rowlines",k.trim()),""!==u&&(c=new Ot.MathNode("menclose",[c])).setAttribute("notation",u.trim()),e.arraystretch&&e.arraystretch<1&&(c=new Ot.MathNode("mstyle",[c])).setAttribute("scriptlevel","1"),c},Kr=function(e,t){-1===e.envName.indexOf("ed")&&Vr(e);var r,i=[],o=e.envName.indexOf("at")>-1?"alignat":"align",a="split"===e.envName,s=Ur(e.parser,{cols:i,addJot:!0,autoTag:a?void 0:Gr(e.envName),emptySingleRow:!0,colSeparationType:o,maxNumCols:a?2:void 0,leqno:e.parser.settings.leqno},"display"),l=0,c={type:"ordgroup",mode:e.mode,body:[]};if(t[0]&&"ordgroup"===t[0].type){for(var h="",u=0;u<t[0].body.length;u++)h+=$t(t[0].body[u],"textord").text;r=Number(h),l=2*r}var p=!l;s.body.forEach((function(e){for(var t=1;t<e.length;t+=2){var i=$t(e[t],"styling");$t(i.body[0],"ordgroup").body.unshift(c)}if(p)l<e.length&&(l=e.length);else{var o=e.length/2;if(r<o)throw new n("Too many math in a row: expected "+r+", but got "+o,e[0])}}));for(var m=0;m<l;++m){var d="r",f=0;m%2==1?d="l":m>0&&p&&(f=1),i[m]={type:"align",align:d,pregap:f,postgap:0}}return s.colSeparationType=p?"align":"alignat",s};Dr({type:"array",names:["array","darray"],props:{numArgs:1},handler:function(e,t){var r=(Gt(t[0])?[t[0]]:$t(t[0],"ordgroup").body).map((function(e){var t=Vt(e).text;if(-1!=="lcr".indexOf(t))return{type:"align",align:t};if("|"===t)return{type:"separator",separator:"|"};if(":"===t)return{type:"separator",separator:":"};throw new n("Unknown column alignment: "+t,e)})),i={cols:r,hskipBeforeAndAfter:!0,maxNumCols:r.length};return Ur(e.parser,i,Wr(e.envName))},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","matrix*","pmatrix*","bmatrix*","Bmatrix*","vmatrix*","Vmatrix*"],props:{numArgs:0},handler:function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName.replace("*","")],r="c",i={hskipBeforeAndAfter:!1,cols:[{type:"align",align:r}]};if("*"===e.envName.charAt(e.envName.length-1)){var o=e.parser;if(o.consumeSpaces(),"["===o.fetch().text){if(o.consume(),o.consumeSpaces(),r=o.fetch().text,-1==="lcr".indexOf(r))throw new n("Expected l or c or r",o.nextToken);o.consume(),o.consumeSpaces(),o.expect("]"),o.consume(),i.cols=[{type:"align",align:r}]}}var a=Ur(e.parser,i,Wr(e.envName)),s=Math.max.apply(Math,[0].concat(a.body.map((function(e){return e.length}))));return a.cols=new Array(s).fill({type:"align",align:r}),t?{type:"leftright",mode:e.mode,body:[a],left:t[0],right:t[1],rightColor:void 0}:a},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["smallmatrix"],props:{numArgs:0},handler:function(e){var t=Ur(e.parser,{arraystretch:.5},"script");return t.colSeparationType="small",t},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["subarray"],props:{numArgs:1},handler:function(e,t){var r=(Gt(t[0])?[t[0]]:$t(t[0],"ordgroup").body).map((function(e){var t=Vt(e).text;if(-1!=="lc".indexOf(t))return{type:"align",align:t};throw new n("Unknown column alignment: "+t,e)}));if(r.length>1)throw new n("{subarray} can contain only one column");var i={cols:r,hskipBeforeAndAfter:!1,arraystretch:.5};if((i=Ur(e.parser,i,"script")).body.length>0&&i.body[0].length>1)throw new n("{subarray} can contain only one column");return i},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["cases","dcases","rcases","drcases"],props:{numArgs:0},handler:function(e){var t=Ur(e.parser,{arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:1},{type:"align",align:"l",pregap:0,postgap:0}]},Wr(e.envName));return{type:"leftright",mode:e.mode,body:[t],left:e.envName.indexOf("r")>-1?".":"\\{",right:e.envName.indexOf("r")>-1?"\\}":".",rightColor:void 0}},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["align","align*","aligned","split"],props:{numArgs:0},handler:Kr,htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["gathered","gather","gather*"],props:{numArgs:0},handler:function(e){l(["gather","gather*"],e.envName)&&Vr(e);var t={cols:[{type:"align",align:"c"}],addJot:!0,colSeparationType:"gather",autoTag:Gr(e.envName),emptySingleRow:!0,leqno:e.parser.settings.leqno};return Ur(e.parser,t,"display")},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["alignat","alignat*","alignedat"],props:{numArgs:1},handler:Kr,htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["equation","equation*"],props:{numArgs:0},handler:function(e){Vr(e);var t={autoTag:Gr(e.envName),emptySingleRow:!0,singleRow:!0,maxNumCols:1,leqno:e.parser.settings.leqno};return Ur(e.parser,t,"display")},htmlBuilder:Xr,mathmlBuilder:Zr}),Dr({type:"array",names:["CD"],props:{numArgs:0},handler:function(e){return Vr(e),function(e){var t=[];for(e.gullet.beginGroup(),e.gullet.macros.set("\\cr","\\\\\\relax"),e.gullet.beginGroup();;){t.push(e.parseExpression(!1,"\\\\")),e.gullet.endGroup(),e.gullet.beginGroup();var r=e.fetch().text;if("&"!==r&&"\\\\"!==r){if("\\end"===r){0===t[t.length-1].length&&t.pop();break}throw new n("Expected \\\\ or \\cr or \\end",e.nextToken)}e.consume()}for(var i,o,a=[],s=[a],l=0;l<t.length;l++){for(var c=t[l],h={type:"styling",body:[],mode:"math",style:"display"},u=0;u<c.length;u++)if(tr(c[u])){a.push(h);var p=Vt(c[u+=1]).text,m=new Array(2);if(m[0]={type:"ordgroup",mode:"math",body:[]},m[1]={type:"ordgroup",mode:"math",body:[]},"=|.".indexOf(p)>-1);else{if(!("<>AV".indexOf(p)>-1))throw new n('Expected one of "<>AV=|." after @',c[u]);for(var d=0;d<2;d++){for(var f=!0,g=u+1;g<c.length;g++){if(o=p,("mathord"===(i=c[g]).type||"atom"===i.type)&&i.text===o){f=!1,u=g;break}if(tr(c[g]))throw new n("Missing a "+p+" character to complete a CD arrow.",c[g]);m[d].body.push(c[g])}if(f)throw new n("Missing a "+p+" character to complete a CD arrow.",c[u])}}var v={type:"styling",body:[rr(p,m,e)],mode:"math",style:"display"};a.push(v),h={type:"styling",body:[],mode:"math",style:"display"}}else h.body.push(c[u]);l%2==0?a.push(h):a.shift(),a=[],s.push(a)}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:"math",body:s,arraystretch:1,addJot:!0,rowGaps:[null],cols:new Array(s[0].length).fill({type:"align",align:"c",pregap:.25,postgap:.25}),colSeparationType:"CD",hLinesBeforeRow:new Array(s.length+1).fill([])}}(e.parser)},htmlBuilder:Xr,mathmlBuilder:Zr}),Hr("\\nonumber","\\gdef\\@eqnsw{0}"),Hr("\\notag","\\nonumber"),lt({type:"text",names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:!0,allowedInMath:!0},handler:function(e,t){throw new n(e.funcName+" valid only within array environment")}});var Qr=Pr;lt({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler:function(e,t){var r=e.parser,i=e.funcName,o=t[0];if("ordgroup"!==o.type)throw new n("Invalid environment name",o);for(var a="",s=0;s<o.body.length;++s)a+=$t(o.body[s],"textord").text;if("\\begin"===i){if(!Qr.hasOwnProperty(a))throw new n("No such environment: "+a,o);var l=Qr[a],c=r.parseArguments("\\begin{"+a+"}",l),h=c.args,u=c.optArgs,p={mode:r.mode,envName:a,parser:r},m=l.handler(p,h,u);r.expect("\\end",!1);var d=r.nextToken,f=$t(r.parseFunction(),"environment");if(f.name!==a)throw new n("Mismatch: \\begin{"+a+"} matched by \\end{"+f.name+"}",d);return m}return{type:"environment",mode:r.mode,name:a,nameGroup:o}}});var Jr=function(e,t){var r=e.font,n=t.withFont(r);return St(e.body,n)},en=function(e,t){var r=e.font,n=t.withFont(r);return _t(e.body,n)},tn={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};lt({type:"font",names:["\\mathrm","\\mathit","\\mathbf","\\mathnormal","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],props:{numArgs:1,allowedInArgument:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=ht(t[0]),o=n;return o in tn&&(o=tn[o]),{type:"font",mode:r.mode,font:o.slice(1),body:i}},htmlBuilder:Jr,mathmlBuilder:en}),lt({type:"mclass",names:["\\boldsymbol","\\bm"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0],i=m(n);return{type:"mclass",mode:r.mode,mclass:Jt(n),body:[{type:"font",mode:r.mode,font:"boldsymbol",body:n}],isCharacterBox:i}}}),lt({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it","\\cal"],props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=e.breakOnTokenText,o=r.mode,a=r.parseExpression(!0,i);return{type:"font",mode:o,font:"math"+n.slice(1),body:{type:"ordgroup",mode:r.mode,body:a}}},htmlBuilder:Jr,mathmlBuilder:en});var rn=function(e,t){var r=t;return"display"===e?r=r.id>=T.SCRIPT.id?r.text():T.DISPLAY:"text"===e&&r.size===T.DISPLAY.size?r=T.TEXT:"script"===e?r=T.SCRIPT:"scriptscript"===e&&(r=T.SCRIPTSCRIPT),r},nn=function(e,t){var r,n=rn(e.size,t.style),i=n.fracNum(),o=n.fracDen();r=t.havingStyle(i);var a=St(e.numer,r,t);if(e.continued){var s=8.5/t.fontMetrics().ptPerEm,l=3.5/t.fontMetrics().ptPerEm;a.height=a.height<s?s:a.height,a.depth=a.depth<l?l:a.depth}r=t.havingStyle(o);var c,h,u,p,m,d,f,g,v,b,y=St(e.denom,r,t);if(e.hasBarLine?(e.barSize?(h=G(e.barSize,t),c=Je.makeLineSpan("frac-line",t,h)):c=Je.makeLineSpan("frac-line",t),h=c.height,u=c.height):(c=null,h=0,u=t.fontMetrics().defaultRuleThickness),n.size===T.DISPLAY.size||"display"===e.size?(p=t.fontMetrics().num1,m=h>0?3*u:7*u,d=t.fontMetrics().denom1):(h>0?(p=t.fontMetrics().num2,m=u):(p=t.fontMetrics().num3,m=3*u),d=t.fontMetrics().denom2),c){var x=t.fontMetrics().axisHeight;p-a.depth-(x+.5*h)<m&&(p+=m-(p-a.depth-(x+.5*h))),x-.5*h-(y.height-d)<m&&(d+=m-(x-.5*h-(y.height-d))),f=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:y,shift:d},{type:"elem",elem:c,shift:-(x-.5*h)},{type:"elem",elem:a,shift:-p}]},t)}else{var w=p-a.depth-(y.height-d);w<m&&(p+=.5*(m-w),d+=.5*(m-w)),f=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:y,shift:d},{type:"elem",elem:a,shift:-p}]},t)}return r=t.havingStyle(n),f.height*=r.sizeMultiplier/t.sizeMultiplier,f.depth*=r.sizeMultiplier/t.sizeMultiplier,g=n.size===T.DISPLAY.size?t.fontMetrics().delim1:n.size===T.SCRIPTSCRIPT.size?t.havingStyle(T.SCRIPT).fontMetrics().delim2:t.fontMetrics().delim2,v=null==e.leftDelim?kt(t,["mopen"]):Er.customSizedDelim(e.leftDelim,g,!0,t.havingStyle(n),e.mode,["mopen"]),b=e.continued?Je.makeSpan([]):null==e.rightDelim?kt(t,["mclose"]):Er.customSizedDelim(e.rightDelim,g,!0,t.havingStyle(n),e.mode,["mclose"]),Je.makeSpan(["mord"].concat(r.sizingClasses(t)),[v,Je.makeSpan(["mfrac"],[f]),b],t)},on=function(e,t){var r=new Ot.MathNode("mfrac",[_t(e.numer,t),_t(e.denom,t)]);if(e.hasBarLine){if(e.barSize){var n=G(e.barSize,t);r.setAttribute("linethickness",U(n))}}else r.setAttribute("linethickness","0px");var i=rn(e.size,t.style);if(i.size!==t.style.size){r=new Ot.MathNode("mstyle",[r]);var o=i.size===T.DISPLAY.size?"true":"false";r.setAttribute("displaystyle",o),r.setAttribute("scriptlevel","0")}if(null!=e.leftDelim||null!=e.rightDelim){var a=[];if(null!=e.leftDelim){var s=new Ot.MathNode("mo",[new Ot.TextNode(e.leftDelim.replace("\\",""))]);s.setAttribute("fence","true"),a.push(s)}if(a.push(r),null!=e.rightDelim){var l=new Ot.MathNode("mo",[new Ot.TextNode(e.rightDelim.replace("\\",""))]);l.setAttribute("fence","true"),a.push(l)}return Bt(a)}return r};lt({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac","\\\\bracefrac","\\\\brackfrac"],props:{numArgs:2,allowedInArgument:!0},handler:function(e,t){var r,n=e.parser,i=e.funcName,o=t[0],a=t[1],s=null,l=null,c="auto";switch(i){case"\\dfrac":case"\\frac":case"\\tfrac":r=!0;break;case"\\\\atopfrac":r=!1;break;case"\\dbinom":case"\\binom":case"\\tbinom":r=!1,s="(",l=")";break;case"\\\\bracefrac":r=!1,s="\\{",l="\\}";break;case"\\\\brackfrac":r=!1,s="[",l="]";break;default:throw new Error("Unrecognized genfrac command")}switch(i){case"\\dfrac":case"\\dbinom":c="display";break;case"\\tfrac":case"\\tbinom":c="text"}return{type:"genfrac",mode:n.mode,continued:!1,numer:o,denom:a,hasBarLine:r,leftDelim:s,rightDelim:l,size:c,barSize:null}},htmlBuilder:nn,mathmlBuilder:on}),lt({type:"genfrac",names:["\\cfrac"],props:{numArgs:2},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),i=t[1];return{type:"genfrac",mode:r.mode,continued:!0,numer:n,denom:i,hasBarLine:!0,leftDelim:null,rightDelim:null,size:"display",barSize:null}}}),lt({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:!0},handler:function(e){var t,r=e.parser,n=e.funcName,i=e.token;switch(n){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;case"\\brace":t="\\\\bracefrac";break;case"\\brack":t="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",mode:r.mode,replaceWith:t,token:i}}});var an=["display","text","script","scriptscript"],sn=function(e){var t=null;return e.length>0&&(t="."===(t=e)?null:t),t};lt({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,allowedInArgument:!0,argTypes:["math","math","size","text","math","math"]},handler:function(e,t){var r,n=e.parser,i=t[4],o=t[5],a=ht(t[0]),s="atom"===a.type&&"open"===a.family?sn(a.text):null,l=ht(t[1]),c="atom"===l.type&&"close"===l.family?sn(l.text):null,h=$t(t[2],"size"),u=null;r=!!h.isBlank||(u=h.value).number>0;var p="auto",m=t[3];if("ordgroup"===m.type){if(m.body.length>0){var d=$t(m.body[0],"textord");p=an[Number(d.text)]}}else m=$t(m,"textord"),p=an[Number(m.text)];return{type:"genfrac",mode:n.mode,numer:i,denom:o,continued:!1,hasBarLine:r,barSize:u,leftDelim:s,rightDelim:c,size:p}},htmlBuilder:nn,mathmlBuilder:on}),lt({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:!0},handler:function(e,t){var r=e.parser,n=(e.funcName,e.token);return{type:"infix",mode:r.mode,replaceWith:"\\\\abovefrac",size:$t(t[0],"size").value,token:n}}}),lt({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),i=function(e){if(!e)throw new Error("Expected non-null, but got "+String(e));return e}($t(t[1],"infix").size),o=t[2],a=i.number>0;return{type:"genfrac",mode:r.mode,numer:n,denom:o,continued:!1,hasBarLine:a,barSize:i,leftDelim:null,rightDelim:null,size:"auto"}},htmlBuilder:nn,mathmlBuilder:on});var ln=function(e,t){var r,n,i=t.style;"supsub"===e.type?(r=e.sup?St(e.sup,t.havingStyle(i.sup()),t):St(e.sub,t.havingStyle(i.sub()),t),n=$t(e.base,"horizBrace")):n=$t(e,"horizBrace");var o,a=St(n.base,t.havingBaseStyle(T.DISPLAY)),s=Ft(n,t);if(n.isOver?(o=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:a},{type:"kern",size:.1},{type:"elem",elem:s}]},t)).children[0].children[0].children[1].classes.push("svg-align"):(o=Je.makeVList({positionType:"bottom",positionData:a.depth+.1+s.height,children:[{type:"elem",elem:s},{type:"kern",size:.1},{type:"elem",elem:a}]},t)).children[0].children[0].children[0].classes.push("svg-align"),r){var l=Je.makeSpan(["mord",n.isOver?"mover":"munder"],[o],t);o=n.isOver?Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:l},{type:"kern",size:.2},{type:"elem",elem:r}]},t):Je.makeVList({positionType:"bottom",positionData:l.depth+.2+r.height+r.depth,children:[{type:"elem",elem:r},{type:"kern",size:.2},{type:"elem",elem:l}]},t)}return Je.makeSpan(["mord",n.isOver?"mover":"munder"],[o],t)};lt({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"horizBrace",mode:r.mode,label:n,isOver:/^\\over/.test(n),base:t[0]}},htmlBuilder:ln,mathmlBuilder:function(e,t){var r=jt(e.label);return new Ot.MathNode(e.isOver?"mover":"munder",[_t(e.base,t),r])}}),lt({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[1],i=$t(t[0],"url").url;return r.settings.isTrusted({command:"\\href",url:i})?{type:"href",mode:r.mode,href:i,body:ut(n)}:r.formatUnsupportedCmd("\\href")},htmlBuilder:function(e,t){var r=vt(e.body,t,!1);return Je.makeAnchor(e.href,[],r,t)},mathmlBuilder:function(e,t){var r=Nt(e.body,t);return r instanceof At||(r=new At("mrow",[r])),r.setAttribute("href",e.href),r}}),lt({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=$t(t[0],"url").url;if(!r.settings.isTrusted({command:"\\url",url:n}))return r.formatUnsupportedCmd("\\url");for(var i=[],o=0;o<n.length;o++){var a=n[o];"~"===a&&(a="\\textasciitilde"),i.push({type:"textord",mode:"text",text:a})}var s={type:"text",mode:r.mode,font:"\\texttt",body:i};return{type:"href",mode:r.mode,href:n,body:ut(s)}}}),lt({type:"hbox",names:["\\hbox"],props:{numArgs:1,argTypes:["text"],allowedInText:!0,primitive:!0},handler:function(e,t){return{type:"hbox",mode:e.parser.mode,body:ut(t[0])}},htmlBuilder:function(e,t){var r=vt(e.body,t,!1);return Je.makeFragment(r)},mathmlBuilder:function(e,t){return new Ot.MathNode("mrow",Rt(e.body,t))}}),lt({type:"html",names:["\\htmlClass","\\htmlId","\\htmlStyle","\\htmlData"],props:{numArgs:2,argTypes:["raw","original"],allowedInText:!0},handler:function(e,t){var r,i=e.parser,o=e.funcName,a=(e.token,$t(t[0],"raw").string),s=t[1];i.settings.strict&&i.settings.reportNonstrict("htmlExtension","HTML extension is disabled on strict mode");var l={};switch(o){case"\\htmlClass":l.class=a,r={command:"\\htmlClass",class:a};break;case"\\htmlId":l.id=a,r={command:"\\htmlId",id:a};break;case"\\htmlStyle":l.style=a,r={command:"\\htmlStyle",style:a};break;case"\\htmlData":for(var c=a.split(","),h=0;h<c.length;h++){var u=c[h].split("=");if(2!==u.length)throw new n("Error parsing key-value for \\htmlData");l["data-"+u[0].trim()]=u[1].trim()}r={command:"\\htmlData",attributes:l};break;default:throw new Error("Unrecognized html command")}return i.settings.isTrusted(r)?{type:"html",mode:i.mode,attributes:l,body:ut(s)}:i.formatUnsupportedCmd(o)},htmlBuilder:function(e,t){var r=vt(e.body,t,!1),n=["enclosing"];e.attributes.class&&n.push.apply(n,e.attributes.class.trim().split(/\s+/));var i=Je.makeSpan(n,r,t);for(var o in e.attributes)"class"!==o&&e.attributes.hasOwnProperty(o)&&i.setAttribute(o,e.attributes[o]);return i},mathmlBuilder:function(e,t){return Nt(e.body,t)}}),lt({type:"htmlmathml",names:["\\html@mathml"],props:{numArgs:2,allowedInText:!0},handler:function(e,t){return{type:"htmlmathml",mode:e.parser.mode,html:ut(t[0]),mathml:ut(t[1])}},htmlBuilder:function(e,t){var r=vt(e.html,t,!1);return Je.makeFragment(r)},mathmlBuilder:function(e,t){return Nt(e.mathml,t)}});var cn=function(e){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))return{number:+e,unit:"bp"};var t=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);if(!t)throw new n("Invalid size: '"+e+"' in \\includegraphics");var r={number:+(t[1]+t[2]),unit:t[3]};if(!V(r))throw new n("Invalid unit: '"+r.unit+"' in \\includegraphics.");return r};lt({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:!1},handler:function(e,t,r){var i=e.parser,o={number:0,unit:"em"},a={number:.9,unit:"em"},s={number:0,unit:"em"},l="";if(r[0])for(var c=$t(r[0],"raw").string.split(","),h=0;h<c.length;h++){var u=c[h].split("=");if(2===u.length){var p=u[1].trim();switch(u[0].trim()){case"alt":l=p;break;case"width":o=cn(p);break;case"height":a=cn(p);break;case"totalheight":s=cn(p);break;default:throw new n("Invalid key: '"+u[0]+"' in \\includegraphics.")}}}var m=$t(t[0],"url").url;return""===l&&(l=(l=(l=m).replace(/^.*[\\/]/,"")).substring(0,l.lastIndexOf("."))),i.settings.isTrusted({command:"\\includegraphics",url:m})?{type:"includegraphics",mode:i.mode,alt:l,width:o,height:a,totalheight:s,src:m}:i.formatUnsupportedCmd("\\includegraphics")},htmlBuilder:function(e,t){var r=G(e.height,t),n=0;e.totalheight.number>0&&(n=G(e.totalheight,t)-r);var i=0;e.width.number>0&&(i=G(e.width,t));var o={height:U(r+n)};i>0&&(o.width=U(i)),n>0&&(o.verticalAlign=U(-n));var a=new J(e.src,e.alt,o);return a.height=r,a.depth=n,a},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mglyph",[]);r.setAttribute("alt",e.alt);var n=G(e.height,t),i=0;if(e.totalheight.number>0&&(i=G(e.totalheight,t)-n,r.setAttribute("valign",U(-i))),r.setAttribute("height",U(n+i)),e.width.number>0){var o=G(e.width,t);r.setAttribute("width",U(o))}return r.setAttribute("src",e.src),r}}),lt({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],primitive:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=$t(t[0],"size");if(r.settings.strict){var o="m"===n[1],a="mu"===i.value.unit;o?(a||r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" supports only mu units, not "+i.value.unit+" units"),"math"!==r.mode&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" works only in math mode")):a&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" doesn't support mu units")}return{type:"kern",mode:r.mode,dimension:i.value}},htmlBuilder:function(e,t){return Je.makeGlue(e.dimension,t)},mathmlBuilder:function(e,t){var r=G(e.dimension,t);return new Ot.SpaceNode(r)}}),lt({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"lap",mode:r.mode,alignment:n.slice(5),body:i}},htmlBuilder:function(e,t){var r;"clap"===e.alignment?(r=Je.makeSpan([],[St(e.body,t)]),r=Je.makeSpan(["inner"],[r],t)):r=Je.makeSpan(["inner"],[St(e.body,t)]);var n=Je.makeSpan(["fix"],[]),i=Je.makeSpan([e.alignment],[r,n],t),o=Je.makeSpan(["strut"]);return o.style.height=U(i.height+i.depth),i.depth&&(o.style.verticalAlign=U(-i.depth)),i.children.unshift(o),i=Je.makeSpan(["thinbox"],[i],t),Je.makeSpan(["mord","vbox"],[i],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[_t(e.body,t)]);if("rlap"!==e.alignment){var n="llap"===e.alignment?"-1":"-0.5";r.setAttribute("lspace",n+"width")}return r.setAttribute("width","0px"),r}}),lt({type:"styling",names:["\\(","$"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){var r=e.funcName,n=e.parser,i=n.mode;n.switchMode("math");var o="\\("===r?"\\)":"$",a=n.parseExpression(!1,o);return n.expect(o),n.switchMode(i),{type:"styling",mode:n.mode,style:"text",body:a}}}),lt({type:"text",names:["\\)","\\]"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){throw new n("Mismatched "+e.funcName)}});var hn=function(e,t){switch(t.style.size){case T.DISPLAY.size:return e.display;case T.TEXT.size:return e.text;case T.SCRIPT.size:return e.script;case T.SCRIPTSCRIPT.size:return e.scriptscript;default:return e.text}};lt({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4,primitive:!0},handler:function(e,t){return{type:"mathchoice",mode:e.parser.mode,display:ut(t[0]),text:ut(t[1]),script:ut(t[2]),scriptscript:ut(t[3])}},htmlBuilder:function(e,t){var r=hn(e,t),n=vt(r,t,!1);return Je.makeFragment(n)},mathmlBuilder:function(e,t){var r=hn(e,t);return Nt(r,t)}});var un=function(e,t,r,n,i,o,a){e=Je.makeSpan([],[e]);var s,l,c,h=r&&m(r);if(t){var u=St(t,n.havingStyle(i.sup()),n);l={elem:u,kern:Math.max(n.fontMetrics().bigOpSpacing1,n.fontMetrics().bigOpSpacing3-u.depth)}}if(r){var p=St(r,n.havingStyle(i.sub()),n);s={elem:p,kern:Math.max(n.fontMetrics().bigOpSpacing2,n.fontMetrics().bigOpSpacing4-p.height)}}if(l&&s){var d=n.fontMetrics().bigOpSpacing5+s.elem.height+s.elem.depth+s.kern+e.depth+a;c=Je.makeVList({positionType:"bottom",positionData:d,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:U(-o)},{type:"kern",size:s.kern},{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:U(o)},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}else if(s){var f=e.height-a;c=Je.makeVList({positionType:"top",positionData:f,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:U(-o)},{type:"kern",size:s.kern},{type:"elem",elem:e}]},n)}else{if(!l)return e;var g=e.depth+a;c=Je.makeVList({positionType:"bottom",positionData:g,children:[{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:U(o)},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}var v=[c];if(s&&0!==o&&!h){var b=Je.makeSpan(["mspace"],[],n);b.style.marginRight=U(o),v.unshift(b)}return Je.makeSpan(["mop","op-limits"],v,n)},pn=["\\smallint"],mn=function(e,t){var r,n,i,o=!1;"supsub"===e.type?(r=e.sup,n=e.sub,i=$t(e.base,"op"),o=!0):i=$t(e,"op");var a,s=t.style,c=!1;if(s.size===T.DISPLAY.size&&i.symbol&&!l(pn,i.name)&&(c=!0),i.symbol){var h=c?"Size2-Regular":"Size1-Regular",u="";if("\\oiint"!==i.name&&"\\oiiint"!==i.name||(u=i.name.slice(1),i.name="oiint"===u?"\\iint":"\\iiint"),a=Je.makeSymbol(i.name,h,"math",t,["mop","op-symbol",c?"large-op":"small-op"]),u.length>0){var p=a.italic,m=Je.staticSvg(u+"Size"+(c?"2":"1"),t);a=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:a,shift:0},{type:"elem",elem:m,shift:c?.08:0}]},t),i.name="\\"+u,a.classes.unshift("mop"),a.italic=p}}else if(i.body){var d=vt(i.body,t,!0);1===d.length&&d[0]instanceof te?(a=d[0]).classes[0]="mop":a=Je.makeSpan(["mop"],d,t)}else{for(var f=[],g=1;g<i.name.length;g++)f.push(Je.mathsym(i.name[g],i.mode,t));a=Je.makeSpan(["mop"],f,t)}var v=0,b=0;return(a instanceof te||"\\oiint"===i.name||"\\oiiint"===i.name)&&!i.suppressBaseShift&&(v=(a.height-a.depth)/2-t.fontMetrics().axisHeight,b=a.italic),o?un(a,r,n,t,s,b,v):(v&&(a.style.position="relative",a.style.top=U(v)),a)},dn=function(e,t){var r;if(e.symbol)r=new At("mo",[Et(e.name,e.mode)]),l(pn,e.name)&&r.setAttribute("largeop","false");else if(e.body)r=new At("mo",Rt(e.body,t));else{r=new At("mi",[new Ct(e.name.slice(1))]);var n=new At("mo",[Et("⁡","text")]);r=e.parentIsSupSub?new At("mrow",[r,n]):Tt([r,n])}return r},fn={"∏":"\\prod","∐":"\\coprod","∑":"\\sum","⋀":"\\bigwedge","⋁":"\\bigvee","⋂":"\\bigcap","⋃":"\\bigcup","⨀":"\\bigodot","⨁":"\\bigoplus","⨂":"\\bigotimes","⨄":"\\biguplus","⨆":"\\bigsqcup"};lt({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint","∏","∐","∑","⋀","⋁","⋂","⋃","⨀","⨁","⨂","⨄","⨆"],props:{numArgs:0},handler:function(e,t){var r=e.parser,n=e.funcName;return 1===n.length&&(n=fn[n]),{type:"op",mode:r.mode,limits:!0,parentIsSupSub:!1,symbol:!0,name:n}},htmlBuilder:mn,mathmlBuilder:dn}),lt({type:"op",names:["\\mathop"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"op",mode:r.mode,limits:!1,parentIsSupSub:!1,symbol:!1,body:ut(n)}},htmlBuilder:mn,mathmlBuilder:dn});var gn={"∫":"\\int","∬":"\\iint","∭":"\\iiint","∮":"\\oint","∯":"\\oiint","∰":"\\oiiint"};lt({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:mn,mathmlBuilder:dn}),lt({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!0,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:mn,mathmlBuilder:dn}),lt({type:"op",names:["\\int","\\iint","\\iiint","\\oint","\\oiint","\\oiiint","∫","∬","∭","∮","∯","∰"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return 1===r.length&&(r=gn[r]),{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!0,name:r}},htmlBuilder:mn,mathmlBuilder:dn});var vn=function(e,t){var r,n,i,o,a=!1;if("supsub"===e.type?(r=e.sup,n=e.sub,i=$t(e.base,"operatorname"),a=!0):i=$t(e,"operatorname"),i.body.length>0){for(var s=i.body.map((function(e){var t=e.text;return"string"==typeof t?{type:"textord",mode:e.mode,text:t}:e})),l=vt(s,t.withFont("mathrm"),!0),c=0;c<l.length;c++){var h=l[c];h instanceof te&&(h.text=h.text.replace(/\u2212/,"-").replace(/\u2217/,"*"))}o=Je.makeSpan(["mop"],l,t)}else o=Je.makeSpan(["mop"],[],t);return a?un(o,r,n,t,t.style,0,0):o};function bn(e,t,r){for(var n=vt(e,t,!1),i=t.sizeMultiplier/r.sizeMultiplier,o=0;o<n.length;o++){var a=n[o].classes.indexOf("sizing");a<0?Array.prototype.push.apply(n[o].classes,t.sizingClasses(r)):n[o].classes[a+1]==="reset-size"+t.size&&(n[o].classes[a+1]="reset-size"+r.size),n[o].height*=i,n[o].depth*=i}return Je.makeFragment(n)}lt({type:"operatorname",names:["\\operatorname@","\\operatornamewithlimits"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"operatorname",mode:r.mode,body:ut(i),alwaysHandleSupSub:"\\operatornamewithlimits"===n,limits:!1,parentIsSupSub:!1}},htmlBuilder:vn,mathmlBuilder:function(e,t){for(var r=Rt(e.body,t.withFont("mathrm")),n=!0,i=0;i<r.length;i++){var o=r[i];if(o instanceof Ot.SpaceNode);else if(o instanceof Ot.MathNode)switch(o.type){case"mi":case"mn":case"ms":case"mspace":case"mtext":break;case"mo":var a=o.children[0];1===o.children.length&&a instanceof Ot.TextNode?a.text=a.text.replace(/\u2212/,"-").replace(/\u2217/,"*"):n=!1;break;default:n=!1}else n=!1}if(n){var s=r.map((function(e){return e.toText()})).join("");r=[new Ot.TextNode(s)]}var l=new Ot.MathNode("mi",r);l.setAttribute("mathvariant","normal");var c=new Ot.MathNode("mo",[Et("⁡","text")]);return e.parentIsSupSub?new Ot.MathNode("mrow",[l,c]):Ot.newDocumentFragment([l,c])}}),Hr("\\operatorname","\\@ifstar\\operatornamewithlimits\\operatorname@"),ct({type:"ordgroup",htmlBuilder:function(e,t){return e.semisimple?Je.makeFragment(vt(e.body,t,!1)):Je.makeSpan(["mord"],vt(e.body,t,!0),t)},mathmlBuilder:function(e,t){return Nt(e.body,t,!0)}}),lt({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0];return{type:"overline",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=St(e.body,t.havingCrampedStyle()),n=Je.makeLineSpan("overline-line",t),i=t.fontMetrics().defaultRuleThickness,o=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r},{type:"kern",size:3*i},{type:"elem",elem:n},{type:"kern",size:i}]},t);return Je.makeSpan(["mord","overline"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[new Ot.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Ot.MathNode("mover",[_t(e.body,t),r]);return n.setAttribute("accent","true"),n}}),lt({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"phantom",mode:r.mode,body:ut(n)}},htmlBuilder:function(e,t){var r=vt(e.body,t.withPhantom(),!1);return Je.makeFragment(r)},mathmlBuilder:function(e,t){var r=Rt(e.body,t);return new Ot.MathNode("mphantom",r)}}),lt({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"hphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Je.makeSpan([],[St(e.body,t.withPhantom())]);if(r.height=0,r.depth=0,r.children)for(var n=0;n<r.children.length;n++)r.children[n].height=0,r.children[n].depth=0;return r=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t),Je.makeSpan(["mord"],[r],t)},mathmlBuilder:function(e,t){var r=Rt(ut(e.body),t),n=new Ot.MathNode("mphantom",r),i=new Ot.MathNode("mpadded",[n]);return i.setAttribute("height","0px"),i.setAttribute("depth","0px"),i}}),lt({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"vphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Je.makeSpan(["inner"],[St(e.body,t.withPhantom())]),n=Je.makeSpan(["fix"],[]);return Je.makeSpan(["mord","rlap"],[r,n],t)},mathmlBuilder:function(e,t){var r=Rt(ut(e.body),t),n=new Ot.MathNode("mphantom",r),i=new Ot.MathNode("mpadded",[n]);return i.setAttribute("width","0px"),i}}),lt({type:"raisebox",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=$t(t[0],"size").value,i=t[1];return{type:"raisebox",mode:r.mode,dy:n,body:i}},htmlBuilder:function(e,t){var r=St(e.body,t),n=G(e.dy,t);return Je.makeVList({positionType:"shift",positionData:-n,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[_t(e.body,t)]),n=e.dy.number+e.dy.unit;return r.setAttribute("voffset",n),r}}),lt({type:"internal",names:["\\relax"],props:{numArgs:0,allowedInText:!0},handler:function(e){return{type:"internal",mode:e.parser.mode}}}),lt({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function(e,t,r){var n=e.parser,i=r[0],o=$t(t[0],"size"),a=$t(t[1],"size");return{type:"rule",mode:n.mode,shift:i&&$t(i,"size").value,width:o.value,height:a.value}},htmlBuilder:function(e,t){var r=Je.makeSpan(["mord","rule"],[],t),n=G(e.width,t),i=G(e.height,t),o=e.shift?G(e.shift,t):0;return r.style.borderRightWidth=U(n),r.style.borderTopWidth=U(i),r.style.bottom=U(o),r.width=n,r.height=i+o,r.depth=-o,r.maxFontSize=1.125*i*t.sizeMultiplier,r},mathmlBuilder:function(e,t){var r=G(e.width,t),n=G(e.height,t),i=e.shift?G(e.shift,t):0,o=t.color&&t.getColor()||"black",a=new Ot.MathNode("mspace");a.setAttribute("mathbackground",o),a.setAttribute("width",U(r)),a.setAttribute("height",U(n));var s=new Ot.MathNode("mpadded",[a]);return i>=0?s.setAttribute("height",U(i)):(s.setAttribute("height",U(i)),s.setAttribute("depth",U(-i))),s.setAttribute("voffset",U(i)),s}});var yn=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];lt({type:"sizing",names:yn,props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,i=e.parser,o=i.parseExpression(!1,r);return{type:"sizing",mode:i.mode,size:yn.indexOf(n)+1,body:o}},htmlBuilder:function(e,t){var r=t.havingSize(e.size);return bn(e.body,r,t)},mathmlBuilder:function(e,t){var r=t.havingSize(e.size),n=Rt(e.body,r),i=new Ot.MathNode("mstyle",n);return i.setAttribute("mathsize",U(r.sizeMultiplier)),i}}),lt({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:!0},handler:function(e,t,r){var n=e.parser,i=!1,o=!1,a=r[0]&&$t(r[0],"ordgroup");if(a)for(var s="",l=0;l<a.body.length;++l)if("t"===(s=a.body[l].text))i=!0;else{if("b"!==s){i=!1,o=!1;break}o=!0}else i=!0,o=!0;var c=t[0];return{type:"smash",mode:n.mode,body:c,smashHeight:i,smashDepth:o}},htmlBuilder:function(e,t){var r=Je.makeSpan([],[St(e.body,t)]);if(!e.smashHeight&&!e.smashDepth)return r;if(e.smashHeight&&(r.height=0,r.children))for(var n=0;n<r.children.length;n++)r.children[n].height=0;if(e.smashDepth&&(r.depth=0,r.children))for(var i=0;i<r.children.length;i++)r.children[i].depth=0;var o=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t);return Je.makeSpan(["mord"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mpadded",[_t(e.body,t)]);return e.smashHeight&&r.setAttribute("height","0px"),e.smashDepth&&r.setAttribute("depth","0px"),r}}),lt({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,i=r[0],o=t[0];return{type:"sqrt",mode:n.mode,body:o,index:i}},htmlBuilder:function(e,t){var r=St(e.body,t.havingCrampedStyle());0===r.height&&(r.height=t.fontMetrics().xHeight),r=Je.wrapFragment(r,t);var n=t.fontMetrics().defaultRuleThickness,i=n;t.style.id<T.TEXT.id&&(i=t.fontMetrics().xHeight);var o=n+i/4,a=r.height+r.depth+o+n,s=Er.sqrtImage(a,t),l=s.span,c=s.ruleWidth,h=s.advanceWidth,u=l.height-c;u>r.height+r.depth+o&&(o=(o+u-r.height-r.depth)/2);var p=l.height-r.height-o-c;r.style.paddingLeft=U(h);var m=Je.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r,wrapperClasses:["svg-align"]},{type:"kern",size:-(r.height+p)},{type:"elem",elem:l},{type:"kern",size:c}]},t);if(e.index){var d=t.havingStyle(T.SCRIPTSCRIPT),f=St(e.index,d,t),g=.6*(m.height-m.depth),v=Je.makeVList({positionType:"shift",positionData:-g,children:[{type:"elem",elem:f}]},t),b=Je.makeSpan(["root"],[v]);return Je.makeSpan(["mord","sqrt"],[b,m],t)}return Je.makeSpan(["mord","sqrt"],[m],t)},mathmlBuilder:function(e,t){var r=e.body,n=e.index;return n?new Ot.MathNode("mroot",[_t(r,t),_t(n,t)]):new Ot.MathNode("msqrt",[_t(r,t)])}});var xn={display:T.DISPLAY,text:T.TEXT,script:T.SCRIPT,scriptscript:T.SCRIPTSCRIPT};lt({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,i=e.parser,o=i.parseExpression(!0,r),a=n.slice(1,n.length-5);return{type:"styling",mode:i.mode,style:a,body:o}},htmlBuilder:function(e,t){var r=xn[e.style],n=t.havingStyle(r).withFont("");return bn(e.body,n,t)},mathmlBuilder:function(e,t){var r=xn[e.style],n=t.havingStyle(r),i=Rt(e.body,n),o=new Ot.MathNode("mstyle",i),a={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]}[e.style];return o.setAttribute("scriptlevel",a[0]),o.setAttribute("displaystyle",a[1]),o}});ct({type:"supsub",htmlBuilder:function(e,t){var r=function(e,t){var r=e.base;return r?"op"===r.type?r.limits&&(t.style.size===T.DISPLAY.size||r.alwaysHandleSupSub)?mn:null:"operatorname"===r.type?r.alwaysHandleSupSub&&(t.style.size===T.DISPLAY.size||r.limits)?vn:null:"accent"===r.type?m(r.base)?Ut:null:"horizBrace"===r.type&&!e.sub===r.isOver?ln:null:null}(e,t);if(r)return r(e,t);var n,i,o,a=e.base,s=e.sup,l=e.sub,c=St(a,t),h=t.fontMetrics(),u=0,p=0,d=a&&m(a);if(s){var f=t.havingStyle(t.style.sup());n=St(s,f,t),d||(u=c.height-f.fontMetrics().supDrop*f.sizeMultiplier/t.sizeMultiplier)}if(l){var g=t.havingStyle(t.style.sub());i=St(l,g,t),d||(p=c.depth+g.fontMetrics().subDrop*g.sizeMultiplier/t.sizeMultiplier)}o=t.style===T.DISPLAY?h.sup1:t.style.cramped?h.sup3:h.sup2;var v,b=t.sizeMultiplier,y=U(.5/h.ptPerEm/b),x=null;if(i){var w=e.base&&"op"===e.base.type&&e.base.name&&("\\oiint"===e.base.name||"\\oiiint"===e.base.name);(c instanceof te||w)&&(x=U(-c.italic))}if(n&&i){u=Math.max(u,o,n.depth+.25*h.xHeight),p=Math.max(p,h.sub2);var k=4*h.defaultRuleThickness;if(u-n.depth-(i.height-p)<k){p=k-(u-n.depth)+i.height;var S=.8*h.xHeight-(u-n.depth);S>0&&(u+=S,p-=S)}v=Je.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:p,marginRight:y,marginLeft:x},{type:"elem",elem:n,shift:-u,marginRight:y}]},t)}else if(i){p=Math.max(p,h.sub1,i.height-.8*h.xHeight),v=Je.makeVList({positionType:"shift",positionData:p,children:[{type:"elem",elem:i,marginLeft:x,marginRight:y}]},t)}else{if(!n)throw new Error("supsub must have either sup or sub.");u=Math.max(u,o,n.depth+.25*h.xHeight),v=Je.makeVList({positionType:"shift",positionData:-u,children:[{type:"elem",elem:n,marginRight:y}]},t)}var z=wt(c,"right")||"mord";return Je.makeSpan([z],[c,Je.makeSpan(["msupsub"],[v])],t)},mathmlBuilder:function(e,t){var r,n=!1;e.base&&"horizBrace"===e.base.type&&!!e.sup===e.base.isOver&&(n=!0,r=e.base.isOver),!e.base||"op"!==e.base.type&&"operatorname"!==e.base.type||(e.base.parentIsSupSub=!0);var i,o=[_t(e.base,t)];if(e.sub&&o.push(_t(e.sub,t)),e.sup&&o.push(_t(e.sup,t)),n)i=r?"mover":"munder";else if(e.sub)if(e.sup){var a=e.base;i=a&&"op"===a.type&&a.limits&&t.style===T.DISPLAY||a&&"operatorname"===a.type&&a.alwaysHandleSupSub&&(t.style===T.DISPLAY||a.limits)?"munderover":"msubsup"}else{var s=e.base;i=s&&"op"===s.type&&s.limits&&(t.style===T.DISPLAY||s.alwaysHandleSupSub)||s&&"operatorname"===s.type&&s.alwaysHandleSupSub&&(s.limits||t.style===T.DISPLAY)?"munder":"msub"}else{var l=e.base;i=l&&"op"===l.type&&l.limits&&(t.style===T.DISPLAY||l.alwaysHandleSupSub)||l&&"operatorname"===l.type&&l.alwaysHandleSupSub&&(l.limits||t.style===T.DISPLAY)?"mover":"msup"}return new Ot.MathNode(i,o)}}),ct({type:"atom",htmlBuilder:function(e,t){return Je.mathsym(e.text,e.mode,t,["m"+e.family])},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[Et(e.text,e.mode)]);if("bin"===e.family){var n=It(e,t);"bold-italic"===n&&r.setAttribute("mathvariant",n)}else"punct"===e.family?r.setAttribute("separator","true"):"open"!==e.family&&"close"!==e.family||r.setAttribute("stretchy","false");return r}});var wn={mi:"italic",mn:"normal",mtext:"normal"};ct({type:"mathord",htmlBuilder:function(e,t){return Je.makeOrd(e,t,"mathord")},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mi",[Et(e.text,e.mode,t)]),n=It(e,t)||"italic";return n!==wn[r.type]&&r.setAttribute("mathvariant",n),r}}),ct({type:"textord",htmlBuilder:function(e,t){return Je.makeOrd(e,t,"textord")},mathmlBuilder:function(e,t){var r,n=Et(e.text,e.mode,t),i=It(e,t)||"normal";return r="text"===e.mode?new Ot.MathNode("mtext",[n]):/[0-9]/.test(e.text)?new Ot.MathNode("mn",[n]):"\\prime"===e.text?new Ot.MathNode("mo",[n]):new Ot.MathNode("mi",[n]),i!==wn[r.type]&&r.setAttribute("mathvariant",i),r}});var kn={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"},Sn={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};ct({type:"spacing",htmlBuilder:function(e,t){if(Sn.hasOwnProperty(e.text)){var r=Sn[e.text].className||"";if("text"===e.mode){var i=Je.makeOrd(e,t,"textord");return i.classes.push(r),i}return Je.makeSpan(["mspace",r],[Je.mathsym(e.text,e.mode,t)],t)}if(kn.hasOwnProperty(e.text))return Je.makeSpan(["mspace",kn[e.text]],[],t);throw new n('Unknown type of space "'+e.text+'"')},mathmlBuilder:function(e,t){if(!Sn.hasOwnProperty(e.text)){if(kn.hasOwnProperty(e.text))return new Ot.MathNode("mspace");throw new n('Unknown type of space "'+e.text+'"')}return new Ot.MathNode("mtext",[new Ot.TextNode(" ")])}});var zn=function(){var e=new Ot.MathNode("mtd",[]);return e.setAttribute("width","50%"),e};ct({type:"tag",mathmlBuilder:function(e,t){var r=new Ot.MathNode("mtable",[new Ot.MathNode("mtr",[zn(),new Ot.MathNode("mtd",[Nt(e.body,t)]),zn(),new Ot.MathNode("mtd",[Nt(e.tag,t)])])]);return r.setAttribute("width","100%"),r}});var Mn={"\\text":void 0,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"},Tn={"\\textbf":"textbf","\\textmd":"textmd"},An={"\\textit":"textit","\\textup":"textup"},Cn=function(e,t){var r=e.font;return r?Mn[r]?t.withTextFontFamily(Mn[r]):Tn[r]?t.withTextFontWeight(Tn[r]):t.withTextFontShape(An[r]):t};lt({type:"text",names:["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textmd","\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],allowedInArgument:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,i=t[0];return{type:"text",mode:r.mode,body:ut(i),font:n}},htmlBuilder:function(e,t){var r=Cn(e,t),n=vt(e.body,r,!0);return Je.makeSpan(["mord","text"],n,r)},mathmlBuilder:function(e,t){var r=Cn(e,t);return Nt(e.body,r)}}),lt({type:"underline",names:["\\underline"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){return{type:"underline",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=St(e.body,t),n=Je.makeLineSpan("underline-line",t),i=t.fontMetrics().defaultRuleThickness,o=Je.makeVList({positionType:"top",positionData:r.height,children:[{type:"kern",size:i},{type:"elem",elem:n},{type:"kern",size:3*i},{type:"elem",elem:r}]},t);return Je.makeSpan(["mord","underline"],[o],t)},mathmlBuilder:function(e,t){var r=new Ot.MathNode("mo",[new Ot.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Ot.MathNode("munder",[_t(e.body,t),r]);return n.setAttribute("accentunder","true"),n}}),lt({type:"vcenter",names:["\\vcenter"],props:{numArgs:1,argTypes:["original"],allowedInText:!1},handler:function(e,t){return{type:"vcenter",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=St(e.body,t),n=t.fontMetrics().axisHeight,i=.5*(r.height-n-(r.depth+n));return Je.makeVList({positionType:"shift",positionData:i,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){return new Ot.MathNode("mpadded",[_t(e.body,t)],["vcenter"])}}),lt({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:!0},handler:function(e,t,r){throw new n("\\verb ended by end of line instead of matching delimiter")},htmlBuilder:function(e,t){for(var r=On(e),n=[],i=t.havingStyle(t.style.text()),o=0;o<r.length;o++){var a=r[o];"~"===a&&(a="\\textasciitilde"),n.push(Je.makeSymbol(a,"Typewriter-Regular",e.mode,i,["mord","texttt"]))}return Je.makeSpan(["mord","text"].concat(i.sizingClasses(t)),Je.tryCombineChars(n),i)},mathmlBuilder:function(e,t){var r=new Ot.TextNode(On(e)),n=new Ot.MathNode("mtext",[r]);return n.setAttribute("mathvariant","monospace"),n}});var On=function(e){return e.body.replace(/ /g,e.star?"␣":" ")},En=ot,Bn="[ \r\n\t]",In="(\\\\[a-zA-Z@]+)"+Bn+"*",Rn="[̀-ͯ]",Nn=new RegExp(Rn+"+$"),_n="("+Bn+"+)|\\\\(\n|[ \r\t]+\n?)[ \r\t]*|([!-\\[\\]-‧‪-퟿豈-￿]"+Rn+"*|[\ud800-\udbff][\udc00-\udfff]"+Rn+"*|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5|"+In+"|\\\\[^\ud800-\udfff])",qn=function(){function e(e,t){this.input=void 0,this.settings=void 0,this.tokenRegex=void 0,this.catcodes=void 0,this.input=e,this.settings=t,this.tokenRegex=new RegExp(_n,"g"),this.catcodes={"%":14,"~":13}}var t=e.prototype;return t.setCatcode=function(e,t){this.catcodes[e]=t},t.lex=function(){var e=this.input,t=this.tokenRegex.lastIndex;if(t===e.length)return new Fr("EOF",new jr(this,t,t));var r=this.tokenRegex.exec(e);if(null===r||r.index!==t)throw new n("Unexpected character: '"+e[t]+"'",new Fr(e[t],new jr(this,t,t+1)));var i=r[6]||r[3]||(r[2]?"\\ ":" ");if(14===this.catcodes[i]){var o=e.indexOf("\n",this.tokenRegex.lastIndex);return-1===o?(this.tokenRegex.lastIndex=e.length,this.settings.reportNonstrict("commentAtEnd","% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")):this.tokenRegex.lastIndex=o+1,this.lex()}return new Fr(i,new jr(this,t,this.tokenRegex.lastIndex))},e}(),Pn=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.current=void 0,this.builtins=void 0,this.undefStack=void 0,this.current=t,this.builtins=e,this.undefStack=[]}var t=e.prototype;return t.beginGroup=function(){this.undefStack.push({})},t.endGroup=function(){if(0===this.undefStack.length)throw new n("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");var e=this.undefStack.pop();for(var t in e)e.hasOwnProperty(t)&&(null==e[t]?delete this.current[t]:this.current[t]=e[t])},t.endGroups=function(){for(;this.undefStack.length>0;)this.endGroup()},t.has=function(e){return this.current.hasOwnProperty(e)||this.builtins.hasOwnProperty(e)},t.get=function(e){return this.current.hasOwnProperty(e)?this.current[e]:this.builtins[e]},t.set=function(e,t,r){if(void 0===r&&(r=!1),r){for(var n=0;n<this.undefStack.length;n++)delete this.undefStack[n][e];this.undefStack.length>0&&(this.undefStack[this.undefStack.length-1][e]=t)}else{var i=this.undefStack[this.undefStack.length-1];i&&!i.hasOwnProperty(e)&&(i[e]=this.current[e])}null==t?delete this.current[e]:this.current[e]=t},e}(),Dn=Lr;Hr("\\noexpand",(function(e){var t=e.popToken();return e.isExpandable(t.text)&&(t.noexpand=!0,t.treatAsRelax=!0),{tokens:[t],numArgs:0}})),Hr("\\expandafter",(function(e){var t=e.popToken();return e.expandOnce(!0),{tokens:[t],numArgs:0}})),Hr("\\@firstoftwo",(function(e){return{tokens:e.consumeArgs(2)[0],numArgs:0}})),Hr("\\@secondoftwo",(function(e){return{tokens:e.consumeArgs(2)[1],numArgs:0}})),Hr("\\@ifnextchar",(function(e){var t=e.consumeArgs(3);e.consumeSpaces();var r=e.future();return 1===t[0].length&&t[0][0].text===r.text?{tokens:t[1],numArgs:0}:{tokens:t[2],numArgs:0}})),Hr("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}"),Hr("\\TextOrMath",(function(e){var t=e.consumeArgs(2);return"text"===e.mode?{tokens:t[0],numArgs:0}:{tokens:t[1],numArgs:0}}));var Ln={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};Hr("\\char",(function(e){var t,r=e.popToken(),i="";if("'"===r.text)t=8,r=e.popToken();else if('"'===r.text)t=16,r=e.popToken();else if("`"===r.text)if("\\"===(r=e.popToken()).text[0])i=r.text.charCodeAt(1);else{if("EOF"===r.text)throw new n("\\char` missing argument");i=r.text.charCodeAt(0)}else t=10;if(t){if(null==(i=Ln[r.text])||i>=t)throw new n("Invalid base-"+t+" digit "+r.text);for(var o;null!=(o=Ln[e.future().text])&&o<t;)i*=t,i+=o,e.popToken()}return"\\@char{"+i+"}"}));var Hn=function(e,t,r){var i=e.consumeArg().tokens;if(1!==i.length)throw new n("\\newcommand's first argument must be a macro name");var o=i[0].text,a=e.isDefined(o);if(a&&!t)throw new n("\\newcommand{"+o+"} attempting to redefine "+o+"; use \\renewcommand");if(!a&&!r)throw new n("\\renewcommand{"+o+"} when command "+o+" does not yet exist; use \\newcommand");var s=0;if(1===(i=e.consumeArg().tokens).length&&"["===i[0].text){for(var l="",c=e.expandNextToken();"]"!==c.text&&"EOF"!==c.text;)l+=c.text,c=e.expandNextToken();if(!l.match(/^\s*[0-9]+\s*$/))throw new n("Invalid number of arguments: "+l);s=parseInt(l),i=e.consumeArg().tokens}return e.macros.set(o,{tokens:i,numArgs:s}),""};Hr("\\newcommand",(function(e){return Hn(e,!1,!0)})),Hr("\\renewcommand",(function(e){return Hn(e,!0,!1)})),Hr("\\providecommand",(function(e){return Hn(e,!0,!0)})),Hr("\\message",(function(e){var t=e.consumeArgs(1)[0];return console.log(t.reverse().map((function(e){return e.text})).join("")),""})),Hr("\\errmessage",(function(e){var t=e.consumeArgs(1)[0];return console.error(t.reverse().map((function(e){return e.text})).join("")),""})),Hr("\\show",(function(e){var t=e.popToken(),r=t.text;return console.log(t,e.macros.get(r),En[r],ce.math[r],ce.text[r]),""})),Hr("\\bgroup","{"),Hr("\\egroup","}"),Hr("~","\\nobreakspace"),Hr("\\lq","`"),Hr("\\rq","'"),Hr("\\aa","\\r a"),Hr("\\AA","\\r A"),Hr("\\textcopyright","\\html@mathml{\\textcircled{c}}{\\char`©}"),Hr("\\copyright","\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}"),Hr("\\textregistered","\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"),Hr("ℬ","\\mathscr{B}"),Hr("ℰ","\\mathscr{E}"),Hr("ℱ","\\mathscr{F}"),Hr("ℋ","\\mathscr{H}"),Hr("ℐ","\\mathscr{I}"),Hr("ℒ","\\mathscr{L}"),Hr("ℳ","\\mathscr{M}"),Hr("ℛ","\\mathscr{R}"),Hr("ℭ","\\mathfrak{C}"),Hr("ℌ","\\mathfrak{H}"),Hr("ℨ","\\mathfrak{Z}"),Hr("\\Bbbk","\\Bbb{k}"),Hr("·","\\cdotp"),Hr("\\llap","\\mathllap{\\textrm{#1}}"),Hr("\\rlap","\\mathrlap{\\textrm{#1}}"),Hr("\\clap","\\mathclap{\\textrm{#1}}"),Hr("\\mathstrut","\\vphantom{(}"),Hr("\\underbar","\\underline{\\text{#1}}"),Hr("\\not",'\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'),Hr("\\neq","\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}"),Hr("\\ne","\\neq"),Hr("≠","\\neq"),Hr("\\notin","\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}"),Hr("∉","\\notin"),Hr("≘","\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}"),Hr("≙","\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}"),Hr("≚","\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}"),Hr("≛","\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}"),Hr("≝","\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}"),Hr("≞","\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}"),Hr("≟","\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}"),Hr("⟂","\\perp"),Hr("‼","\\mathclose{!\\mkern-0.8mu!}"),Hr("∌","\\notni"),Hr("⌜","\\ulcorner"),Hr("⌝","\\urcorner"),Hr("⌞","\\llcorner"),Hr("⌟","\\lrcorner"),Hr("©","\\copyright"),Hr("®","\\textregistered"),Hr("️","\\textregistered"),Hr("\\ulcorner",'\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}'),Hr("\\urcorner",'\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}'),Hr("\\llcorner",'\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}'),Hr("\\lrcorner",'\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}'),Hr("\\vdots","\\mathord{\\varvdots\\rule{0pt}{15pt}}"),Hr("⋮","\\vdots"),Hr("\\varGamma","\\mathit{\\Gamma}"),Hr("\\varDelta","\\mathit{\\Delta}"),Hr("\\varTheta","\\mathit{\\Theta}"),Hr("\\varLambda","\\mathit{\\Lambda}"),Hr("\\varXi","\\mathit{\\Xi}"),Hr("\\varPi","\\mathit{\\Pi}"),Hr("\\varSigma","\\mathit{\\Sigma}"),Hr("\\varUpsilon","\\mathit{\\Upsilon}"),Hr("\\varPhi","\\mathit{\\Phi}"),Hr("\\varPsi","\\mathit{\\Psi}"),Hr("\\varOmega","\\mathit{\\Omega}"),Hr("\\substack","\\begin{subarray}{c}#1\\end{subarray}"),Hr("\\colon","\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax"),Hr("\\boxed","\\fbox{$\\displaystyle{#1}$}"),Hr("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;"),Hr("\\implies","\\DOTSB\\;\\Longrightarrow\\;"),Hr("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");var jn={",":"\\dotsc","\\not":"\\dotsb","+":"\\dotsb","=":"\\dotsb","<":"\\dotsb",">":"\\dotsb","-":"\\dotsb","*":"\\dotsb",":":"\\dotsb","\\DOTSB":"\\dotsb","\\coprod":"\\dotsb","\\bigvee":"\\dotsb","\\bigwedge":"\\dotsb","\\biguplus":"\\dotsb","\\bigcap":"\\dotsb","\\bigcup":"\\dotsb","\\prod":"\\dotsb","\\sum":"\\dotsb","\\bigotimes":"\\dotsb","\\bigoplus":"\\dotsb","\\bigodot":"\\dotsb","\\bigsqcup":"\\dotsb","\\And":"\\dotsb","\\longrightarrow":"\\dotsb","\\Longrightarrow":"\\dotsb","\\longleftarrow":"\\dotsb","\\Longleftarrow":"\\dotsb","\\longleftrightarrow":"\\dotsb","\\Longleftrightarrow":"\\dotsb","\\mapsto":"\\dotsb","\\longmapsto":"\\dotsb","\\hookrightarrow":"\\dotsb","\\doteq":"\\dotsb","\\mathbin":"\\dotsb","\\mathrel":"\\dotsb","\\relbar":"\\dotsb","\\Relbar":"\\dotsb","\\xrightarrow":"\\dotsb","\\xleftarrow":"\\dotsb","\\DOTSI":"\\dotsi","\\int":"\\dotsi","\\oint":"\\dotsi","\\iint":"\\dotsi","\\iiint":"\\dotsi","\\iiiint":"\\dotsi","\\idotsint":"\\dotsi","\\DOTSX":"\\dotsx"};Hr("\\dots",(function(e){var t="\\dotso",r=e.expandAfterFuture().text;return r in jn?t=jn[r]:("\\not"===r.slice(0,4)||r in ce.math&&l(["bin","rel"],ce.math[r].group))&&(t="\\dotsb"),t}));var Fn={")":!0,"]":!0,"\\rbrack":!0,"\\}":!0,"\\rbrace":!0,"\\rangle":!0,"\\rceil":!0,"\\rfloor":!0,"\\rgroup":!0,"\\rmoustache":!0,"\\right":!0,"\\bigr":!0,"\\biggr":!0,"\\Bigr":!0,"\\Biggr":!0,$:!0,";":!0,".":!0,",":!0};Hr("\\dotso",(function(e){return e.future().text in Fn?"\\ldots\\,":"\\ldots"})),Hr("\\dotsc",(function(e){var t=e.future().text;return t in Fn&&","!==t?"\\ldots\\,":"\\ldots"})),Hr("\\cdots",(function(e){return e.future().text in Fn?"\\@cdots\\,":"\\@cdots"})),Hr("\\dotsb","\\cdots"),Hr("\\dotsm","\\cdots"),Hr("\\dotsi","\\!\\cdots"),Hr("\\dotsx","\\ldots\\,"),Hr("\\DOTSI","\\relax"),Hr("\\DOTSB","\\relax"),Hr("\\DOTSX","\\relax"),Hr("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"),Hr("\\,","\\tmspace+{3mu}{.1667em}"),Hr("\\thinspace","\\,"),Hr("\\>","\\mskip{4mu}"),Hr("\\:","\\tmspace+{4mu}{.2222em}"),Hr("\\medspace","\\:"),Hr("\\;","\\tmspace+{5mu}{.2777em}"),Hr("\\thickspace","\\;"),Hr("\\!","\\tmspace-{3mu}{.1667em}"),Hr("\\negthinspace","\\!"),Hr("\\negmedspace","\\tmspace-{4mu}{.2222em}"),Hr("\\negthickspace","\\tmspace-{5mu}{.277em}"),Hr("\\enspace","\\kern.5em "),Hr("\\enskip","\\hskip.5em\\relax"),Hr("\\quad","\\hskip1em\\relax"),Hr("\\qquad","\\hskip2em\\relax"),Hr("\\tag","\\@ifstar\\tag@literal\\tag@paren"),Hr("\\tag@paren","\\tag@literal{({#1})}"),Hr("\\tag@literal",(function(e){if(e.macros.get("\\df@tag"))throw new n("Multiple \\tag");return"\\gdef\\df@tag{\\text{#1}}"})),Hr("\\bmod","\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}"),Hr("\\pod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)"),Hr("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}"),Hr("\\mod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1"),Hr("\\newline","\\\\\\relax"),Hr("\\TeX","\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");var $n=U(I["Main-Regular"]["T".charCodeAt(0)][1]-.7*I["Main-Regular"]["A".charCodeAt(0)][1]);Hr("\\LaTeX","\\textrm{\\html@mathml{L\\kern-.36em\\raisebox{"+$n+"}{\\scriptstyle A}\\kern-.15em\\TeX}{LaTeX}}"),Hr("\\KaTeX","\\textrm{\\html@mathml{K\\kern-.17em\\raisebox{"+$n+"}{\\scriptstyle A}\\kern-.15em\\TeX}{KaTeX}}"),Hr("\\hspace","\\@ifstar\\@hspacer\\@hspace"),Hr("\\@hspace","\\hskip #1\\relax"),Hr("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax"),Hr("\\ordinarycolon",":"),Hr("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}"),Hr("\\dblcolon",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}'),Hr("\\coloneqq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}'),Hr("\\Coloneqq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}'),Hr("\\coloneq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}'),Hr("\\Coloneq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}'),Hr("\\eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}'),Hr("\\Eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}'),Hr("\\eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}'),Hr("\\Eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}'),Hr("\\colonapprox",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}'),Hr("\\Colonapprox",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}'),Hr("\\colonsim",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}'),Hr("\\Colonsim",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}'),Hr("∷","\\dblcolon"),Hr("∹","\\eqcolon"),Hr("≔","\\coloneqq"),Hr("≕","\\eqqcolon"),Hr("⩴","\\Coloneqq"),Hr("\\ratio","\\vcentcolon"),Hr("\\coloncolon","\\dblcolon"),Hr("\\colonequals","\\coloneqq"),Hr("\\coloncolonequals","\\Coloneqq"),Hr("\\equalscolon","\\eqqcolon"),Hr("\\equalscoloncolon","\\Eqqcolon"),Hr("\\colonminus","\\coloneq"),Hr("\\coloncolonminus","\\Coloneq"),Hr("\\minuscolon","\\eqcolon"),Hr("\\minuscoloncolon","\\Eqcolon"),Hr("\\coloncolonapprox","\\Colonapprox"),Hr("\\coloncolonsim","\\Colonsim"),Hr("\\simcolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),Hr("\\simcoloncolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}"),Hr("\\approxcolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),Hr("\\approxcoloncolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"),Hr("\\notni","\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}"),Hr("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}"),Hr("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}"),Hr("\\injlim","\\DOTSB\\operatorname*{inj\\,lim}"),Hr("\\projlim","\\DOTSB\\operatorname*{proj\\,lim}"),Hr("\\varlimsup","\\DOTSB\\operatorname*{\\overline{lim}}"),Hr("\\varliminf","\\DOTSB\\operatorname*{\\underline{lim}}"),Hr("\\varinjlim","\\DOTSB\\operatorname*{\\underrightarrow{lim}}"),Hr("\\varprojlim","\\DOTSB\\operatorname*{\\underleftarrow{lim}}"),Hr("\\gvertneqq","\\html@mathml{\\@gvertneqq}{≩}"),Hr("\\lvertneqq","\\html@mathml{\\@lvertneqq}{≨}"),Hr("\\ngeqq","\\html@mathml{\\@ngeqq}{≱}"),Hr("\\ngeqslant","\\html@mathml{\\@ngeqslant}{≱}"),Hr("\\nleqq","\\html@mathml{\\@nleqq}{≰}"),Hr("\\nleqslant","\\html@mathml{\\@nleqslant}{≰}"),Hr("\\nshortmid","\\html@mathml{\\@nshortmid}{∤}"),Hr("\\nshortparallel","\\html@mathml{\\@nshortparallel}{∦}"),Hr("\\nsubseteqq","\\html@mathml{\\@nsubseteqq}{⊈}"),Hr("\\nsupseteqq","\\html@mathml{\\@nsupseteqq}{⊉}"),Hr("\\varsubsetneq","\\html@mathml{\\@varsubsetneq}{⊊}"),Hr("\\varsubsetneqq","\\html@mathml{\\@varsubsetneqq}{⫋}"),Hr("\\varsupsetneq","\\html@mathml{\\@varsupsetneq}{⊋}"),Hr("\\varsupsetneqq","\\html@mathml{\\@varsupsetneqq}{⫌}"),Hr("\\imath","\\html@mathml{\\@imath}{ı}"),Hr("\\jmath","\\html@mathml{\\@jmath}{ȷ}"),Hr("\\llbracket","\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}"),Hr("\\rrbracket","\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}"),Hr("⟦","\\llbracket"),Hr("⟧","\\rrbracket"),Hr("\\lBrace","\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}"),Hr("\\rBrace","\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}"),Hr("⦃","\\lBrace"),Hr("⦄","\\rBrace"),Hr("\\minuso","\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}"),Hr("⦵","\\minuso"),Hr("\\darr","\\downarrow"),Hr("\\dArr","\\Downarrow"),Hr("\\Darr","\\Downarrow"),Hr("\\lang","\\langle"),Hr("\\rang","\\rangle"),Hr("\\uarr","\\uparrow"),Hr("\\uArr","\\Uparrow"),Hr("\\Uarr","\\Uparrow"),Hr("\\N","\\mathbb{N}"),Hr("\\R","\\mathbb{R}"),Hr("\\Z","\\mathbb{Z}"),Hr("\\alef","\\aleph"),Hr("\\alefsym","\\aleph"),Hr("\\Alpha","\\mathrm{A}"),Hr("\\Beta","\\mathrm{B}"),Hr("\\bull","\\bullet"),Hr("\\Chi","\\mathrm{X}"),Hr("\\clubs","\\clubsuit"),Hr("\\cnums","\\mathbb{C}"),Hr("\\Complex","\\mathbb{C}"),Hr("\\Dagger","\\ddagger"),Hr("\\diamonds","\\diamondsuit"),Hr("\\empty","\\emptyset"),Hr("\\Epsilon","\\mathrm{E}"),Hr("\\Eta","\\mathrm{H}"),Hr("\\exist","\\exists"),Hr("\\harr","\\leftrightarrow"),Hr("\\hArr","\\Leftrightarrow"),Hr("\\Harr","\\Leftrightarrow"),Hr("\\hearts","\\heartsuit"),Hr("\\image","\\Im"),Hr("\\infin","\\infty"),Hr("\\Iota","\\mathrm{I}"),Hr("\\isin","\\in"),Hr("\\Kappa","\\mathrm{K}"),Hr("\\larr","\\leftarrow"),Hr("\\lArr","\\Leftarrow"),Hr("\\Larr","\\Leftarrow"),Hr("\\lrarr","\\leftrightarrow"),Hr("\\lrArr","\\Leftrightarrow"),Hr("\\Lrarr","\\Leftrightarrow"),Hr("\\Mu","\\mathrm{M}"),Hr("\\natnums","\\mathbb{N}"),Hr("\\Nu","\\mathrm{N}"),Hr("\\Omicron","\\mathrm{O}"),Hr("\\plusmn","\\pm"),Hr("\\rarr","\\rightarrow"),Hr("\\rArr","\\Rightarrow"),Hr("\\Rarr","\\Rightarrow"),Hr("\\real","\\Re"),Hr("\\reals","\\mathbb{R}"),Hr("\\Reals","\\mathbb{R}"),Hr("\\Rho","\\mathrm{P}"),Hr("\\sdot","\\cdot"),Hr("\\sect","\\S"),Hr("\\spades","\\spadesuit"),Hr("\\sub","\\subset"),Hr("\\sube","\\subseteq"),Hr("\\supe","\\supseteq"),Hr("\\Tau","\\mathrm{T}"),Hr("\\thetasym","\\vartheta"),Hr("\\weierp","\\wp"),Hr("\\Zeta","\\mathrm{Z}"),Hr("\\argmin","\\DOTSB\\operatorname*{arg\\,min}"),Hr("\\argmax","\\DOTSB\\operatorname*{arg\\,max}"),Hr("\\plim","\\DOTSB\\mathop{\\operatorname{plim}}\\limits"),Hr("\\bra","\\mathinner{\\langle{#1}|}"),Hr("\\ket","\\mathinner{|{#1}\\rangle}"),Hr("\\braket","\\mathinner{\\langle{#1}\\rangle}"),Hr("\\Bra","\\left\\langle#1\\right|"),Hr("\\Ket","\\left|#1\\right\\rangle");var Vn=function(e){return function(t){var r=t.consumeArg().tokens,n=t.consumeArg().tokens,i=t.consumeArg().tokens,o=t.consumeArg().tokens,a=t.macros.get("|"),s=t.macros.get("\\|");t.macros.beginGroup();var l=function(t){return function(r){e&&(r.macros.set("|",a),i.length&&r.macros.set("\\|",s));var o=t;return!t&&i.length&&"|"===r.future().text&&(r.popToken(),o=!0),{tokens:o?i:n,numArgs:0}}};t.macros.set("|",l(!1)),i.length&&t.macros.set("\\|",l(!0));var c=t.consumeArg().tokens,h=t.expandTokens([].concat(o,c,r));return t.macros.endGroup(),{tokens:h.reverse(),numArgs:0}}};Hr("\\bra@ket",Vn(!1)),Hr("\\bra@set",Vn(!0)),Hr("\\Braket","\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}"),Hr("\\Set","\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}"),Hr("\\set","\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}"),Hr("\\angln","{\\angl n}"),Hr("\\blue","\\textcolor{##6495ed}{#1}"),Hr("\\orange","\\textcolor{##ffa500}{#1}"),Hr("\\pink","\\textcolor{##ff00af}{#1}"),Hr("\\red","\\textcolor{##df0030}{#1}"),Hr("\\green","\\textcolor{##28ae7b}{#1}"),Hr("\\gray","\\textcolor{gray}{#1}"),Hr("\\purple","\\textcolor{##9d38bd}{#1}"),Hr("\\blueA","\\textcolor{##ccfaff}{#1}"),Hr("\\blueB","\\textcolor{##80f6ff}{#1}"),Hr("\\blueC","\\textcolor{##63d9ea}{#1}"),Hr("\\blueD","\\textcolor{##11accd}{#1}"),Hr("\\blueE","\\textcolor{##0c7f99}{#1}"),Hr("\\tealA","\\textcolor{##94fff5}{#1}"),Hr("\\tealB","\\textcolor{##26edd5}{#1}"),Hr("\\tealC","\\textcolor{##01d1c1}{#1}"),Hr("\\tealD","\\textcolor{##01a995}{#1}"),Hr("\\tealE","\\textcolor{##208170}{#1}"),Hr("\\greenA","\\textcolor{##b6ffb0}{#1}"),Hr("\\greenB","\\textcolor{##8af281}{#1}"),Hr("\\greenC","\\textcolor{##74cf70}{#1}"),Hr("\\greenD","\\textcolor{##1fab54}{#1}"),Hr("\\greenE","\\textcolor{##0d923f}{#1}"),Hr("\\goldA","\\textcolor{##ffd0a9}{#1}"),Hr("\\goldB","\\textcolor{##ffbb71}{#1}"),Hr("\\goldC","\\textcolor{##ff9c39}{#1}"),Hr("\\goldD","\\textcolor{##e07d10}{#1}"),Hr("\\goldE","\\textcolor{##a75a05}{#1}"),Hr("\\redA","\\textcolor{##fca9a9}{#1}"),Hr("\\redB","\\textcolor{##ff8482}{#1}"),Hr("\\redC","\\textcolor{##f9685d}{#1}"),Hr("\\redD","\\textcolor{##e84d39}{#1}"),Hr("\\redE","\\textcolor{##bc2612}{#1}"),Hr("\\maroonA","\\textcolor{##ffbde0}{#1}"),Hr("\\maroonB","\\textcolor{##ff92c6}{#1}"),Hr("\\maroonC","\\textcolor{##ed5fa6}{#1}"),Hr("\\maroonD","\\textcolor{##ca337c}{#1}"),Hr("\\maroonE","\\textcolor{##9e034e}{#1}"),Hr("\\purpleA","\\textcolor{##ddd7ff}{#1}"),Hr("\\purpleB","\\textcolor{##c6b9fc}{#1}"),Hr("\\purpleC","\\textcolor{##aa87ff}{#1}"),Hr("\\purpleD","\\textcolor{##7854ab}{#1}"),Hr("\\purpleE","\\textcolor{##543b78}{#1}"),Hr("\\mintA","\\textcolor{##f5f9e8}{#1}"),Hr("\\mintB","\\textcolor{##edf2df}{#1}"),Hr("\\mintC","\\textcolor{##e0e5cc}{#1}"),Hr("\\grayA","\\textcolor{##f6f7f7}{#1}"),Hr("\\grayB","\\textcolor{##f0f1f2}{#1}"),Hr("\\grayC","\\textcolor{##e3e5e6}{#1}"),Hr("\\grayD","\\textcolor{##d6d8da}{#1}"),Hr("\\grayE","\\textcolor{##babec2}{#1}"),Hr("\\grayF","\\textcolor{##888d93}{#1}"),Hr("\\grayG","\\textcolor{##626569}{#1}"),Hr("\\grayH","\\textcolor{##3b3e40}{#1}"),Hr("\\grayI","\\textcolor{##21242c}{#1}"),Hr("\\kaBlue","\\textcolor{##314453}{#1}"),Hr("\\kaGreen","\\textcolor{##71B307}{#1}");var Gn={"^":!0,_:!0,"\\limits":!0,"\\nolimits":!0},Un=function(){function e(e,t,r){this.settings=void 0,this.expansionCount=void 0,this.lexer=void 0,this.macros=void 0,this.stack=void 0,this.mode=void 0,this.settings=t,this.expansionCount=0,this.feed(e),this.macros=new Pn(Dn,t.macros),this.mode=r,this.stack=[]}var t=e.prototype;return t.feed=function(e){this.lexer=new qn(e,this.settings)},t.switchMode=function(e){this.mode=e},t.beginGroup=function(){this.macros.beginGroup()},t.endGroup=function(){this.macros.endGroup()},t.endGroups=function(){this.macros.endGroups()},t.future=function(){return 0===this.stack.length&&this.pushToken(this.lexer.lex()),this.stack[this.stack.length-1]},t.popToken=function(){return this.future(),this.stack.pop()},t.pushToken=function(e){this.stack.push(e)},t.pushTokens=function(e){var t;(t=this.stack).push.apply(t,e)},t.scanArgument=function(e){var t,r,n;if(e){if(this.consumeSpaces(),"["!==this.future().text)return null;t=this.popToken();var i=this.consumeArg(["]"]);n=i.tokens,r=i.end}else{var o=this.consumeArg();n=o.tokens,t=o.start,r=o.end}return this.pushToken(new Fr("EOF",r.loc)),this.pushTokens(n),t.range(r,"")},t.consumeSpaces=function(){for(;" "===this.future().text;)this.stack.pop()},t.consumeArg=function(e){var t=[],r=e&&e.length>0;r||this.consumeSpaces();var i,o=this.future(),a=0,s=0;do{if(i=this.popToken(),t.push(i),"{"===i.text)++a;else if("}"===i.text){if(-1==--a)throw new n("Extra }",i)}else if("EOF"===i.text)throw new n("Unexpected end of input in a macro argument, expected '"+(e&&r?e[s]:"}")+"'",i);if(e&&r)if((0===a||1===a&&"{"===e[s])&&i.text===e[s]){if(++s===e.length){t.splice(-s,s);break}}else s=0}while(0!==a||r);return"{"===o.text&&"}"===t[t.length-1].text&&(t.pop(),t.shift()),t.reverse(),{tokens:t,start:o,end:i}},t.consumeArgs=function(e,t){if(t){if(t.length!==e+1)throw new n("The length of delimiters doesn't match the number of args!");for(var r=t[0],i=0;i<r.length;i++){var o=this.popToken();if(r[i]!==o.text)throw new n("Use of the macro doesn't match its definition",o)}}for(var a=[],s=0;s<e;s++)a.push(this.consumeArg(t&&t[s+1]).tokens);return a},t.expandOnce=function(e){var t=this.popToken(),r=t.text,i=t.noexpand?null:this._getExpansion(r);if(null==i||e&&i.unexpandable){if(e&&null==i&&"\\"===r[0]&&!this.isDefined(r))throw new n("Undefined control sequence: "+r);return this.pushToken(t),!1}if(this.expansionCount++,this.expansionCount>this.settings.maxExpand)throw new n("Too many expansions: infinite loop or need to increase maxExpand setting");var o=i.tokens,a=this.consumeArgs(i.numArgs,i.delimiters);if(i.numArgs)for(var s=(o=o.slice()).length-1;s>=0;--s){var l=o[s];if("#"===l.text){if(0===s)throw new n("Incomplete placeholder at end of macro body",l);if("#"===(l=o[--s]).text)o.splice(s+1,1);else{if(!/^[1-9]$/.test(l.text))throw new n("Not a valid argument number",l);var c;(c=o).splice.apply(c,[s,2].concat(a[+l.text-1]))}}}return this.pushTokens(o),o.length},t.expandAfterFuture=function(){return this.expandOnce(),this.future()},t.expandNextToken=function(){for(;;)if(!1===this.expandOnce()){var e=this.stack.pop();return e.treatAsRelax&&(e.text="\\relax"),e}throw new Error},t.expandMacro=function(e){return this.macros.has(e)?this.expandTokens([new Fr(e)]):void 0},t.expandTokens=function(e){var t=[],r=this.stack.length;for(this.pushTokens(e);this.stack.length>r;)if(!1===this.expandOnce(!0)){var n=this.stack.pop();n.treatAsRelax&&(n.noexpand=!1,n.treatAsRelax=!1),t.push(n)}return t},t.expandMacroAsText=function(e){var t=this.expandMacro(e);return t?t.map((function(e){return e.text})).join(""):t},t._getExpansion=function(e){var t=this.macros.get(e);if(null==t)return t;if(1===e.length){var r=this.lexer.catcodes[e];if(null!=r&&13!==r)return}var n="function"==typeof t?t(this):t;if("string"==typeof n){var i=0;if(-1!==n.indexOf("#"))for(var o=n.replace(/##/g,"");-1!==o.indexOf("#"+(i+1));)++i;for(var a=new qn(n,this.settings),s=[],l=a.lex();"EOF"!==l.text;)s.push(l),l=a.lex();return s.reverse(),{tokens:s,numArgs:i}}return n},t.isDefined=function(e){return this.macros.has(e)||En.hasOwnProperty(e)||ce.math.hasOwnProperty(e)||ce.text.hasOwnProperty(e)||Gn.hasOwnProperty(e)},t.isExpandable=function(e){var t=this.macros.get(e);return null!=t?"string"==typeof t||"function"==typeof t||!t.unexpandable:En.hasOwnProperty(e)&&!En[e].primitive},e}(),Wn=/^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/,Xn=Object.freeze({"₊":"+","₋":"-","₌":"=","₍":"(","₎":")","₀":"0","₁":"1","₂":"2","₃":"3","₄":"4","₅":"5","₆":"6","₇":"7","₈":"8","₉":"9",ₐ:"a",ₑ:"e",ₕ:"h",ᵢ:"i",ⱼ:"j",ₖ:"k",ₗ:"l",ₘ:"m",ₙ:"n",ₒ:"o",ₚ:"p",ᵣ:"r",ₛ:"s",ₜ:"t",ᵤ:"u",ᵥ:"v",ₓ:"x",ᵦ:"β",ᵧ:"γ",ᵨ:"ρ",ᵩ:"ϕ",ᵪ:"χ","⁺":"+","⁻":"-","⁼":"=","⁽":"(","⁾":")","⁰":"0","¹":"1","²":"2","³":"3","⁴":"4","⁵":"5","⁶":"6","⁷":"7","⁸":"8","⁹":"9",ᴬ:"A",ᴮ:"B",ᴰ:"D",ᴱ:"E",ᴳ:"G",ᴴ:"H",ᴵ:"I",ᴶ:"J",ᴷ:"K",ᴸ:"L",ᴹ:"M",ᴺ:"N",ᴼ:"O",ᴾ:"P",ᴿ:"R",ᵀ:"T",ᵁ:"U",ⱽ:"V",ᵂ:"W",ᵃ:"a",ᵇ:"b",ᶜ:"c",ᵈ:"d",ᵉ:"e",ᶠ:"f",ᵍ:"g",ʰ:"h",ⁱ:"i",ʲ:"j",ᵏ:"k",ˡ:"l",ᵐ:"m",ⁿ:"n",ᵒ:"o",ᵖ:"p",ʳ:"r",ˢ:"s",ᵗ:"t",ᵘ:"u",ᵛ:"v",ʷ:"w",ˣ:"x",ʸ:"y",ᶻ:"z",ᵝ:"β",ᵞ:"γ",ᵟ:"δ",ᵠ:"ϕ",ᵡ:"χ",ᶿ:"θ"}),Yn={"́":{text:"\\'",math:"\\acute"},"̀":{text:"\\`",math:"\\grave"},"̈":{text:'\\"',math:"\\ddot"},"̃":{text:"\\~",math:"\\tilde"},"̄":{text:"\\=",math:"\\bar"},"̆":{text:"\\u",math:"\\breve"},"̌":{text:"\\v",math:"\\check"},"̂":{text:"\\^",math:"\\hat"},"̇":{text:"\\.",math:"\\dot"},"̊":{text:"\\r",math:"\\mathring"},"̋":{text:"\\H"},"̧":{text:"\\c"}},Zn={á:"á",à:"à",ä:"ä",ǟ:"ǟ",ã:"ã",ā:"ā",ă:"ă",ắ:"ắ",ằ:"ằ",ẵ:"ẵ",ǎ:"ǎ",â:"â",ấ:"ấ",ầ:"ầ",ẫ:"ẫ",ȧ:"ȧ",ǡ:"ǡ",å:"å",ǻ:"ǻ",ḃ:"ḃ",ć:"ć",ḉ:"ḉ",č:"č",ĉ:"ĉ",ċ:"ċ",ç:"ç",ď:"ď",ḋ:"ḋ",ḑ:"ḑ",é:"é",è:"è",ë:"ë",ẽ:"ẽ",ē:"ē",ḗ:"ḗ",ḕ:"ḕ",ĕ:"ĕ",ḝ:"ḝ",ě:"ě",ê:"ê",ế:"ế",ề:"ề",ễ:"ễ",ė:"ė",ȩ:"ȩ",ḟ:"ḟ",ǵ:"ǵ",ḡ:"ḡ",ğ:"ğ",ǧ:"ǧ",ĝ:"ĝ",ġ:"ġ",ģ:"ģ",ḧ:"ḧ",ȟ:"ȟ",ĥ:"ĥ",ḣ:"ḣ",ḩ:"ḩ",í:"í",ì:"ì",ï:"ï",ḯ:"ḯ",ĩ:"ĩ",ī:"ī",ĭ:"ĭ",ǐ:"ǐ",î:"î",ǰ:"ǰ",ĵ:"ĵ",ḱ:"ḱ",ǩ:"ǩ",ķ:"ķ",ĺ:"ĺ",ľ:"ľ",ļ:"ļ",ḿ:"ḿ",ṁ:"ṁ",ń:"ń",ǹ:"ǹ",ñ:"ñ",ň:"ň",ṅ:"ṅ",ņ:"ņ",ó:"ó",ò:"ò",ö:"ö",ȫ:"ȫ",õ:"õ",ṍ:"ṍ",ṏ:"ṏ",ȭ:"ȭ",ō:"ō",ṓ:"ṓ",ṑ:"ṑ",ŏ:"ŏ",ǒ:"ǒ",ô:"ô",ố:"ố",ồ:"ồ",ỗ:"ỗ",ȯ:"ȯ",ȱ:"ȱ",ő:"ő",ṕ:"ṕ",ṗ:"ṗ",ŕ:"ŕ",ř:"ř",ṙ:"ṙ",ŗ:"ŗ",ś:"ś",ṥ:"ṥ",š:"š",ṧ:"ṧ",ŝ:"ŝ",ṡ:"ṡ",ş:"ş",ẗ:"ẗ",ť:"ť",ṫ:"ṫ",ţ:"ţ",ú:"ú",ù:"ù",ü:"ü",ǘ:"ǘ",ǜ:"ǜ",ǖ:"ǖ",ǚ:"ǚ",ũ:"ũ",ṹ:"ṹ",ū:"ū",ṻ:"ṻ",ŭ:"ŭ",ǔ:"ǔ",û:"û",ů:"ů",ű:"ű",ṽ:"ṽ",ẃ:"ẃ",ẁ:"ẁ",ẅ:"ẅ",ŵ:"ŵ",ẇ:"ẇ",ẘ:"ẘ",ẍ:"ẍ",ẋ:"ẋ",ý:"ý",ỳ:"ỳ",ÿ:"ÿ",ỹ:"ỹ",ȳ:"ȳ",ŷ:"ŷ",ẏ:"ẏ",ẙ:"ẙ",ź:"ź",ž:"ž",ẑ:"ẑ",ż:"ż",Á:"Á",À:"À",Ä:"Ä",Ǟ:"Ǟ",Ã:"Ã",Ā:"Ā",Ă:"Ă",Ắ:"Ắ",Ằ:"Ằ",Ẵ:"Ẵ",Ǎ:"Ǎ",Â:"Â",Ấ:"Ấ",Ầ:"Ầ",Ẫ:"Ẫ",Ȧ:"Ȧ",Ǡ:"Ǡ",Å:"Å",Ǻ:"Ǻ",Ḃ:"Ḃ",Ć:"Ć",Ḉ:"Ḉ",Č:"Č",Ĉ:"Ĉ",Ċ:"Ċ",Ç:"Ç",Ď:"Ď",Ḋ:"Ḋ",Ḑ:"Ḑ",É:"É",È:"È",Ë:"Ë",Ẽ:"Ẽ",Ē:"Ē",Ḗ:"Ḗ",Ḕ:"Ḕ",Ĕ:"Ĕ",Ḝ:"Ḝ",Ě:"Ě",Ê:"Ê",Ế:"Ế",Ề:"Ề",Ễ:"Ễ",Ė:"Ė",Ȩ:"Ȩ",Ḟ:"Ḟ",Ǵ:"Ǵ",Ḡ:"Ḡ",Ğ:"Ğ",Ǧ:"Ǧ",Ĝ:"Ĝ",Ġ:"Ġ",Ģ:"Ģ",Ḧ:"Ḧ",Ȟ:"Ȟ",Ĥ:"Ĥ",Ḣ:"Ḣ",Ḩ:"Ḩ",Í:"Í",Ì:"Ì",Ï:"Ï",Ḯ:"Ḯ",Ĩ:"Ĩ",Ī:"Ī",Ĭ:"Ĭ",Ǐ:"Ǐ",Î:"Î",İ:"İ",Ĵ:"Ĵ",Ḱ:"Ḱ",Ǩ:"Ǩ",Ķ:"Ķ",Ĺ:"Ĺ",Ľ:"Ľ",Ļ:"Ļ",Ḿ:"Ḿ",Ṁ:"Ṁ",Ń:"Ń",Ǹ:"Ǹ",Ñ:"Ñ",Ň:"Ň",Ṅ:"Ṅ",Ņ:"Ņ",Ó:"Ó",Ò:"Ò",Ö:"Ö",Ȫ:"Ȫ",Õ:"Õ",Ṍ:"Ṍ",Ṏ:"Ṏ",Ȭ:"Ȭ",Ō:"Ō",Ṓ:"Ṓ",Ṑ:"Ṑ",Ŏ:"Ŏ",Ǒ:"Ǒ",Ô:"Ô",Ố:"Ố",Ồ:"Ồ",Ỗ:"Ỗ",Ȯ:"Ȯ",Ȱ:"Ȱ",Ő:"Ő",Ṕ:"Ṕ",Ṗ:"Ṗ",Ŕ:"Ŕ",Ř:"Ř",Ṙ:"Ṙ",Ŗ:"Ŗ",Ś:"Ś",Ṥ:"Ṥ",Š:"Š",Ṧ:"Ṧ",Ŝ:"Ŝ",Ṡ:"Ṡ",Ş:"Ş",Ť:"Ť",Ṫ:"Ṫ",Ţ:"Ţ",Ú:"Ú",Ù:"Ù",Ü:"Ü",Ǘ:"Ǘ",Ǜ:"Ǜ",Ǖ:"Ǖ",Ǚ:"Ǚ",Ũ:"Ũ",Ṹ:"Ṹ",Ū:"Ū",Ṻ:"Ṻ",Ŭ:"Ŭ",Ǔ:"Ǔ",Û:"Û",Ů:"Ů",Ű:"Ű",Ṽ:"Ṽ",Ẃ:"Ẃ",Ẁ:"Ẁ",Ẅ:"Ẅ",Ŵ:"Ŵ",Ẇ:"Ẇ",Ẍ:"Ẍ",Ẋ:"Ẋ",Ý:"Ý",Ỳ:"Ỳ",Ÿ:"Ÿ",Ỹ:"Ỹ",Ȳ:"Ȳ",Ŷ:"Ŷ",Ẏ:"Ẏ",Ź:"Ź",Ž:"Ž",Ẑ:"Ẑ",Ż:"Ż",ά:"ά",ὰ:"ὰ",ᾱ:"ᾱ",ᾰ:"ᾰ",έ:"έ",ὲ:"ὲ",ή:"ή",ὴ:"ὴ",ί:"ί",ὶ:"ὶ",ϊ:"ϊ",ΐ:"ΐ",ῒ:"ῒ",ῑ:"ῑ",ῐ:"ῐ",ό:"ό",ὸ:"ὸ",ύ:"ύ",ὺ:"ὺ",ϋ:"ϋ",ΰ:"ΰ",ῢ:"ῢ",ῡ:"ῡ",ῠ:"ῠ",ώ:"ώ",ὼ:"ὼ",Ύ:"Ύ",Ὺ:"Ὺ",Ϋ:"Ϋ",Ῡ:"Ῡ",Ῠ:"Ῠ",Ώ:"Ώ",Ὼ:"Ὼ"},Kn=function(){function e(e,t){this.mode=void 0,this.gullet=void 0,this.settings=void 0,this.leftrightDepth=void 0,this.nextToken=void 0,this.mode="math",this.gullet=new Un(e,t,this.mode),this.settings=t,this.leftrightDepth=0}var t=e.prototype;return t.expect=function(e,t){if(void 0===t&&(t=!0),this.fetch().text!==e)throw new n("Expected '"+e+"', got '"+this.fetch().text+"'",this.fetch());t&&this.consume()},t.consume=function(){this.nextToken=null},t.fetch=function(){return null==this.nextToken&&(this.nextToken=this.gullet.expandNextToken()),this.nextToken},t.switchMode=function(e){this.mode=e,this.gullet.switchMode(e)},t.parse=function(){this.settings.globalGroup||this.gullet.beginGroup(),this.settings.colorIsTextColor&&this.gullet.macros.set("\\color","\\textcolor");try{var e=this.parseExpression(!1);return this.expect("EOF"),this.settings.globalGroup||this.gullet.endGroup(),e}finally{this.gullet.endGroups()}},t.subparse=function(e){var t=this.nextToken;this.consume(),this.gullet.pushToken(new Fr("}")),this.gullet.pushTokens(e);var r=this.parseExpression(!1);return this.expect("}"),this.nextToken=t,r},t.parseExpression=function(t,r){for(var n=[];;){"math"===this.mode&&this.consumeSpaces();var i=this.fetch();if(-1!==e.endOfExpression.indexOf(i.text))break;if(r&&i.text===r)break;if(t&&En[i.text]&&En[i.text].infix)break;var o=this.parseAtom(r);if(!o)break;"internal"!==o.type&&n.push(o)}return"text"===this.mode&&this.formLigatures(n),this.handleInfixNodes(n)},t.handleInfixNodes=function(e){for(var t,r=-1,i=0;i<e.length;i++)if("infix"===e[i].type){if(-1!==r)throw new n("only one infix operator per group",e[i].token);r=i,t=e[i].replaceWith}if(-1!==r&&t){var o,a,s=e.slice(0,r),l=e.slice(r+1);return o=1===s.length&&"ordgroup"===s[0].type?s[0]:{type:"ordgroup",mode:this.mode,body:s},a=1===l.length&&"ordgroup"===l[0].type?l[0]:{type:"ordgroup",mode:this.mode,body:l},["\\\\abovefrac"===t?this.callFunction(t,[o,e[r],a],[]):this.callFunction(t,[o,a],[])]}return e},t.handleSupSubscript=function(e){var t=this.fetch(),r=t.text;this.consume(),this.consumeSpaces();var i=this.parseGroup(e);if(!i)throw new n("Expected group after '"+r+"'",t);return i},t.formatUnsupportedCmd=function(e){for(var t=[],r=0;r<e.length;r++)t.push({type:"textord",mode:"text",text:e[r]});var n={type:"text",mode:this.mode,body:t};return{type:"color",mode:this.mode,color:this.settings.errorColor,body:[n]}},t.parseAtom=function(t){var r,i,o=this.parseGroup("atom",t);if("text"===this.mode)return o;for(;;){this.consumeSpaces();var a=this.fetch();if("\\limits"===a.text||"\\nolimits"===a.text){if(o&&"op"===o.type){var s="\\limits"===a.text;o.limits=s,o.alwaysHandleSupSub=!0}else{if(!o||"operatorname"!==o.type)throw new n("Limit controls must follow a math operator",a);o.alwaysHandleSupSub&&(o.limits="\\limits"===a.text)}this.consume()}else if("^"===a.text){if(r)throw new n("Double superscript",a);r=this.handleSupSubscript("superscript")}else if("_"===a.text){if(i)throw new n("Double subscript",a);i=this.handleSupSubscript("subscript")}else if("'"===a.text){if(r)throw new n("Double superscript",a);var l={type:"textord",mode:this.mode,text:"\\prime"},c=[l];for(this.consume();"'"===this.fetch().text;)c.push(l),this.consume();"^"===this.fetch().text&&c.push(this.handleSupSubscript("superscript")),r={type:"ordgroup",mode:this.mode,body:c}}else{if(!Xn[a.text])break;var h=Xn[a.text],u=Wn.test(a.text);for(this.consume();;){var p=this.fetch().text;if(!Xn[p])break;if(Wn.test(p)!==u)break;this.consume(),h+=Xn[p]}var m=new e(h,this.settings).parse();u?i={type:"ordgroup",mode:"math",body:m}:r={type:"ordgroup",mode:"math",body:m}}}return r||i?{type:"supsub",mode:this.mode,base:o,sup:r,sub:i}:o},t.parseFunction=function(e,t){var r=this.fetch(),i=r.text,o=En[i];if(!o)return null;if(this.consume(),t&&"atom"!==t&&!o.allowedInArgument)throw new n("Got function '"+i+"' with no arguments"+(t?" as "+t:""),r);if("text"===this.mode&&!o.allowedInText)throw new n("Can't use function '"+i+"' in text mode",r);if("math"===this.mode&&!1===o.allowedInMath)throw new n("Can't use function '"+i+"' in math mode",r);var a=this.parseArguments(i,o),s=a.args,l=a.optArgs;return this.callFunction(i,s,l,r,e)},t.callFunction=function(e,t,r,i,o){var a={funcName:e,parser:this,token:i,breakOnTokenText:o},s=En[e];if(s&&s.handler)return s.handler(a,t,r);throw new n("No function handler for "+e)},t.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(0===r)return{args:[],optArgs:[]};for(var i=[],o=[],a=0;a<r;a++){var s=t.argTypes&&t.argTypes[a],l=a<t.numOptionalArgs;(t.primitive&&null==s||"sqrt"===t.type&&1===a&&null==o[0])&&(s="primitive");var c=this.parseGroupOfType("argument to '"+e+"'",s,l);if(l)o.push(c);else{if(null==c)throw new n("Null argument, please report this as a bug");i.push(c)}}return{args:i,optArgs:o}},t.parseGroupOfType=function(e,t,r){switch(t){case"color":return this.parseColorGroup(r);case"size":return this.parseSizeGroup(r);case"url":return this.parseUrlGroup(r);case"math":case"text":return this.parseArgumentGroup(r,t);case"hbox":var i=this.parseArgumentGroup(r,"text");return null!=i?{type:"styling",mode:i.mode,body:[i],style:"text"}:null;case"raw":var o=this.parseStringGroup("raw",r);return null!=o?{type:"raw",mode:"text",string:o.text}:null;case"primitive":if(r)throw new n("A primitive argument cannot be optional");var a=this.parseGroup(e);if(null==a)throw new n("Expected group as "+e,this.fetch());return a;case"original":case null:case void 0:return this.parseArgumentGroup(r);default:throw new n("Unknown group type as "+e,this.fetch())}},t.consumeSpaces=function(){for(;" "===this.fetch().text;)this.consume()},t.parseStringGroup=function(e,t){var r=this.gullet.scanArgument(t);if(null==r)return null;for(var n,i="";"EOF"!==(n=this.fetch()).text;)i+=n.text,this.consume();return this.consume(),r.text=i,r},t.parseRegexGroup=function(e,t){for(var r,i=this.fetch(),o=i,a="";"EOF"!==(r=this.fetch()).text&&e.test(a+r.text);)a+=(o=r).text,this.consume();if(""===a)throw new n("Invalid "+t+": '"+i.text+"'",i);return i.range(o,a)},t.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(null==t)return null;var r=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);if(!r)throw new n("Invalid color: '"+t.text+"'",t);var i=r[0];return/^[0-9a-f]{6}$/i.test(i)&&(i="#"+i),{type:"color-token",mode:this.mode,color:i}},t.parseSizeGroup=function(e){var t,r=!1;if(this.gullet.consumeSpaces(),!(t=e||"{"===this.gullet.future().text?this.parseStringGroup("size",e):this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")))return null;e||0!==t.text.length||(t.text="0pt",r=!0);var i=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!i)throw new n("Invalid size: '"+t.text+"'",t);var o={number:+(i[1]+i[2]),unit:i[3]};if(!V(o))throw new n("Invalid unit: '"+o.unit+"'",t);return{type:"size",mode:this.mode,value:o,isBlank:r}},t.parseUrlGroup=function(e){this.gullet.lexer.setCatcode("%",13),this.gullet.lexer.setCatcode("~",12);var t=this.parseStringGroup("url",e);if(this.gullet.lexer.setCatcode("%",14),this.gullet.lexer.setCatcode("~",13),null==t)return null;var r=t.text.replace(/\\([#$%&~_^{}])/g,"$1");return{type:"url",mode:this.mode,url:r}},t.parseArgumentGroup=function(e,t){var r=this.gullet.scanArgument(e);if(null==r)return null;var n=this.mode;t&&this.switchMode(t),this.gullet.beginGroup();var i=this.parseExpression(!1,"EOF");this.expect("EOF"),this.gullet.endGroup();var o={type:"ordgroup",mode:this.mode,loc:r.loc,body:i};return t&&this.switchMode(n),o},t.parseGroup=function(e,t){var r,i=this.fetch(),o=i.text;if("{"===o||"\\begingroup"===o){this.consume();var a="{"===o?"}":"\\endgroup";this.gullet.beginGroup();var s=this.parseExpression(!1,a),l=this.fetch();this.expect(a),this.gullet.endGroup(),r={type:"ordgroup",mode:this.mode,loc:jr.range(i,l),body:s,semisimple:"\\begingroup"===o||void 0}}else if(null==(r=this.parseFunction(t,e)||this.parseSymbol())&&"\\"===o[0]&&!Gn.hasOwnProperty(o)){if(this.settings.throwOnError)throw new n("Undefined control sequence: "+o,i);r=this.formatUnsupportedCmd(o),this.consume()}return r},t.formLigatures=function(e){for(var t=e.length-1,r=0;r<t;++r){var n=e[r],i=n.text;"-"===i&&"-"===e[r+1].text&&(r+1<t&&"-"===e[r+2].text?(e.splice(r,3,{type:"textord",mode:"text",loc:jr.range(n,e[r+2]),text:"---"}),t-=2):(e.splice(r,2,{type:"textord",mode:"text",loc:jr.range(n,e[r+1]),text:"--"}),t-=1)),"'"!==i&&"`"!==i||e[r+1].text!==i||(e.splice(r,2,{type:"textord",mode:"text",loc:jr.range(n,e[r+1]),text:i+i}),t-=1)}},t.parseSymbol=function(){var e=this.fetch(),t=e.text;if(/^\\verb[^a-zA-Z]/.test(t)){this.consume();var r=t.slice(5),i="*"===r.charAt(0);if(i&&(r=r.slice(1)),r.length<2||r.charAt(0)!==r.slice(-1))throw new n("\\verb assertion failed --\n                    please report what input caused this bug");return{type:"verb",mode:"text",body:r=r.slice(1,-1),star:i}}Zn.hasOwnProperty(t[0])&&!ce[this.mode][t[0]]&&(this.settings.strict&&"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Accented Unicode text character "'+t[0]+'" used in math mode',e),t=Zn[t[0]]+t.slice(1));var o,a=Nn.exec(t);if(a&&("i"===(t=t.substring(0,a.index))?t="ı":"j"===t&&(t="ȷ")),ce[this.mode][t]){this.settings.strict&&"math"===this.mode&&"ÐÞþ".indexOf(t)>=0&&this.settings.reportNonstrict("unicodeTextInMathMode",'Latin-1/Unicode text character "'+t[0]+'" used in math mode',e);var s,l=ce[this.mode][t].group,c=jr.range(e);if(ae.hasOwnProperty(l)){var h=l;s={type:"atom",mode:this.mode,family:h,loc:c,text:t}}else s={type:l,mode:this.mode,loc:c,text:t};o=s}else{if(!(t.charCodeAt(0)>=128))return null;this.settings.strict&&(O(t.charCodeAt(0))?"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Unicode text character "'+t[0]+'" used in math mode',e):this.settings.reportNonstrict("unknownSymbol",'Unrecognized Unicode character "'+t[0]+'" ('+t.charCodeAt(0)+")",e)),o={type:"textord",mode:"text",loc:jr.range(e),text:t}}if(this.consume(),a)for(var u=0;u<a[0].length;u++){var p=a[0][u];if(!Yn[p])throw new n("Unknown accent ' "+p+"'",e);var m=Yn[p][this.mode]||Yn[p].text;if(!m)throw new n("Accent "+p+" unsupported in "+this.mode+" mode",e);o={type:"accent",mode:this.mode,loc:jr.range(e),label:m,isStretchy:!1,isShifty:!0,base:o}}return o},e}();Kn.endOfExpression=["}","\\endgroup","\\end","\\right","&"];var Qn=function(e,t){if(!("string"==typeof e||e instanceof String))throw new TypeError("KaTeX can only parse string typed expression");var r=new Kn(e,t);delete r.gullet.macros.current["\\df@tag"];var i=r.parse();if(delete r.gullet.macros.current["\\current@color"],delete r.gullet.macros.current["\\color"],r.gullet.macros.get("\\df@tag")){if(!t.displayMode)throw new n("\\tag works only in display equations");i=[{type:"tag",mode:"text",body:i,tag:r.subparse([new Fr("\\df@tag")])}]}return i},Jn=function(e,t,r){t.textContent="";var n=ti(e,r).toNode();t.appendChild(n)};"undefined"!=typeof document&&"CSS1Compat"!==document.compatMode&&("undefined"!=typeof console&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."),Jn=function(){throw new n("KaTeX doesn't work in quirks mode.")});var ei=function(e,t,r){if(r.throwOnError||!(e instanceof n))throw e;var i=Je.makeSpan(["katex-error"],[new te(t)]);return i.setAttribute("title",e.toString()),i.setAttribute("style","color:"+r.errorColor),i},ti=function(e,t){var r=new v(t);try{return function(e,t,r){var n,i=Pt(r);if("mathml"===r.output)return qt(e,t,i,r.displayMode,!0);if("html"===r.output){var o=Mt(e,i);n=Je.makeSpan(["katex"],[o])}else{var a=qt(e,t,i,r.displayMode,!1),s=Mt(e,i);n=Je.makeSpan(["katex"],[a,s])}return Dt(n,r)}(Qn(e,r),e,r)}catch(t){return ei(t,e,r)}},ri={version:"0.16.8",render:Jn,renderToString:function(e,t){return ti(e,t).toMarkup()},ParseError:n,SETTINGS_SCHEMA:f,__parse:function(e,t){var r=new v(t);return Qn(e,r)},__renderToDomTree:ti,__renderToHTMLTree:function(e,t){var r=new v(t);try{return function(e,t,r){var n=Mt(e,Pt(r)),i=Je.makeSpan(["katex"],[n]);return Dt(i,r)}(Qn(e,r),0,r)}catch(t){return ei(t,e,r)}},__setFontMetrics:function(e,t){I[e]=t},__defineSymbol:he,__defineFunction:lt,__defineMacro:Hr,__domTree:{Span:K,Anchor:Q,SymbolNode:te,SvgNode:re,PathNode:ne,LineNode:ie}};return t.default}()},e.exports=t()},1763:(e,t,r)=>{var n=r(3379),i=r(642);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.id,i,""]]);n(i,{insert:"head",singleton:!1}),e.exports=i.locals||{}},9861:(e,t,r)=>{var n=r(3379),i=r(7369);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.id,i,""]]);n(i,{insert:"head",singleton:!1}),e.exports=i.locals||{}},509:(e,t,r)=>{var n=r(3379),i=r(4763);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.id,i,""]]);n(i,{insert:"head",singleton:!1}),e.exports=i.locals||{}},4089:(e,t,r)=>{var n=r(3379),i=r(28);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.id,i,""]]);n(i,{insert:"head",singleton:!1}),e.exports=i.locals||{}},3379:(e,t,r)=>{"use strict";var n,i=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function a(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function s(e,t){for(var r={},n=[],i=0;i<e.length;i++){var s=e[i],l=t.base?s[0]+t.base:s[0],c=r[l]||0,h="".concat(l," ").concat(c);r[l]=c+1;var u=a(h),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(o[u].references++,o[u].updater(p)):o.push({identifier:h,updater:f(p,t),references:1}),n.push(h)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,h=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,r){var n=r.css,i=r.media,o=r.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,d=0;function f(e,t){var r,n,i;if(t.singleton){var o=d++;r=m||(m=l(t)),n=u.bind(null,r,o,!1),i=u.bind(null,r,o,!0)}else r=l(t),n=p.bind(null,r,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var i=a(r[n]);o[i].references--}for(var l=s(e,t),c=0;c<r.length;c++){var h=a(r[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}r=l}}}},4058:(e,t,r)=>{"use strict";var n=r(527);const i=/(?<=\s|^)\${1,2}(?!\$)/,o=/^(\${1,2})(?!\$)((?:\\.|[^\\\n])+?)(?<!\$)\1(?=[\s?!\.,:]|$)/,a=/^(\${1,2})\n((?:\\[^]|[^\\])+?)\n\1(?:\n|$)/;function s(e,t){return r=>n.renderToString(r.text,{...e,displayMode:r.displayMode})+(t?"\n":"")}function l(e,t){return{name:"blockKatex",level:"block",start:e=>e.indexOf("\n$"),tokenizer(e,t){const r=e.match(a);if(r)return{type:"blockKatex",raw:r[0],text:r[2].trim(),displayMode:2===r[1].length}},renderer:t}}e.exports=function(e={}){return{extensions:[(t=s(e,!1),{name:"inlineKatex",level:"inline",start(e){const t=e.match(i);if(t)return e.substring(t.index).match(o)?t.index:void 0},tokenizer(e,t){const r=e.match(o);if(r)return{type:"inlineKatex",raw:r[0],text:r[2].trim(),displayMode:2===r[1].length}},renderer:t}),l(0,s(e,!0))]};var t}},970:(e,t)=>{"use strict";function r(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function n(e){t.defaults=e}t.defaults={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const i=/[&<>"']/,o=new RegExp(i.source,"g"),a=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,s=new RegExp(a.source,"g"),l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},c=e=>l[e];function h(e,t){if(t){if(i.test(e))return e.replace(o,c)}else if(a.test(e))return e.replace(s,c);return e}const u=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function p(e){return e.replace(u,((e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""))}const m=/(^|[^\[])\^/g;function d(e,t){e="string"==typeof e?e:e.source,t=t||"";const r={replace:(t,n)=>(n=(n="object"==typeof n&&"source"in n?n.source:n).replace(m,"$1"),e=e.replace(t,n),r),getRegex:()=>new RegExp(e,t)};return r}const f=/[^\w:]/g,g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function v(e,t,r){if(e){let e;try{e=decodeURIComponent(p(r)).replace(f,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!g.test(r)&&(r=function(e,t){b[" "+e]||(y.test(e)?b[" "+e]=e+"/":b[" "+e]=z(e,"/",!0));const r=-1===(e=b[" "+e]).indexOf(":");return"//"===t.substring(0,2)?r?t:e.replace(x,"$1")+t:"/"===t.charAt(0)?r?t:e.replace(w,"$1")+t:e+t}(t,r));try{r=encodeURI(r).replace(/%25/g,"%")}catch(e){return null}return r}const b={},y=/^[^:]+:\/*[^/]*$/,x=/^([^:]+:)[\s\S]*$/,w=/^([^:]+:\/*[^/]*)[\s\S]*$/,k={exec:()=>null};function S(e,t){const r=e.replace(/\|/g,((e,t,r)=>{let n=!1,i=t;for(;--i>=0&&"\\"===r[i];)n=!n;return n?"|":" |"})).split(/ \|/);let n=0;if(r[0].trim()||r.shift(),r.length>0&&!r[r.length-1].trim()&&r.pop(),t)if(r.length>t)r.splice(t);else for(;r.length<t;)r.push("");for(;n<r.length;n++)r[n]=r[n].trim().replace(/\\\|/g,"|");return r}function z(e,t,r){const n=e.length;if(0===n)return"";let i=0;for(;i<n;){const o=e.charAt(n-i-1);if(o!==t||r){if(o===t||!r)break;i++}else i++}return e.slice(0,n-i)}function M(e,t,r,n){const i=t.href,o=t.title?h(t.title):null,a=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){n.state.inLink=!0;const e={type:"link",raw:r,href:i,title:o,text:a,tokens:n.inlineTokens(a)};return n.state.inLink=!1,e}return{type:"image",raw:r,href:i,title:o,text:h(a)}}class T{options;rules;lexer;constructor(e){this.options=e||t.defaults}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:z(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],r=function(e,t){const r=e.match(/^(\s+)(?:```)/);if(null===r)return t;const n=r[1];return t.split("\n").map((e=>{const t=e.match(/^\s+/);if(null===t)return e;const[r]=t;return r.length>=n.length?e.slice(n.length):e})).join("\n")}(e,t[3]||"");return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline._escapes,"$1"):t[2],text:r}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(/#$/.test(e)){const t=z(e,"#");this.options.pedantic?e=t.trim():t&&!/ $/.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){const e=t[0].replace(/^ *>[ \t]?/gm,""),r=this.lexer.state.top;this.lexer.state.top=!0;const n=this.lexer.blockTokens(e);return this.lexer.state.top=r,{type:"blockquote",raw:t[0],tokens:n,text:e}}}list(e){let t=this.rules.block.list.exec(e);if(t){let r=t[1].trim();const n=r.length>1,i={type:"list",raw:"",ordered:n,start:n?+r.slice(0,-1):"",loose:!1,items:[]};r=n?`\\d{1,9}\\${r.slice(-1)}`:`\\${r}`,this.options.pedantic&&(r=n?r:"[*+-]");const o=new RegExp(`^( {0,3}${r})((?:[\t ][^\\n]*)?(?:\\n|$))`);let a="",s="",l=!1;for(;e;){let r=!1;if(!(t=o.exec(e)))break;if(this.rules.block.hr.test(e))break;a=t[0],e=e.substring(a.length);let n=t[2].split("\n",1)[0].replace(/^\t+/,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],h=0;this.options.pedantic?(h=2,s=n.trimLeft()):(h=t[2].search(/[^ ]/),h=h>4?1:h,s=n.slice(h),h+=t[1].length);let u=!1;if(!n&&/^ *$/.test(c)&&(a+=c+"\n",e=e.substring(c.length+1),r=!0),!r){const t=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),r=new RegExp(`^ {0,${Math.min(3,h-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),i=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:\`\`\`|~~~)`),o=new RegExp(`^ {0,${Math.min(3,h-1)}}#`);for(;e;){const l=e.split("\n",1)[0];if(c=l,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),i.test(c))break;if(o.test(c))break;if(t.test(c))break;if(r.test(e))break;if(c.search(/[^ ]/)>=h||!c.trim())s+="\n"+c.slice(h);else{if(u)break;if(n.search(/[^ ]/)>=4)break;if(i.test(n))break;if(o.test(n))break;if(r.test(n))break;s+="\n"+c}u||c.trim()||(u=!0),a+=l+"\n",e=e.substring(l.length+1),n=c.slice(h)}}i.loose||(l?i.loose=!0:/\n *\n *$/.test(a)&&(l=!0));let p,m=null;this.options.gfm&&(m=/^\[[ xX]\] /.exec(s),m&&(p="[ ] "!==m[0],s=s.replace(/^\[[ xX]\] +/,""))),i.items.push({type:"list_item",raw:a,task:!!m,checked:p,loose:!1,text:s,tokens:[]}),i.raw+=a}i.items[i.items.length-1].raw=a.trimRight(),i.items[i.items.length-1].text=s.trimRight(),i.raw=i.raw.trimRight();for(let e=0;e<i.items.length;e++)if(this.lexer.state.top=!1,i.items[e].tokens=this.lexer.blockTokens(i.items[e].text,[]),!i.loose){const t=i.items[e].tokens.filter((e=>"space"===e.type)),r=t.length>0&&t.some((e=>/\n.*\n/.test(e.raw)));i.loose=r}if(i.loose)for(let e=0;e<i.items.length;e++)i.items[e].loose=!0;return i}}html(e){const t=this.rules.block.html.exec(e);if(t){const e={type:"html",block:!0,raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:t[0]};if(this.options.sanitize){const r=this.options.sanitizer?this.options.sanitizer(t[0]):h(t[0]),n=e;n.type="paragraph",n.text=r,n.tokens=this.lexer.inline(r)}return e}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(/\s+/g," "),r=t[2]?t[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",n=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline._escapes,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:r,title:n}}}table(e){const t=this.rules.block.table.exec(e);if(t){const e={type:"table",raw:t[0],header:S(t[1]).map((e=>({text:e,tokens:[]}))),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(e.header.length===e.align.length){let t,r,n,i,o=e.align.length;for(t=0;t<o;t++){const r=e.align[t];r&&(/^ *-+: *$/.test(r)?e.align[t]="right":/^ *:-+: *$/.test(r)?e.align[t]="center":/^ *:-+ *$/.test(r)?e.align[t]="left":e.align[t]=null)}for(o=e.rows.length,t=0;t<o;t++)e.rows[t]=S(e.rows[t],e.header.length).map((e=>({text:e,tokens:[]})));for(o=e.header.length,r=0;r<o;r++)e.header[r].tokens=this.lexer.inline(e.header[r].text);for(o=e.rows.length,r=0;r<o;r++)for(i=e.rows[r],n=0;n<i.length;n++)i[n].tokens=this.lexer.inline(i[n].text);return e}}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:h(t[1])}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):h(t[0]):t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const t=z(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;let r=0;for(let n=0;n<e.length;n++)if("\\"===e[n])n++;else if(e[n]===t[0])r++;else if(e[n]===t[1]&&(r--,r<0))return n;return-1}(t[2],"()");if(e>-1){const r=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,r).trim(),t[3]=""}}let r=t[2],n="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r);e&&(r=e[1],n=e[3])}else n=t[3]?t[3].slice(1,-1):"";return r=r.trim(),/^</.test(r)&&(r=this.options.pedantic&&!/>$/.test(e)?r.slice(1):r.slice(1,-1)),M(t,{href:r?r.replace(this.rules.inline._escapes,"$1"):r,title:n?n.replace(this.rules.inline._escapes,"$1"):n},t[0],this.lexer)}}reflink(e,t){let r;if((r=this.rules.inline.reflink.exec(e))||(r=this.rules.inline.nolink.exec(e))){let e=(r[2]||r[1]).replace(/\s+/g," ");if(e=t[e.toLowerCase()],!e){const e=r[0].charAt(0);return{type:"text",raw:e,text:e}}return M(r,e,r[0],this.lexer)}}emStrong(e,t,r=""){let n=this.rules.inline.emStrong.lDelim.exec(e);if(n&&(!n[3]||!r.match(/[\p{L}\p{N}]/u))&&(!n[1]&&!n[2]||!r||this.rules.inline.punctuation.exec(r))){const r=[...n[0]].length-1;let i,o,a=r,s=0;const l="*"===n[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,t=t.slice(-1*e.length+r);null!=(n=l.exec(t));){if(i=n[1]||n[2]||n[3]||n[4]||n[5]||n[6],!i)continue;if(o=[...i].length,n[3]||n[4]){a+=o;continue}if((n[5]||n[6])&&r%3&&!((r+o)%3)){s+=o;continue}if(a-=o,a>0)continue;o=Math.min(o,o+a+s);const t=[...e].slice(0,r+n.index+o+1).join("");if(Math.min(r,o)%2){const e=t.slice(1,-1);return{type:"em",raw:t,text:e,tokens:this.lexer.inlineTokens(e)}}const l=t.slice(2,-2);return{type:"strong",raw:t,text:l,tokens:this.lexer.inlineTokens(l)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(/\n/g," ");const r=/[^ ]/.test(e),n=/^ /.test(e)&&/ $/.test(e);return r&&n&&(e=e.substring(1,e.length-1)),e=h(e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e,t){const r=this.rules.inline.autolink.exec(e);if(r){let e,n;return"@"===r[2]?(e=h(this.options.mangle?t(r[1]):r[1]),n="mailto:"+e):(e=h(r[1]),n=e),{type:"link",raw:r[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}url(e,t){let r;if(r=this.rules.inline.url.exec(e)){let e,n;if("@"===r[2])e=h(this.options.mangle?t(r[0]):r[0]),n="mailto:"+e;else{let t;do{t=r[0],r[0]=this.rules.inline._backpedal.exec(r[0])[0]}while(t!==r[0]);e=h(r[0]),n="www."===r[1]?"http://"+r[0]:r[0]}return{type:"link",raw:r[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,t){const r=this.rules.inline.text.exec(e);if(r){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):h(r[0]):r[0]:h(this.options.smartypants?t(r[0]):r[0]),{type:"text",raw:r[0],text:e}}}}const A={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:k,lheading:/^((?:(?!^bull ).|\n(?!\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};A.def=d(A.def).replace("label",A._label).replace("title",A._title).getRegex(),A.bullet=/(?:[*+-]|\d{1,9}[.)])/,A.listItemStart=d(/^( *)(bull) */).replace("bull",A.bullet).getRegex(),A.list=d(A.list).replace(/bull/g,A.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+A.def.source+")").getRegex(),A._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",A._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,A.html=d(A.html,"i").replace("comment",A._comment).replace("tag",A._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),A.lheading=d(A.lheading).replace(/bull/g,A.bullet).getRegex(),A.paragraph=d(A._paragraph).replace("hr",A.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",A._tag).getRegex(),A.blockquote=d(A.blockquote).replace("paragraph",A.paragraph).getRegex(),A.normal={...A},A.gfm={...A.normal,table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"},A.gfm.table=d(A.gfm.table).replace("hr",A.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",A._tag).getRegex(),A.gfm.paragraph=d(A._paragraph).replace("hr",A.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",A.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",A._tag).getRegex(),A.pedantic={...A.normal,html:d("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",A._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:k,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:d(A.normal._paragraph).replace("hr",A.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",A.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()};const C={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:k,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,rDelimAst:/^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,rDelimUnd:/^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:k,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^((?![*_])[\spunctuation])/};function O(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function E(e){let t="";for(let r=0;r<e.length;r++)t+="&#"+(Math.random()>.5?"x"+e.charCodeAt(r).toString(16):e.charCodeAt(r).toString())+";";return t}C._punctuation="\\p{P}$+<=>`^|~",C.punctuation=d(C.punctuation,"u").replace(/punctuation/g,C._punctuation).getRegex(),C.blockSkip=/\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g,C.anyPunctuation=/\\[punct]/g,C._escapes=/\\([punct])/g,C._comment=d(A._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),C.emStrong.lDelim=d(C.emStrong.lDelim,"u").replace(/punct/g,C._punctuation).getRegex(),C.emStrong.rDelimAst=d(C.emStrong.rDelimAst,"gu").replace(/punct/g,C._punctuation).getRegex(),C.emStrong.rDelimUnd=d(C.emStrong.rDelimUnd,"gu").replace(/punct/g,C._punctuation).getRegex(),C.anyPunctuation=d(C.anyPunctuation,"gu").replace(/punct/g,C._punctuation).getRegex(),C._escapes=d(C._escapes,"gu").replace(/punct/g,C._punctuation).getRegex(),C._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,C._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,C.autolink=d(C.autolink).replace("scheme",C._scheme).replace("email",C._email).getRegex(),C._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,C.tag=d(C.tag).replace("comment",C._comment).replace("attribute",C._attribute).getRegex(),C._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,C._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,C._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,C.link=d(C.link).replace("label",C._label).replace("href",C._href).replace("title",C._title).getRegex(),C.reflink=d(C.reflink).replace("label",C._label).replace("ref",A._label).getRegex(),C.nolink=d(C.nolink).replace("ref",A._label).getRegex(),C.reflinkSearch=d(C.reflinkSearch,"g").replace("reflink",C.reflink).replace("nolink",C.nolink).getRegex(),C.normal={...C},C.pedantic={...C.normal,strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:d(/^!?\[(label)\]\((.*?)\)/).replace("label",C._label).getRegex(),reflink:d(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",C._label).getRegex()},C.gfm={...C.normal,escape:d(C.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},C.gfm.url=d(C.gfm.url,"i").replace("email",C.gfm._extended_email).getRegex(),C.breaks={...C.gfm,br:d(C.br).replace("{2,}","*").getRegex(),text:d(C.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()};class B{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||t.defaults,this.options.tokenizer=this.options.tokenizer||new T,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const r={block:A.normal,inline:C.normal};this.options.pedantic?(r.block=A.pedantic,r.inline=C.pedantic):this.options.gfm&&(r.block=A.gfm,this.options.breaks?r.inline=C.breaks:r.inline=C.gfm),this.tokenizer.rules=r}static get rules(){return{block:A,inline:C}}static lex(e,t){return new B(t).lex(e)}static lexInline(e,t){return new B(t).inlineTokens(e)}lex(e){let t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens}blockTokens(e,t=[]){let r,n,i,o;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,t,r)=>t+"    ".repeat(r.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((n=>!!(r=n.call({lexer:this},e,t))&&(e=e.substring(r.raw.length),t.push(r),!0)))))if(r=this.tokenizer.space(e))e=e.substring(r.raw.length),1===r.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(r);else if(r=this.tokenizer.code(e))e=e.substring(r.raw.length),n=t[t.length-1],!n||"paragraph"!==n.type&&"text"!==n.type?t.push(r):(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue[this.inlineQueue.length-1].src=n.text);else if(r=this.tokenizer.fences(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.heading(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.hr(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.blockquote(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.list(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.html(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.def(e))e=e.substring(r.raw.length),n=t[t.length-1],!n||"paragraph"!==n.type&&"text"!==n.type?this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title}):(n.raw+="\n"+r.raw,n.text+="\n"+r.raw,this.inlineQueue[this.inlineQueue.length-1].src=n.text);else if(r=this.tokenizer.table(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.lheading(e))e=e.substring(r.raw.length),t.push(r);else{if(i=e,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const r=e.slice(1);let n;this.options.extensions.startBlock.forEach((e=>{n=e.call({lexer:this},r),"number"==typeof n&&n>=0&&(t=Math.min(t,n))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}if(this.state.top&&(r=this.tokenizer.paragraph(i)))n=t[t.length-1],o&&"paragraph"===n.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=n.text):t.push(r),o=i.length!==e.length,e=e.substring(r.raw.length);else if(r=this.tokenizer.text(e))e=e.substring(r.raw.length),n=t[t.length-1],n&&"text"===n.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=n.text):t.push(r);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let r,n,i,o,a,s,l=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(o=this.tokenizer.rules.inline.reflinkSearch.exec(l));)e.includes(o[0].slice(o[0].lastIndexOf("[")+1,-1))&&(l=l.slice(0,o.index)+"["+"a".repeat(o[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(o=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,o.index)+"["+"a".repeat(o[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(o=this.tokenizer.rules.inline.anyPunctuation.exec(l));)l=l.slice(0,o.index)+"++"+l.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;e;)if(a||(s=""),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((n=>!!(r=n.call({lexer:this},e,t))&&(e=e.substring(r.raw.length),t.push(r),!0)))))if(r=this.tokenizer.escape(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.tag(e))e=e.substring(r.raw.length),n=t[t.length-1],n&&"text"===r.type&&"text"===n.type?(n.raw+=r.raw,n.text+=r.text):t.push(r);else if(r=this.tokenizer.link(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(r.raw.length),n=t[t.length-1],n&&"text"===r.type&&"text"===n.type?(n.raw+=r.raw,n.text+=r.text):t.push(r);else if(r=this.tokenizer.emStrong(e,l,s))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.codespan(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.br(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.del(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.autolink(e,E))e=e.substring(r.raw.length),t.push(r);else if(this.state.inLink||!(r=this.tokenizer.url(e,E))){if(i=e,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const r=e.slice(1);let n;this.options.extensions.startInline.forEach((e=>{n=e.call({lexer:this},r),"number"==typeof n&&n>=0&&(t=Math.min(t,n))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}if(r=this.tokenizer.inlineText(i,O))e=e.substring(r.raw.length),"_"!==r.raw.slice(-1)&&(s=r.raw.slice(-1)),a=!0,n=t[t.length-1],n&&"text"===n.type?(n.raw+=r.raw,n.text+=r.text):t.push(r);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(r.raw.length),t.push(r);return t}}class I{options;constructor(e){this.options=e||t.defaults}code(e,t,r){const n=(t||"").match(/^\S*/)?.[0];if(this.options.highlight){const t=this.options.highlight(e,n);null!=t&&t!==e&&(r=!0,e=t)}return e=e.replace(/\n$/,"")+"\n",n?'<pre><code class="'+this.options.langPrefix+h(n)+'">'+(r?e:h(e,!0))+"</code></pre>\n":"<pre><code>"+(r?e:h(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e,t){return e}heading(e,t,r,n){return this.options.headerIds?`<h${t} id="${this.options.headerPrefix+n.slug(r)}">${e}</h${t}>\n`:`<h${t}>${e}</h${t}>\n`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,r){const n=t?"ol":"ul";return"<"+n+(t&&1!==r?' start="'+r+'"':"")+">\n"+e+"</"+n+">\n"}listitem(e,t,r){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>\n`}table(e,t){return t&&(t=`<tbody>${t}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,t){const r=t.header?"th":"td";return(t.align?`<${r} align="${t.align}">`:`<${r}>`)+e+`</${r}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,t,r){const n=v(this.options.sanitize,this.options.baseUrl,e);if(null===n)return r;let i='<a href="'+(e=n)+'"';return t&&(i+=' title="'+t+'"'),i+=">"+r+"</a>",i}image(e,t,r){const n=v(this.options.sanitize,this.options.baseUrl,e);if(null===n)return r;let i=`<img src="${e=n}" alt="${r}"`;return t&&(i+=` title="${t}"`),i+=this.options.xhtml?"/>":">",i}text(e){return e}}class R{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,r){return""+r}image(e,t,r){return""+r}br(){return""}}class N{seen;constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,t){let r=e,n=0;if(this.seen.hasOwnProperty(r)){n=this.seen[e];do{n++,r=e+"-"+n}while(this.seen.hasOwnProperty(r))}return t||(this.seen[e]=n,this.seen[r]=0),r}slug(e,t={}){const r=this.serialize(e);return this.getNextSafeSlug(r,t.dryrun)}}class _{options;renderer;textRenderer;slugger;constructor(e){this.options=e||t.defaults,this.options.renderer=this.options.renderer||new I,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new R,this.slugger=new N}static parse(e,t){return new _(t).parse(e)}static parseInline(e,t){return new _(t).parseInline(e)}parse(e,t=!0){let r="";for(let n=0;n<e.length;n++){const i=e[n];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[i.type]){const e=i,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){r+=t||"";continue}}switch(i.type){case"space":continue;case"hr":r+=this.renderer.hr();continue;case"heading":{const e=i;r+=this.renderer.heading(this.parseInline(e.tokens),e.depth,p(this.parseInline(e.tokens,this.textRenderer)),this.slugger);continue}case"code":{const e=i;r+=this.renderer.code(e.text,e.lang,!!e.escaped);continue}case"table":{const e=i;let t="",n="";for(let t=0;t<e.header.length;t++)n+=this.renderer.tablecell(this.parseInline(e.header[t].tokens),{header:!0,align:e.align[t]});t+=this.renderer.tablerow(n);let o="";for(let t=0;t<e.rows.length;t++){const r=e.rows[t];n="";for(let t=0;t<r.length;t++)n+=this.renderer.tablecell(this.parseInline(r[t].tokens),{header:!1,align:e.align[t]});o+=this.renderer.tablerow(n)}r+=this.renderer.table(t,o);continue}case"blockquote":{const e=i,t=this.parse(e.tokens);r+=this.renderer.blockquote(t);continue}case"list":{const e=i,t=e.ordered,n=e.start,o=e.loose;let a="";for(let t=0;t<e.items.length;t++){const r=e.items[t],n=r.checked,i=r.task;let s="";if(r.task){const e=this.renderer.checkbox(!!n);o?r.tokens.length>0&&"paragraph"===r.tokens[0].type?(r.tokens[0].text=e+" "+r.tokens[0].text,r.tokens[0].tokens&&r.tokens[0].tokens.length>0&&"text"===r.tokens[0].tokens[0].type&&(r.tokens[0].tokens[0].text=e+" "+r.tokens[0].tokens[0].text)):r.tokens.unshift({type:"text",text:e}):s+=e}s+=this.parse(r.tokens,o),a+=this.renderer.listitem(s,i,!!n)}r+=this.renderer.list(a,t,n);continue}case"html":{const e=i;r+=this.renderer.html(e.text,e.block);continue}case"paragraph":{const e=i;r+=this.renderer.paragraph(this.parseInline(e.tokens));continue}case"text":{let o=i,a=o.tokens?this.parseInline(o.tokens):o.text;for(;n+1<e.length&&"text"===e[n+1].type;)o=e[++n],a+="\n"+(o.tokens?this.parseInline(o.tokens):o.text);r+=t?this.renderer.paragraph(a):a;continue}default:{const e='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return r}parseInline(e,t){t=t||this.renderer;let r="";for(let n=0;n<e.length;n++){const i=e[n];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[i.type]){const e=this.options.extensions.renderers[i.type].call({parser:this},i);if(!1!==e||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(i.type)){r+=e||"";continue}}switch(i.type){case"escape":{const e=i;r+=t.text(e.text);break}case"html":{const e=i;r+=t.html(e.text);break}case"link":{const e=i;r+=t.link(e.href,e.title,this.parseInline(e.tokens,t));break}case"image":{const e=i;r+=t.image(e.href,e.title,e.text);break}case"strong":{const e=i;r+=t.strong(this.parseInline(e.tokens,t));break}case"em":{const e=i;r+=t.em(this.parseInline(e.tokens,t));break}case"codespan":{const e=i;r+=t.codespan(e.text);break}case"br":r+=t.br();break;case"del":{const e=i;r+=t.del(this.parseInline(e.tokens,t));break}case"text":{const e=i;r+=t.text(e.text);break}default:{const e='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return r}}class q{options;constructor(e){this.options=e||t.defaults}static passThroughHooks=new Set(["preprocess","postprocess"]);preprocess(e){return e}postprocess(e){return e}}class P{defaults={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};options=this.setOptions;parse=this.#e(B.lex,_.parse);parseInline=this.#e(B.lexInline,_.parseInline);Parser=_;parser=_.parse;Renderer=I;TextRenderer=R;Lexer=B;lexer=B.lex;Tokenizer=T;Slugger=N;Hooks=q;constructor(...e){this.use(...e)}walkTokens(e,t){let r=[];for(const n of e)switch(r=r.concat(t.call(this,n)),n.type){case"table":{const e=n;for(const n of e.header)r=r.concat(this.walkTokens(n.tokens,t));for(const n of e.rows)for(const e of n)r=r.concat(this.walkTokens(e.tokens,t));break}case"list":{const e=n;r=r.concat(this.walkTokens(e.items,t));break}default:{const e=n;this.defaults.extensions?.childTokens?.[e.type]?this.defaults.extensions.childTokens[e.type].forEach((n=>{r=r.concat(this.walkTokens(e[n],t))})):e.tokens&&(r=r.concat(this.walkTokens(e.tokens,t)))}}return r}use(...e){const t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach((e=>{const r={...e};if(r.async=this.defaults.async||r.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if("renderer"in e){const r=t.renderers[e.name];t.renderers[e.name]=r?function(...t){let n=e.renderer.apply(this,t);return!1===n&&(n=r.apply(this,t)),n}:e.renderer}if("tokenizer"in e){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");const r=t[e.level];r?r.unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}"childTokens"in e&&e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),r.extensions=t),e.renderer){const t=this.defaults.renderer||new I(this.defaults);for(const r in e.renderer){const n=e.renderer[r],i=r,o=t[i];t[i]=(...e)=>{let r=n.apply(t,e);return!1===r&&(r=o.apply(t,e)),r||""}}r.renderer=t}if(e.tokenizer){const t=this.defaults.tokenizer||new T(this.defaults);for(const r in e.tokenizer){const n=e.tokenizer[r],i=r,o=t[i];t[i]=(...e)=>{let r=n.apply(t,e);return!1===r&&(r=o.apply(t,e)),r}}r.tokenizer=t}if(e.hooks){const t=this.defaults.hooks||new q;for(const r in e.hooks){const n=e.hooks[r],i=r,o=t[i];q.passThroughHooks.has(r)?t[i]=e=>{if(this.defaults.async)return Promise.resolve(n.call(t,e)).then((e=>o.call(t,e)));const r=n.call(t,e);return o.call(t,r)}:t[i]=(...e)=>{let r=n.apply(t,e);return!1===r&&(r=o.apply(t,e)),r}}r.hooks=t}if(e.walkTokens){const t=this.defaults.walkTokens,n=e.walkTokens;r.walkTokens=function(e){let r=[];return r.push(n.call(this,e)),t&&(r=r.concat(t.call(this,e))),r}}this.defaults={...this.defaults,...r}})),this}setOptions(e){return this.defaults={...this.defaults,...e},this}#e(e,t){return(r,n,i)=>{"function"==typeof n&&(i=n,n=null);const o={...n},a={...this.defaults,...o};!0===this.defaults.async&&!1===o.async&&(a.silent||console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored."),a.async=!0);const s=this.#t(!!a.silent,!!a.async,i);if(null==r)return s(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof r)return s(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(r)+", string expected"));if(function(e,t){e&&!e.silent&&(t&&console.warn("marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async"),(e.sanitize||e.sanitizer)&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options"),(e.highlight||"language-"!==e.langPrefix)&&console.warn("marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight."),e.mangle&&console.warn("marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`."),e.baseUrl&&console.warn("marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url."),e.smartypants&&console.warn("marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants."),e.xhtml&&console.warn("marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml."),(e.headerIds||e.headerPrefix)&&console.warn("marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`."))}(a,i),a.hooks&&(a.hooks.options=a),i){const n=i,o=a.highlight;let l;try{a.hooks&&(r=a.hooks.preprocess(r)),l=e(r,a)}catch(e){return s(e)}const c=e=>{let r;if(!e)try{a.walkTokens&&this.walkTokens(l,a.walkTokens),r=t(l,a),a.hooks&&(r=a.hooks.postprocess(r))}catch(t){e=t}return a.highlight=o,e?s(e):n(null,r)};if(!o||o.length<3)return c();if(delete a.highlight,!l.length)return c();let h=0;return this.walkTokens(l,(e=>{"code"===e.type&&(h++,setTimeout((()=>{o(e.text,e.lang,((t,r)=>{if(t)return c(t);null!=r&&r!==e.text&&(e.text=r,e.escaped=!0),h--,0===h&&c()}))}),0))})),void(0===h&&c())}if(a.async)return Promise.resolve(a.hooks?a.hooks.preprocess(r):r).then((t=>e(t,a))).then((e=>a.walkTokens?Promise.all(this.walkTokens(e,a.walkTokens)).then((()=>e)):e)).then((e=>t(e,a))).then((e=>a.hooks?a.hooks.postprocess(e):e)).catch(s);try{a.hooks&&(r=a.hooks.preprocess(r));const n=e(r,a);a.walkTokens&&this.walkTokens(n,a.walkTokens);let i=t(n,a);return a.hooks&&(i=a.hooks.postprocess(i)),i}catch(e){return s(e)}}}#t(e,t,r){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+h(n.message+"",!0)+"</pre>";return t?Promise.resolve(e):r?void r(null,e):e}if(t)return Promise.reject(n);if(!r)throw n;r(n)}}}const D=new P;function L(e,t,r){return D.parse(e,t,r)}L.options=L.setOptions=function(e){return D.setOptions(e),L.defaults=D.defaults,n(L.defaults),L},L.getDefaults=r,L.defaults=t.defaults,L.use=function(...e){return D.use(...e),L.defaults=D.defaults,n(L.defaults),L},L.walkTokens=function(e,t){return D.walkTokens(e,t)},L.parseInline=D.parseInline,L.Parser=_,L.parser=_.parse,L.Renderer=I,L.TextRenderer=R,L.Lexer=B,L.lexer=B.lex,L.Tokenizer=T,L.Slugger=N,L.Hooks=q,L.parse=L;const H=L.options,j=L.setOptions,F=L.use,$=L.walkTokens,V=L.parseInline,G=L,U=_.parse,W=B.lex;t.Hooks=q,t.Lexer=B,t.Marked=P,t.Parser=_,t.Renderer=I,t.Slugger=N,t.TextRenderer=R,t.Tokenizer=T,t.getDefaults=r,t.lexer=W,t.marked=L,t.options=H,t.parse=G,t.parseInline=V,t.parser=U,t.setOptions=j,t.use=F,t.walkTokens=$}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,(()=>{"use strict";var e={};r.r(e),r.d(e,{keyboardHandler:()=>D,mouseHandler:()=>L,resizeHandler:()=>H,selectHandler:()=>j,touchHandler:()=>F,wheelHandler:()=>$});class t{constructor(e){this.element=e}enableClass(e){return this.element.classList.add(e),this}disableClass(e){return this.element.classList.remove(e),this}html(e){return this.element.innerHTML=e,this}addElement(e){let r=document.createElement(e);return this.element.appendChild(r),new t(r)}onClick(e){this.element.onclick=e}}function n(e){if(e instanceof String||"string"==typeof e){if(-1!==e.indexOf("#")){let r=document.getElementById(e.substr(1));return new t(r)}{let r=document.getElementsByClassName(e)[0];return new t(r)}}return new t(e)}r(1763),r(9861);class i{static getBlogContent(e){return new Promise((t=>{void 0!==i.cache[e]&&t(i.cache[e]);let r="https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/"+e,n=new XMLHttpRequest;n.open("GET",r),n.onload=()=>{200==n.status&&(i.cache[e]=n.responseText,t(n.responseText))},n.send()}))}static getBlogList(){return new Promise((e=>{let t=new XMLHttpRequest;t.open("GET","https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/blog.json"),t.onload=()=>{console.log("status is"+t.status),200==t.status&&(this.blogSettings=JSON.parse(t.responseText),e(this.blogSettings.articles),console.log("articles is "+t.responseText),console.log("length is "+this.blogSettings.articles.length))},t.send()}))}}i.cache=[];var o=function(e,t){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},o(e,t)},a=function(){return a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},a.apply(this,arguments)};function s(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a}function l(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}r(3662),r(8188),r(9074),r(4370),r(9116);var c,h=new WeakMap;function u(){if(void 0!==c)return c;var e=!1;try{var t=function(){},r=Object.defineProperty({},"passive",{enumerable:!0,get:function(){return e=!0,!0}});window.addEventListener("testPassive",t,r),window.removeEventListener("testPassive",t,r)}catch(e){}return c=!!e&&{passive:!1}}function p(e){var t=h.get(e)||[];return h.set(e,t),function(e,r,n){function i(e){e.defaultPrevented||n(e)}r.split(/\s+/g).forEach((function(r){t.push({elem:e,eventName:r,handler:i}),e.addEventListener(r,i,u())}))}}function m(e){var t=function(e){return e.touches?e.touches[e.touches.length-1]:e}(e);return{x:t.clientX,y:t.clientY}}function d(e,t){return void 0===t&&(t=[]),t.some((function(t){return e===t}))}var f=["webkit","moz","ms","o"],g=new RegExp("^-(?!(?:"+f.join("|")+")-)");function v(e,t){t=function(e){var t={};return Object.keys(e).forEach((function(r){if(g.test(r)){var n=e[r];r=r.replace(/^-/,""),t[r]=n,f.forEach((function(e){t["-"+e+"-"+r]=n}))}else t[r]=e[r]})),t}(t),Object.keys(t).forEach((function(r){var n=r.replace(/^-/,"").replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()}));e.style[n]=t[r]}))}var b=function(){function e(e){this.velocityMultiplier=window.devicePixelRatio,this.updateTime=Date.now(),this.delta={x:0,y:0},this.velocity={x:0,y:0},this.lastPosition={x:0,y:0},this.lastPosition=m(e)}return e.prototype.update=function(e){var t=this,r=t.velocity,n=t.updateTime,i=t.lastPosition,o=Date.now(),a=m(e),s={x:-(a.x-i.x),y:-(a.y-i.y)},l=o-n||16.7,c=s.x/l*16.7,h=s.y/l*16.7;r.x=c*this.velocityMultiplier,r.y=h*this.velocityMultiplier,this.delta=s,this.updateTime=o,this.lastPosition=a},e}(),y=function(){function e(){this._touchList={}}return Object.defineProperty(e.prototype,"_primitiveValue",{get:function(){return{x:0,y:0}},enumerable:!0,configurable:!0}),e.prototype.isActive=function(){return void 0!==this._activeTouchID},e.prototype.getDelta=function(){var e=this._getActiveTracker();return e?a({},e.delta):this._primitiveValue},e.prototype.getVelocity=function(){var e=this._getActiveTracker();return e?a({},e.velocity):this._primitiveValue},e.prototype.getEasingDistance=function(e){var t=1-e,r={x:0,y:0},n=this.getVelocity();return Object.keys(n).forEach((function(e){for(var i=Math.abs(n[e])<=10?0:n[e];0!==i;)r[e]+=i,i=i*t|0})),r},e.prototype.track=function(e){var t=this,r=e.targetTouches;return Array.from(r).forEach((function(e){t._add(e)})),this._touchList},e.prototype.update=function(e){var t=this,r=e.touches,n=e.changedTouches;return Array.from(r).forEach((function(e){t._renew(e)})),this._setActiveID(n),this._touchList},e.prototype.release=function(e){var t=this;delete this._activeTouchID,Array.from(e.changedTouches).forEach((function(e){t._delete(e)}))},e.prototype._add=function(e){this._has(e)&&this._delete(e);var t=new b(e);this._touchList[e.identifier]=t},e.prototype._renew=function(e){this._has(e)&&this._touchList[e.identifier].update(e)},e.prototype._delete=function(e){delete this._touchList[e.identifier]},e.prototype._has=function(e){return this._touchList.hasOwnProperty(e.identifier)},e.prototype._setActiveID=function(e){this._activeTouchID=e[e.length-1].identifier},e.prototype._getActiveTracker=function(){return this._touchList[this._activeTouchID]},e}();function x(e,t,r){return Math.max(t,Math.min(r,e))}function w(e,t,r){var n;void 0===t&&(t=0);var i=-1/0;return function(){for(var o=this,a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];if(r){var l=Date.now(),c=l-i;i=l,c>=t&&e.apply(this,a)}clearTimeout(n),n=setTimeout((function(){e.apply(o,a)}),t)}}function k(e,t){return void 0===e&&(e=-1/0),void 0===t&&(t=1/0),function(r,n){var i="_"+n;Object.defineProperty(r,n,{get:function(){return this[i]},set:function(r){Object.defineProperty(this,i,{value:x(r,e,t),enumerable:!1,writable:!0,configurable:!0})},enumerable:!0,configurable:!0})}}function S(e,t){var r="_"+t;Object.defineProperty(e,t,{get:function(){return this[r]},set:function(e){Object.defineProperty(this,r,{value:!!e,enumerable:!1,writable:!0,configurable:!0})},enumerable:!0,configurable:!0})}function z(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t,r,n){var i=n.value;return{get:function(){return this.hasOwnProperty(r)||Object.defineProperty(this,r,{value:w.apply(void 0,l([i],e))}),this[r]}}}}var M,T=function(){function e(e){var t=this;void 0===e&&(e={}),this.damping=.1,this.thumbMinSize=20,this.renderByPixels=!0,this.alwaysShowTracks=!1,this.continuousScrolling=!0,this.delegateTo=null,this.plugins={},Object.keys(e).forEach((function(r){t[r]=e[r]}))}return Object.defineProperty(e.prototype,"wheelEventTarget",{get:function(){return this.delegateTo},set:function(e){console.warn("[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead."),this.delegateTo=e},enumerable:!0,configurable:!0}),s([k(0,1)],e.prototype,"damping",void 0),s([k(0,1/0)],e.prototype,"thumbMinSize",void 0),s([S],e.prototype,"renderByPixels",void 0),s([S],e.prototype,"alwaysShowTracks",void 0),s([S],e.prototype,"continuousScrolling",void 0),e}();!function(e){e.X="x",e.Y="y"}(M||(M={}));var A=function(){function e(e,t){void 0===t&&(t=0),this._direction=e,this._minSize=t,this.element=document.createElement("div"),this.displaySize=0,this.realSize=0,this.offset=0,this.element.className="scrollbar-thumb scrollbar-thumb-"+e}return e.prototype.attachTo=function(e){e.appendChild(this.element)},e.prototype.update=function(e,t,r){this.realSize=Math.min(t/r,1)*t,this.displaySize=Math.max(this.realSize,this._minSize),this.offset=e/r*(t+(this.realSize-this.displaySize)),v(this.element,this._getStyle())},e.prototype._getStyle=function(){switch(this._direction){case M.X:return{width:this.displaySize+"px","-transform":"translate3d("+this.offset+"px, 0, 0)"};case M.Y:return{height:this.displaySize+"px","-transform":"translate3d(0, "+this.offset+"px, 0)"};default:return null}},e}(),C=function(){function e(e,t){void 0===t&&(t=0),this.element=document.createElement("div"),this._isShown=!1,this.element.className="scrollbar-track scrollbar-track-"+e,this.thumb=new A(e,t),this.thumb.attachTo(this.element)}return e.prototype.attachTo=function(e){e.appendChild(this.element)},e.prototype.show=function(){this._isShown||(this._isShown=!0,this.element.classList.add("show"))},e.prototype.hide=function(){this._isShown&&(this._isShown=!1,this.element.classList.remove("show"))},e.prototype.update=function(e,t,r){v(this.element,{display:r<=t?"none":"block"}),this.thumb.update(e,t,r)},e}(),O=function(){function e(e){this._scrollbar=e;var t=e.options.thumbMinSize;this.xAxis=new C(M.X,t),this.yAxis=new C(M.Y,t),this.xAxis.attachTo(e.containerEl),this.yAxis.attachTo(e.containerEl),e.options.alwaysShowTracks&&(this.xAxis.show(),this.yAxis.show())}return e.prototype.update=function(){var e=this._scrollbar,t=e.size,r=e.offset;this.xAxis.update(r.x,t.container.width,t.content.width),this.yAxis.update(r.y,t.container.height,t.content.height)},e.prototype.autoHideOnIdle=function(){this._scrollbar.options.alwaysShowTracks||(this.xAxis.hide(),this.yAxis.hide())},s([z(300)],e.prototype,"autoHideOnIdle",null),e}(),E=new WeakMap;function B(e){return Math.pow(e-1,3)+1}var I,R,N,_=function(){function e(e,t){var r=this.constructor;this.scrollbar=e,this.name=r.pluginName,this.options=a(a({},r.defaultOptions),t)}return e.prototype.onInit=function(){},e.prototype.onDestroy=function(){},e.prototype.onUpdate=function(){},e.prototype.onRender=function(e){},e.prototype.transformDelta=function(e,t){return a({},e)},e.pluginName="",e.defaultOptions={},e}(),q={order:new Set,constructors:{}};function P(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];e.forEach((function(e){var t=e.pluginName;if(!t)throw new TypeError("plugin name is required");q.order.add(t),q.constructors[t]=e}))}function D(e){var t=p(e),r=e.containerEl;t(r,"keydown",(function(t){var n,i=document.activeElement;if((i===r||r.contains(i))&&("INPUT"!==(n=i).tagName&&"SELECT"!==n.tagName&&"TEXTAREA"!==n.tagName&&!n.isContentEditable||n.disabled)){var o=function(e,t){var r=e.size,n=e.limit,i=e.offset;switch(t){case I.TAB:return function(e){requestAnimationFrame((function(){e.scrollIntoView(document.activeElement,{offsetTop:e.size.container.height/2,offsetLeft:e.size.container.width/2,onlyScrollIfNeeded:!0})}))}(e);case I.SPACE:return[0,200];case I.PAGE_UP:return[0,40-r.container.height];case I.PAGE_DOWN:return[0,r.container.height-40];case I.END:return[0,n.y-i.y];case I.HOME:return[0,-i.y];case I.LEFT:return[-40,0];case I.UP:return[0,-40];case I.RIGHT:return[40,0];case I.DOWN:return[0,40];default:return null}}(e,t.keyCode||t.which);if(o){var a=o[0],s=o[1];e.addTransformableMomentum(a,s,t,(function(r){r?t.preventDefault():(e.containerEl.blur(),e.parent&&e.parent.containerEl.focus())}))}}}))}function L(e){var t,r,n,i,o,a=p(e),s=e.containerEl,l=e.track,c=l.xAxis,h=l.yAxis;function u(t,r){var n=e.size,i=e.limit,o=e.offset;return t===R.X?x(r/(n.container.width+(c.thumb.realSize-c.thumb.displaySize))*n.content.width,0,i.x)-o.x:t===R.Y?x(r/(n.container.height+(h.thumb.realSize-h.thumb.displaySize))*n.content.height,0,i.y)-o.y:0}function f(e){return d(e,[c.element,c.thumb.element])?R.X:d(e,[h.element,h.thumb.element])?R.Y:void 0}a(s,"click",(function(t){if(!r&&d(t.target,[c.element,h.element])){var n=t.target,i=f(n),o=n.getBoundingClientRect(),a=m(t);if(i===R.X){var s=a.x-o.left-c.thumb.displaySize/2;e.setMomentum(u(i,s),0)}i===R.Y&&(s=a.y-o.top-h.thumb.displaySize/2,e.setMomentum(0,u(i,s)))}})),a(s,"mousedown",(function(r){if(d(r.target,[c.thumb.element,h.thumb.element])){t=!0;var a=r.target,l=m(r),u=a.getBoundingClientRect();i=f(a),n={x:l.x-u.left,y:l.y-u.top},o=s.getBoundingClientRect(),v(e.containerEl,{"-user-select":"none"})}})),a(window,"mousemove",(function(a){if(t){r=!0;var s=m(a);if(i===R.X){var l=s.x-n.x-o.left;e.setMomentum(u(i,l),0)}i===R.Y&&(l=s.y-n.y-o.top,e.setMomentum(0,u(i,l)))}})),a(window,"mouseup blur",(function(){t=r=!1,v(e.containerEl,{"-user-select":""})}))}function H(e){p(e)(window,"resize",w(e.update.bind(e),300))}function j(e){var t,r=p(e),n=e.containerEl,i=e.contentEl,o=!1,a=!1;function s(r){var n=r.x,i=r.y;if(n||i){var o=e.offset,a=e.limit;e.setMomentum(x(o.x+n,0,a.x)-o.x,x(o.y+i,0,a.y)-o.y),t=requestAnimationFrame((function(){s({x:n,y:i})}))}}r(window,"mousemove",(function(r){if(o){cancelAnimationFrame(t);var n=function(e,t){var r=e.bounding,n=r.top,i=r.right,o=r.bottom,a=r.left,s=m(t),l=s.x,c=s.y,h={x:0,y:0},u=20;return 0===l&&0===c||(l>i-u?h.x=l-i+u:l<a+u&&(h.x=l-a-u),c>o-u?h.y=c-o+u:c<n+u&&(h.y=c-n-u),h.x*=2,h.y*=2),h}(e,r);s(n)}})),r(i,"contextmenu",(function(){a=!0,cancelAnimationFrame(t),o=!1})),r(i,"mousedown",(function(){a=!1})),r(i,"selectstart",(function(){a||(cancelAnimationFrame(t),o=!0)})),r(window,"mouseup blur",(function(){cancelAnimationFrame(t),o=!1,a=!1})),r(n,"scroll",(function(e){e.preventDefault(),n.scrollTop=n.scrollLeft=0}))}function F(e){var t,r=e.options.delegateTo||e.containerEl,n=new y,i=p(e),o=0;i(r,"touchstart",(function(r){n.track(r),e.setMomentum(0,0),0===o&&(t=e.options.damping,e.options.damping=Math.max(t,.5)),o++})),i(r,"touchmove",(function(t){if(!N||N===e){n.update(t);var r=n.getDelta(),i=r.x,o=r.y;e.addTransformableMomentum(i,o,t,(function(r){r&&t.cancelable&&(t.preventDefault(),N=e)}))}})),i(r,"touchcancel touchend",(function(r){var i=n.getEasingDistance(t);e.addTransformableMomentum(i.x,i.y,r),0==--o&&(e.options.damping=t),n.release(r),N=null}))}function $(e){p(e)(e.options.delegateTo||e.containerEl,"onwheel"in window||document.implementation.hasFeature("Events.wheel","3.0")?"wheel":"mousewheel",(function(t){var r=function(e){if("deltaX"in e){var t=U(e.deltaMode);return{x:e.deltaX/V.STANDARD*t,y:e.deltaY/V.STANDARD*t}}return"wheelDeltaX"in e?{x:e.wheelDeltaX/V.OTHERS,y:e.wheelDeltaY/V.OTHERS}:{x:0,y:e.wheelDelta/V.OTHERS}}(t),n=r.x,i=r.y;e.addTransformableMomentum(n,i,t,(function(e){e&&t.preventDefault()}))}))}!function(e){e[e.TAB=9]="TAB",e[e.SPACE=32]="SPACE",e[e.PAGE_UP=33]="PAGE_UP",e[e.PAGE_DOWN=34]="PAGE_DOWN",e[e.END=35]="END",e[e.HOME=36]="HOME",e[e.LEFT=37]="LEFT",e[e.UP=38]="UP",e[e.RIGHT=39]="RIGHT",e[e.DOWN=40]="DOWN"}(I||(I={})),function(e){e[e.X=0]="X",e[e.Y=1]="Y"}(R||(R={}));var V={STANDARD:1,OTHERS:-3},G=[1,28,500],U=function(e){return G[e]||G[0]},W=new Map,X=function(){function t(e,t){var r=this;this.offset={x:0,y:0},this.limit={x:1/0,y:1/0},this.bounding={top:0,right:0,bottom:0,left:0},this._plugins=[],this._momentum={x:0,y:0},this._listeners=new Set,this.containerEl=e;var n=this.contentEl=document.createElement("div");this.options=new T(t),e.setAttribute("data-scrollbar","true"),e.setAttribute("tabindex","-1"),v(e,{overflow:"hidden",outline:"none"}),window.navigator.msPointerEnabled&&(e.style.msTouchAction="none"),n.className="scroll-content",Array.from(e.childNodes).forEach((function(e){n.appendChild(e)})),e.appendChild(n),this.track=new O(this),this.size=this.getSize(),this._plugins=function(e,t){return Array.from(q.order).filter((function(e){return!1!==t[e]})).map((function(r){var n=new(0,q.constructors[r])(e,t[r]);return t[r]=n.options,n}))}(this,this.options.plugins);var i=e.scrollLeft,o=e.scrollTop;e.scrollLeft=e.scrollTop=0,this.setPosition(i,o,{withoutCallbacks:!0});var a=window.ResizeObserver;"function"==typeof a&&(this._observer=new a((function(){r.update()})),this._observer.observe(n)),W.set(e,this),requestAnimationFrame((function(){r._init()}))}return Object.defineProperty(t.prototype,"parent",{get:function(){for(var e=this.containerEl.parentElement;e;){var t=W.get(e);if(t)return t;e=e.parentElement}return null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scrollTop",{get:function(){return this.offset.y},set:function(e){this.setPosition(this.scrollLeft,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scrollLeft",{get:function(){return this.offset.x},set:function(e){this.setPosition(e,this.scrollTop)},enumerable:!0,configurable:!0}),t.prototype.getSize=function(){return e=this.containerEl,t=this.contentEl,r=getComputedStyle(e),i=(n=["paddingTop","paddingBottom","paddingLeft","paddingRight"].map((function(e){return r[e]?parseFloat(r[e]):0})))[0]+n[1],o=n[2]+n[3],{container:{width:e.clientWidth,height:e.clientHeight},content:{width:t.offsetWidth-t.clientWidth+t.scrollWidth+o,height:t.offsetHeight-t.clientHeight+t.scrollHeight+i}};var e,t,r,n,i,o},t.prototype.update=function(){var e,t,r,n,i;t=(e=this).getSize(),r={x:Math.max(t.content.width-t.container.width,0),y:Math.max(t.content.height-t.container.height,0)},n=e.containerEl.getBoundingClientRect(),i={top:Math.max(n.top,0),right:Math.min(n.right,window.innerWidth),bottom:Math.min(n.bottom,window.innerHeight),left:Math.max(n.left,0)},e.size=t,e.limit=r,e.bounding=i,e.track.update(),e.setPosition(),this._plugins.forEach((function(e){e.onUpdate()}))},t.prototype.isVisible=function(e){return function(e,t){var r=e.bounding,n=t.getBoundingClientRect(),i=Math.max(r.top,n.top),o=Math.max(r.left,n.left),a=Math.min(r.right,n.right);return i<Math.min(r.bottom,n.bottom)&&o<a}(this,e)},t.prototype.setPosition=function(e,t,r){var n=this;void 0===e&&(e=this.offset.x),void 0===t&&(t=this.offset.y),void 0===r&&(r={});var i=function(e,t,r){var n=e.options,i=e.offset,o=e.limit,s=e.track,l=e.contentEl;return n.renderByPixels&&(t=Math.round(t),r=Math.round(r)),t=x(t,0,o.x),r=x(r,0,o.y),t!==i.x&&s.xAxis.show(),r!==i.y&&s.yAxis.show(),n.alwaysShowTracks||s.autoHideOnIdle(),t===i.x&&r===i.y?null:(i.x=t,i.y=r,v(l,{"-transform":"translate3d("+-t+"px, "+-r+"px, 0)"}),s.update(),{offset:a({},i),limit:a({},o)})}(this,e,t);i&&!r.withoutCallbacks&&this._listeners.forEach((function(e){e.call(n,i)}))},t.prototype.scrollTo=function(e,t,r,n){void 0===e&&(e=this.offset.x),void 0===t&&(t=this.offset.y),void 0===r&&(r=0),void 0===n&&(n={}),function(e,t,r,n,i){void 0===n&&(n=0);var o=void 0===i?{}:i,a=o.easing,s=void 0===a?B:a,l=o.callback,c=e.options,h=e.offset,u=e.limit;c.renderByPixels&&(t=Math.round(t),r=Math.round(r));var p=h.x,m=h.y,d=x(t,0,u.x)-p,f=x(r,0,u.y)-m,g=Date.now();cancelAnimationFrame(E.get(e)),function t(){var r=Date.now()-g,i=n?s(Math.min(r/n,1)):1;if(e.setPosition(p+d*i,m+f*i),r>=n)"function"==typeof l&&l.call(e);else{var o=requestAnimationFrame(t);E.set(e,o)}}()}(this,e,t,r,n)},t.prototype.scrollIntoView=function(e,t){void 0===t&&(t={}),function(e,t,r){var n=void 0===r?{}:r,i=n.alignToTop,o=void 0===i||i,a=n.onlyScrollIfNeeded,s=void 0!==a&&a,l=n.offsetTop,c=void 0===l?0:l,h=n.offsetLeft,u=void 0===h?0:h,p=n.offsetBottom,m=void 0===p?0:p,d=e.containerEl,f=e.bounding,g=e.offset,v=e.limit;if(t&&d.contains(t)){var b=t.getBoundingClientRect();if(!s||!e.isVisible(t)){var y=o?b.top-f.top-c:b.bottom-f.bottom+m;e.setMomentum(b.left-f.left-u,x(y,-g.y,v.y-g.y))}}}(this,e,t)},t.prototype.addListener=function(e){if("function"!=typeof e)throw new TypeError("[smooth-scrollbar] scrolling listener should be a function");this._listeners.add(e)},t.prototype.removeListener=function(e){this._listeners.delete(e)},t.prototype.addTransformableMomentum=function(e,t,r,n){this._updateDebounced();var i=this._plugins.reduce((function(e,t){return t.transformDelta(e,r)||e}),{x:e,y:t}),o=!this._shouldPropagateMomentum(i.x,i.y);o&&this.addMomentum(i.x,i.y),n&&n.call(this,o)},t.prototype.addMomentum=function(e,t){this.setMomentum(this._momentum.x+e,this._momentum.y+t)},t.prototype.setMomentum=function(e,t){0===this.limit.x&&(e=0),0===this.limit.y&&(t=0),this.options.renderByPixels&&(e=Math.round(e),t=Math.round(t)),this._momentum.x=e,this._momentum.y=t},t.prototype.updatePluginOptions=function(e,t){this._plugins.forEach((function(r){r.name===e&&Object.assign(r.options,t)}))},t.prototype.destroy=function(){var e,t=this.containerEl,r=this.contentEl;(e=h.get(this))&&(e.forEach((function(e){var t=e.elem,r=e.eventName,n=e.handler;t.removeEventListener(r,n,u())})),h.delete(this)),this._listeners.clear(),this.setMomentum(0,0),cancelAnimationFrame(this._renderID),this._observer&&this._observer.disconnect(),W.delete(this.containerEl);for(var n=Array.from(r.childNodes);t.firstChild;)t.removeChild(t.firstChild);n.forEach((function(e){t.appendChild(e)})),v(t,{overflow:""}),t.scrollTop=this.scrollTop,t.scrollLeft=this.scrollLeft,this._plugins.forEach((function(e){e.onDestroy()})),this._plugins.length=0},t.prototype._init=function(){var t=this;this.update(),Object.keys(e).forEach((function(r){e[r](t)})),this._plugins.forEach((function(e){e.onInit()})),this._render()},t.prototype._updateDebounced=function(){this.update()},t.prototype._shouldPropagateMomentum=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var r=this,n=r.options,i=r.offset,o=r.limit;if(!n.continuousScrolling)return!1;0===o.x&&0===o.y&&this._updateDebounced();var a=x(e+i.x,0,o.x),s=x(t+i.y,0,o.y),l=!0;return(l=(l=l&&a===i.x)&&s===i.y)&&(i.x===o.x||0===i.x||i.y===o.y||0===i.y)},t.prototype._render=function(){var e=this._momentum;if(e.x||e.y){var t=this._nextTick("x"),r=this._nextTick("y");e.x=t.momentum,e.y=r.momentum,this.setPosition(t.position,r.position)}var n=a({},this._momentum);this._plugins.forEach((function(e){e.onRender(n)})),this._renderID=requestAnimationFrame(this._render.bind(this))},t.prototype._nextTick=function(e){var t=this,r=t.options,n=t.offset,i=t._momentum,o=n[e],a=i[e];if(Math.abs(a)<=.1)return{momentum:0,position:o+a};var s=a*(1-r.damping);return r.renderByPixels&&(s|=0),{momentum:s,position:o+a-s}},s([z(100,!0)],t.prototype,"_updateDebounced",null),t}(),Y="smooth-scrollbar-style",Z=!1;function K(){if(!Z&&"undefined"!=typeof window){var e=document.createElement("style");e.id=Y,e.textContent="\n[data-scrollbar] {\n  display: block;\n  position: relative;\n}\n\n.scroll-content {\n  display: flow-root;\n  -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}\n\n.scrollbar-track {\n  position: absolute;\n  opacity: 0;\n  z-index: 1;\n  background: rgba(222, 222, 222, .75);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-transition: opacity 0.5s 0.5s ease-out;\n          transition: opacity 0.5s 0.5s ease-out;\n}\n.scrollbar-track.show,\n.scrollbar-track:hover {\n  opacity: 1;\n  -webkit-transition-delay: 0s;\n          transition-delay: 0s;\n}\n\n.scrollbar-track-x {\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 8px;\n}\n.scrollbar-track-y {\n  top: 0;\n  right: 0;\n  width: 8px;\n  height: 100%;\n}\n.scrollbar-thumb {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 8px;\n  height: 8px;\n  background: rgba(0, 0, 0, .5);\n  border-radius: 4px;\n}\n",document.head&&document.head.appendChild(e),Z=!0}}const Q=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return function(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t.init=function(e,t){if(!e||1!==e.nodeType)throw new TypeError("expect element to be DOM Element, but got "+e);return K(),W.has(e)?W.get(e):new X(e,t)},t.initAll=function(e){return Array.from(document.querySelectorAll("[data-scrollbar]"),(function(r){return t.init(r,e)}))},t.has=function(e){return W.has(e)},t.get=function(e){return W.get(e)},t.getAll=function(){return Array.from(W.values())},t.destroy=function(e){var t=W.get(e);t&&t.destroy()},t.destroyAll=function(){W.forEach((function(e){e.destroy()}))},t.use=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return P.apply(void 0,e)},t.attachStyle=function(){return K()},t.detachStyle=function(){return function(){if(Z&&"undefined"!=typeof window){var e=document.getElementById(Y);e&&e.parentNode&&(e.parentNode.removeChild(e),Z=!1)}}()},t.version="8.8.4",t.ScrollbarPlugin=_,t}(X);r(4089),r(509);const{marked:J}=r(970),ee=r(4058);J.use(ee({throwOnError:!1})),J.setOptions({highlight:function(e,t){const r=hljs.getLanguage(t)?t:"plaintext";return hljs.highlight(e,{language:r}).value},langPrefix:"hljs language-"});const te=new J.Renderer;J.setOptions({renderer:te});let re="",ne="",ie=n("#side-close-button"),oe=n("#side-open-button");ie.onClick((e=>{n("topnav").enableClass("sidebar-off"),n("sidebar").enableClass("sidebar-off"),n("content").enableClass("sidebar-off"),oe.enableClass("sidebar-off")})),oe.onClick((e=>{n("topnav").disableClass("sidebar-off"),n("sidebar").disableClass("sidebar-off"),n("content").disableClass("sidebar-off"),ie.disableClass("sidebar-off"),oe.disableClass("sidebar-off")}));let ae=new class{constructor(e){this.currentState=e,this.previousState=e,this.onChangeListener=[]}changeState(e){for(let t of this.onChangeListener)t(this.currentState,e);this.previousState=this.currentState,this.currentState=e}onChange(e){this.onChangeListener.push(e)}clearListener(){this.onChangeListener=[]}}(0);Q.init(n("blog").element);let se=new class{constructor(e,t,r){this.activeIndex=r,this.parent=e,this.parent.classList.add("sidebar"),this.children=[],this.items=t,this.items.forEach(((e,t)=>{let r=document.createElement("a");this.children.push(r),r.innerText=e[0],r.href="#"+e[0],r.index=t,r.onclick=()=>{for(let e of this.children)n(e).disableClass("active");this.activeIndex=r.index,n(r).enableClass("active"),e[1]()},t===this.activeIndex&&r.classList.add("active"),this.parent.appendChild(r)}))}addItem(e,t,r=!1){let i=document.createElement("a");this.children.push(i),i.innerText=e,i.href="#"+e,i.index=this.children.length;let o=()=>{for(let e of this.children)n(e).disableClass("active");this.activeIndex=i.index,n(i).enableClass("active"),t()};i.onclick=o,i.index===this.activeIndex&&i.classList.add("active"),this.parent.appendChild(i),r&&o()}}(document.getElementById("side"),[],0),le=[["Resumé",()=>{ae.changeState(2)}],["Publications",()=>{ae.changeState(1)}],["Home",()=>{ae.changeState(0)}]],ce=new class{constructor(e,t,r){this.activeIndex=r,this.parent=e,this.container=document.createElement("div"),this.container.classList.add("topnav"),this.parent.appendChild(this.container);let i=document.createElement("a");i.innerText="Tianyu's Blog",i.style.float="left",i.style.fontWeight="bold",i.href="https://weakknight.github.io/",this.container.appendChild(i),this.children=[],this.items=t,this.items.forEach(((e,t)=>{let r=document.createElement("a");this.children.push(r),r.innerText=e[0],r.href="#"+e[0],r.index=t,r.onclick=()=>{for(let e of this.children)n(e).disableClass("active");this.activeIndex=r.index,n(r).enableClass("active"),e[1]()},t===this.activeIndex&&r.classList.add("active"),this.container.appendChild(r)}))}setSelectionByIndex(e){for(let e of this.children)n(e).disableClass("active");this.items.forEach(((t,r)=>{let i=this.children[r];r===e&&(this.activeIndex=r,n(i).enableClass("active"),t[1]())}))}}(document.getElementById("header"),le,le.length-1);ae.onChange(((e,t)=>{n("scroll-content").html("");const r=n("topnav").element.offsetHeight;document.querySelector(".content").style.height=`calc(100vh - ${r}px)`,0===t?(n("topnav").disableClass("sidebar-off"),n("sidebar").disableClass("sidebar-off"),n("content").disableClass("noSideBar"),n("content").disableClass("miscs"),i.getBlogContent(re).then((e=>{document.title=ne;try{n("scroll-content").html(J(e,{renderer:te}))}catch(e){console.log(e)}}))):(n("topnav").enableClass("sidebar-off"),n("sidebar").enableClass("sidebar-off"),n("content").enableClass("noSideBar"),n("content").enableClass("miscs"),2===t?i.getBlogContent("resume.md").then((e=>{n("scroll-content").html(J(e,{renderer:te}))})):1===t&&i.getBlogContent("publications.md").then((e=>{n("scroll-content").html(J(e,{renderer:te}))})))})),i.getBlogList().then((e=>{let t="";""!=window.location.hash&&(t=decodeURIComponent(window.location.hash)),console.log("hashBlogName Is "+t);for(let r of e){let e=!1;""!=t?"#"+r.title==t&&(console.log("find hashed default"),e=!0):e||!0===r.default&&(console.log(r.default),e=!0),se.addItem(r.title,(()=>{re=r.path,ne=r.title+"----Tianyu Li's Blog",document.title=ne,i.getBlogContent(r.path).then((e=>{try{n("scroll-content").html(J(e,{renderer:te}))}catch(e){console.log(e)}}))}),e),"#Publications"!==window.location.hash&&"#Resum%C3%A9"!==window.location.hash&&e&&(re=r.path,ne=r.title+"----Tianyu Li's Blog",document.title=ne)}"#Publications"===window.location.hash?ce.setSelectionByIndex(1):"#Resum%C3%A9"===window.location.hash?ce.setSelectionByIndex(0):ce.setSelectionByIndex(2)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,