(()=>{var e={642:(e,t,n)=>{(t=n(645)(!1)).push([e.id,".topnav {\r\n    background-color: #373738;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    position: fixed;\r\n    top: 0px;\r\n    z-index: 10000;\r\n}\r\n\r\n.topnav a {\r\n    float: right;\r\n    color: #cccccc;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n.topnav a:hover {\r\n    background-color: #505050;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}\r\n\r\n.topnav a.active {\r\n    background-color: #303030;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}",""]),e.exports=t},369:(e,t,n)=>{(t=n(645)(!1)).push([e.id,".sidebar {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 200px;\r\n    background-color: rgb(37, 37, 38);\r\n    position: fixed;\r\n    height: calc(100% - 48px);\r\n    overflow: auto;\r\n    top: 48px;\r\n}\r\n\r\n.sidebar.sidebar-off{\r\n    display: none;\r\n}\r\n\r\n.sidebar a {\r\n    display: block;\r\n    color: #cccccc;\r\n    padding: 7px;\r\n    text-decoration: none;\r\n    font-size: 13px;\r\n    text-align: center;\r\n}\r\n\r\n.sidebar a.active {\r\n    background-color: rgb(55, 55, 61);\r\n    color: #cccccc;\r\n}\r\n\r\n.sidebar a:hover:not(.active) {\r\n    background-color: rgb(42, 45, 46);\r\n    color: #cccccc;\r\n}",""]),e.exports=t},143:(e,t,n)=>{(t=n(645)(!1)).push([e.id,"/*\r\nAtom One Dark by Daniel Gamage\r\nOriginal One Dark Syntax theme from https://github.com/atom/one-dark-syntax\r\nbase:    #282c34\r\nmono-1:  #abb2bf\r\nmono-2:  #818896\r\nmono-3:  #5c6370\r\nhue-1:   #56b6c2\r\nhue-2:   #61aeee\r\nhue-3:   #c678dd\r\nhue-4:   #98c379\r\nhue-5:   #e06c75\r\nhue-5-2: #be5046\r\nhue-6:   #d19a66\r\nhue-6-2: #e6c07b\r\n*/\r\n\r\n.hljs {\r\n    color: #cccccc;\r\n    background: rgb(37,37,38);\r\n  }\r\n  \r\n  .hljs-comment,\r\n  .hljs-quote {\r\n    color: #5c6370;\r\n    font-style: italic;\r\n  }\r\n  \r\n  .hljs-doctag,\r\n  .hljs-keyword,\r\n  .hljs-formula {\r\n    color: #c678dd;\r\n  }\r\n  \r\n  .hljs-section,\r\n  .hljs-name,\r\n  .hljs-selector-tag,\r\n  .hljs-deletion,\r\n  .hljs-subst {\r\n    color: #e06c75;\r\n  }\r\n  \r\n  .hljs-literal {\r\n    color: #56b6c2;\r\n  }\r\n  \r\n  .hljs-string,\r\n  .hljs-regexp,\r\n  .hljs-addition,\r\n  .hljs-attribute,\r\n  .hljs-meta .hljs-string {\r\n    color: #98c379;\r\n  }\r\n  \r\n  .hljs-attr,\r\n  .hljs-variable,\r\n  .hljs-template-variable,\r\n  .hljs-type,\r\n  .hljs-selector-class,\r\n  .hljs-selector-attr,\r\n  .hljs-selector-pseudo,\r\n  .hljs-number {\r\n    color: #d19a66;\r\n  }\r\n  \r\n  .hljs-symbol,\r\n  .hljs-bullet,\r\n  .hljs-link,\r\n  .hljs-meta,\r\n  .hljs-selector-id,\r\n  .hljs-title {\r\n    color: #61aeee;\r\n  }\r\n  \r\n  .hljs-built_in,\r\n  .hljs-title.class_,\r\n  .hljs-class .hljs-title {\r\n    color: #e6c07b;\r\n  }\r\n  \r\n  .hljs-emphasis {\r\n    font-style: italic;\r\n  }\r\n  \r\n  .hljs-strong {\r\n    font-weight: bold;\r\n  }\r\n  \r\n  .hljs-link {\r\n    text-decoration: underline;\r\n  }",""]),e.exports=t},28:(e,t,n)=>{(t=n(645)(!1)).push([e.id,"body {\r\n    background-color: #1e1e1e !important;\r\n    margin: 0;\r\n    overflow: hidden;\r\n}\r\n\r\npre\r\n{\r\n    background-color: rgb(37,37,38);\r\n    overflow: auto;\r\n}\r\n\r\ncode\r\n{\r\n    color: #cccccc;\r\n}\r\n\r\np\r\n{\r\n    color: #cccccc;\r\n}\r\n\r\na\r\n{\r\n    color: rgb(55, 148,255);\r\n}\r\n\r\ndiv.content {\r\n    margin-left: 200px;\r\n    margin-right: 30px;\r\n    margin-top: 15px;\r\n    top: 48px;\r\n    position: fixed;\r\n    /* padding: 1px 16px; */\r\n    height: calc(100% - 48px);\r\n    width: calc(100% - 230px);\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n}\r\n\r\ndiv.content.sidebar-off {\r\n    width: calc(100% - 60px);\r\n    margin-left: 30px;\r\n}\r\n\r\n#side-close-button\r\n{\r\n    display: block;\r\n    position: fixed;\r\n    width: 30px;\r\n    height: 80px;\r\n    background-color: rgb(55, 55, 56);\r\n    left: 170px;\r\n    top: 50%;\r\n    opacity: 0.5;\r\n    text-align: center;\r\n    line-height: 80px;\r\n    font-size: 17px;\r\n    color: #cccccc;\r\n    cursor: pointer;\r\n}\r\n\r\n#side-close-button.sidebar-off\r\n{\r\n    display: none;\r\n    overflow: hidden;\r\n}\r\n\r\n#side-open-button\r\n{\r\n    display: none;\r\n}\r\n\r\n#side-open-button.sidebar-off\r\n{\r\n    display: block;\r\n    position: fixed;\r\n    width: 30px;\r\n    height: 80px;\r\n    background-color: rgb(55, 55, 56);\r\n    left: 0px;\r\n    top: 50%;\r\n    opacity: 0.5;\r\n    text-align: center;\r\n    line-height: 80px;\r\n    font-size: 17px;\r\n    color: #cccccc;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n}\r\n\r\n.blog>p {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h1 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h2 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h3 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h4 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h5 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog {\r\n    padding: 20px;\r\n    background-color: rgb(30,30,30);\r\n}\r\n\r\ndiv.content.noSideBar{\r\n    width: 100%;\r\n    margin-left: 0px;\r\n}\r\n\r\n/* width */\r\n::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n    background: rgb(30, 30, 30);\r\n    border-left: 1px solid rgb(66, 66, 66);\r\n    border-right: 1px solid rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: rgb(79, 79, 79);\r\n}",""]),e.exports=t},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r,s,i=e[1]||"",l=e[3];if(!l)return i;if(t&&"function"==typeof btoa){var o=(n=l,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(s," */")),a=l.sources.map((function(e){return"/*# sourceURL=".concat(l.sourceRoot||"").concat(e," */")}));return[i].concat(a).concat([o]).join("\n")}return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var o=0;o<e.length;o++){var a=[].concat(e[o]);r&&s[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),t.push(a))}},t}},763:(e,t,n)=>{var r=n(379),s=n(642);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.id,s,""]]);r(s,{insert:"head",singleton:!1}),e.exports=s.locals||{}},861:(e,t,n)=>{var r=n(379),s=n(369);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.id,s,""]]);r(s,{insert:"head",singleton:!1}),e.exports=s.locals||{}},509:(e,t,n)=>{var r=n(379),s=n(143);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.id,s,""]]);r(s,{insert:"head",singleton:!1}),e.exports=s.locals||{}},89:(e,t,n)=>{var r=n(379),s=n(28);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.id,s,""]]);r(s,{insert:"head",singleton:!1}),e.exports=s.locals||{}},379:(e,t,n)=>{"use strict";var r,s=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function o(e,t){for(var n={},r=[],s=0;s<e.length;s++){var o=e[s],a=t.base?o[0]+t.base:o[0],c=n[a]||0,h="".concat(a," ").concat(c);n[a]=c+1;var p=l(h),u={css:o[1],media:o[2],sourceMap:o[3]};-1!==p?(i[p].references++,i[p].updater(u)):i.push({identifier:h,updater:f(u,t),references:1}),r.push(h)}return r}function a(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var l=s(e.insert||"head");if(!l)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");l.appendChild(t)}return t}var c,h=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var s=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,s);else{var i=document.createTextNode(s),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(i,l[t]):e.appendChild(i)}}function u(e,t,n){var r=n.css,s=n.media,i=n.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,g=0;function f(e,t){var n,r,s;if(t.singleton){var i=g++;n=d||(d=a(t)),r=p.bind(null,n,i,!1),s=p.bind(null,n,i,!0)}else n=a(t),r=u.bind(null,n,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else s()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=o(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var s=l(n[r]);i[s].references--}for(var a=o(e,t),c=0;c<n.length;c++){var h=l(n[c]);0===i[h].references&&(i[h].updater(),i.splice(h,1))}n=a}}}},970:(e,t)=>{"use strict";function n(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function r(e){t.defaults=e}t.defaults={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const s=/[&<>"']/,i=new RegExp(s.source,"g"),l=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,o=new RegExp(l.source,"g"),a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},c=e=>a[e];function h(e,t){if(t){if(s.test(e))return e.replace(i,c)}else if(l.test(e))return e.replace(o,c);return e}const p=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function u(e){return e.replace(p,((e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""))}const d=/(^|[^\[])\^/g;function g(e,t){e="string"==typeof e?e:e.source,t=t||"";const n={replace:(t,r)=>(r=(r="object"==typeof r&&"source"in r?r.source:r).replace(d,"$1"),e=e.replace(t,r),n),getRegex:()=>new RegExp(e,t)};return n}const f=/[^\w:]/g,k=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function b(e,t,n){if(e){let e;try{e=decodeURIComponent(u(n)).replace(f,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!k.test(n)&&(n=function(e,t){m[" "+e]||(x.test(e)?m[" "+e]=e+"/":m[" "+e]=$(e,"/",!0));const n=-1===(e=m[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(w,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(y,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}const m={},x=/^[^:]+:\/*[^/]*$/,w=/^([^:]+:)[\s\S]*$/,y=/^([^:]+:\/*[^/]*)[\s\S]*$/,v={exec:()=>null};function _(e,t){const n=e.replace(/\|/g,((e,t,n)=>{let r=!1,s=t;for(;--s>=0&&"\\"===n[s];)r=!r;return r?"|":" |"})).split(/ \|/);let r=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),t)if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function $(e,t,n){const r=e.length;if(0===r)return"";let s=0;for(;s<r;){const i=e.charAt(r-s-1);if(i!==t||n){if(i===t||!n)break;s++}else s++}return e.slice(0,r-s)}function z(e,t,n,r){const s=t.href,i=t.title?h(t.title):null,l=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){r.state.inLink=!0;const e={type:"link",raw:n,href:s,title:i,text:l,tokens:r.inlineTokens(l)};return r.state.inLink=!1,e}return{type:"image",raw:n,href:s,title:i,text:h(l)}}class S{options;rules;lexer;constructor(e){this.options=e||t.defaults}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:$(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function(e,t){const n=e.match(/^(\s+)(?:```)/);if(null===n)return t;const r=n[1];return t.split("\n").map((e=>{const t=e.match(/^\s+/);if(null===t)return e;const[n]=t;return n.length>=r.length?e.slice(r.length):e})).join("\n")}(e,t[3]||"");return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline._escapes,"$1"):t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(/#$/.test(e)){const t=$(e,"#");this.options.pedantic?e=t.trim():t&&!/ $/.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){const e=t[0].replace(/^ *>[ \t]?/gm,""),n=this.lexer.state.top;this.lexer.state.top=!0;const r=this.lexer.blockTokens(e);return this.lexer.state.top=n,{type:"blockquote",raw:t[0],tokens:r,text:e}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n=t[1].trim();const r=n.length>1,s={type:"list",raw:"",ordered:r,start:r?+n.slice(0,-1):"",loose:!1,items:[]};n=r?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=r?n:"[*+-]");const i=new RegExp(`^( {0,3}${n})((?:[\t ][^\\n]*)?(?:\\n|$))`);let l="",o="",a=!1;for(;e;){let n=!1;if(!(t=i.exec(e)))break;if(this.rules.block.hr.test(e))break;l=t[0],e=e.substring(l.length);let r=t[2].split("\n",1)[0].replace(/^\t+/,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],h=0;this.options.pedantic?(h=2,o=r.trimLeft()):(h=t[2].search(/[^ ]/),h=h>4?1:h,o=r.slice(h),h+=t[1].length);let p=!1;if(!r&&/^ *$/.test(c)&&(l+=c+"\n",e=e.substring(c.length+1),n=!0),!n){const t=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),n=new RegExp(`^ {0,${Math.min(3,h-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),s=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:\`\`\`|~~~)`),i=new RegExp(`^ {0,${Math.min(3,h-1)}}#`);for(;e;){const a=e.split("\n",1)[0];if(c=a,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),s.test(c))break;if(i.test(c))break;if(t.test(c))break;if(n.test(e))break;if(c.search(/[^ ]/)>=h||!c.trim())o+="\n"+c.slice(h);else{if(p)break;if(r.search(/[^ ]/)>=4)break;if(s.test(r))break;if(i.test(r))break;if(n.test(r))break;o+="\n"+c}p||c.trim()||(p=!0),l+=a+"\n",e=e.substring(a.length+1),r=c.slice(h)}}s.loose||(a?s.loose=!0:/\n *\n *$/.test(l)&&(a=!0));let u,d=null;this.options.gfm&&(d=/^\[[ xX]\] /.exec(o),d&&(u="[ ] "!==d[0],o=o.replace(/^\[[ xX]\] +/,""))),s.items.push({type:"list_item",raw:l,task:!!d,checked:u,loose:!1,text:o,tokens:[]}),s.raw+=l}s.items[s.items.length-1].raw=l.trimRight(),s.items[s.items.length-1].text=o.trimRight(),s.raw=s.raw.trimRight();for(let e=0;e<s.items.length;e++)if(this.lexer.state.top=!1,s.items[e].tokens=this.lexer.blockTokens(s.items[e].text,[]),!s.loose){const t=s.items[e].tokens.filter((e=>"space"===e.type)),n=t.length>0&&t.some((e=>/\n.*\n/.test(e.raw)));s.loose=n}if(s.loose)for(let e=0;e<s.items.length;e++)s.items[e].loose=!0;return s}}html(e){const t=this.rules.block.html.exec(e);if(t){const e={type:"html",block:!0,raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:t[0]};if(this.options.sanitize){const n=this.options.sanitizer?this.options.sanitizer(t[0]):h(t[0]),r=e;r.type="paragraph",r.text=n,r.tokens=this.lexer.inline(n)}return e}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(/\s+/g," "),n=t[2]?t[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",r=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline._escapes,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:n,title:r}}}table(e){const t=this.rules.block.table.exec(e);if(t){const e={type:"table",raw:t[0],header:_(t[1]).map((e=>({text:e,tokens:[]}))),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(e.header.length===e.align.length){let t,n,r,s,i=e.align.length;for(t=0;t<i;t++){const n=e.align[t];n&&(/^ *-+: *$/.test(n)?e.align[t]="right":/^ *:-+: *$/.test(n)?e.align[t]="center":/^ *:-+ *$/.test(n)?e.align[t]="left":e.align[t]=null)}for(i=e.rows.length,t=0;t<i;t++)e.rows[t]=_(e.rows[t],e.header.length).map((e=>({text:e,tokens:[]})));for(i=e.header.length,n=0;n<i;n++)e.header[n].tokens=this.lexer.inline(e.header[n].text);for(i=e.rows.length,n=0;n<i;n++)for(s=e.rows[n],r=0;r<s.length;r++)s[r].tokens=this.lexer.inline(s[r].text);return e}}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:h(t[1])}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):h(t[0]):t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const t=$(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;let n=0;for(let r=0;r<e.length;r++)if("\\"===e[r])r++;else if(e[r]===t[0])n++;else if(e[r]===t[1]&&(n--,n<0))return r;return-1}(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],r="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n);e&&(n=e[1],r=e[3])}else r=t[3]?t[3].slice(1,-1):"";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(e)?n.slice(1):n.slice(1,-1)),z(t,{href:n?n.replace(this.rules.inline._escapes,"$1"):n,title:r?r.replace(this.rules.inline._escapes,"$1"):r},t[0],this.lexer)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){let e=(n[2]||n[1]).replace(/\s+/g," ");if(e=t[e.toLowerCase()],!e){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return z(n,e,n[0],this.lexer)}}emStrong(e,t,n=""){let r=this.rules.inline.emStrong.lDelim.exec(e);if(r&&(!r[3]||!n.match(/[\p{L}\p{N}]/u))&&(!r[1]&&!r[2]||!n||this.rules.inline.punctuation.exec(n))){const n=[...r[0]].length-1;let s,i,l=n,o=0;const a="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(a.lastIndex=0,t=t.slice(-1*e.length+n);null!=(r=a.exec(t));){if(s=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!s)continue;if(i=[...s].length,r[3]||r[4]){l+=i;continue}if((r[5]||r[6])&&n%3&&!((n+i)%3)){o+=i;continue}if(l-=i,l>0)continue;i=Math.min(i,i+l+o);const t=[...e].slice(0,n+r.index+i+1).join("");if(Math.min(n,i)%2){const e=t.slice(1,-1);return{type:"em",raw:t,text:e,tokens:this.lexer.inlineTokens(e)}}const a=t.slice(2,-2);return{type:"strong",raw:t,text:a,tokens:this.lexer.inlineTokens(a)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(/\n/g," ");const n=/[^ ]/.test(e),r=/^ /.test(e)&&/ $/.test(e);return n&&r&&(e=e.substring(1,e.length-1)),e=h(e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e,t){const n=this.rules.inline.autolink.exec(e);if(n){let e,r;return"@"===n[2]?(e=h(this.options.mangle?t(n[1]):n[1]),r="mailto:"+e):(e=h(n[1]),r=e),{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}url(e,t){let n;if(n=this.rules.inline.url.exec(e)){let e,r;if("@"===n[2])e=h(this.options.mangle?t(n[0]):n[0]),r="mailto:"+e;else{let t;do{t=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(t!==n[0]);e=h(n[0]),r="www."===n[1]?"http://"+n[0]:n[0]}return{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,t){const n=this.rules.inline.text.exec(e);if(n){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):h(n[0]):n[0]:h(this.options.smartypants?t(n[0]):n[0]),{type:"text",raw:n[0],text:e}}}}const T={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:v,lheading:/^((?:(?!^bull ).|\n(?!\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};T.def=g(T.def).replace("label",T._label).replace("title",T._title).getRegex(),T.bullet=/(?:[*+-]|\d{1,9}[.)])/,T.listItemStart=g(/^( *)(bull) */).replace("bull",T.bullet).getRegex(),T.list=g(T.list).replace(/bull/g,T.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+T.def.source+")").getRegex(),T._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",T._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,T.html=g(T.html,"i").replace("comment",T._comment).replace("tag",T._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),T.lheading=g(T.lheading).replace(/bull/g,T.bullet).getRegex(),T.paragraph=g(T._paragraph).replace("hr",T.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",T._tag).getRegex(),T.blockquote=g(T.blockquote).replace("paragraph",T.paragraph).getRegex(),T.normal={...T},T.gfm={...T.normal,table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"},T.gfm.table=g(T.gfm.table).replace("hr",T.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",T._tag).getRegex(),T.gfm.paragraph=g(T._paragraph).replace("hr",T.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",T.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",T._tag).getRegex(),T.pedantic={...T.normal,html:g("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",T._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:v,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:g(T.normal._paragraph).replace("hr",T.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",T.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()};const C={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:v,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,rDelimAst:/^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,rDelimUnd:/^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:v,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^((?![*_])[\spunctuation])/};function R(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function I(e){let t="";for(let n=0;n<e.length;n++)t+="&#"+(Math.random()>.5?"x"+e.charCodeAt(n).toString(16):e.charCodeAt(n).toString())+";";return t}C._punctuation="\\p{P}$+<=>`^|~",C.punctuation=g(C.punctuation,"u").replace(/punctuation/g,C._punctuation).getRegex(),C.blockSkip=/\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g,C.anyPunctuation=/\\[punct]/g,C._escapes=/\\([punct])/g,C._comment=g(T._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),C.emStrong.lDelim=g(C.emStrong.lDelim,"u").replace(/punct/g,C._punctuation).getRegex(),C.emStrong.rDelimAst=g(C.emStrong.rDelimAst,"gu").replace(/punct/g,C._punctuation).getRegex(),C.emStrong.rDelimUnd=g(C.emStrong.rDelimUnd,"gu").replace(/punct/g,C._punctuation).getRegex(),C.anyPunctuation=g(C.anyPunctuation,"gu").replace(/punct/g,C._punctuation).getRegex(),C._escapes=g(C._escapes,"gu").replace(/punct/g,C._punctuation).getRegex(),C._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,C._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,C.autolink=g(C.autolink).replace("scheme",C._scheme).replace("email",C._email).getRegex(),C._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,C.tag=g(C.tag).replace("comment",C._comment).replace("attribute",C._attribute).getRegex(),C._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,C._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,C._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,C.link=g(C.link).replace("label",C._label).replace("href",C._href).replace("title",C._title).getRegex(),C.reflink=g(C.reflink).replace("label",C._label).replace("ref",T._label).getRegex(),C.nolink=g(C.nolink).replace("ref",T._label).getRegex(),C.reflinkSearch=g(C.reflinkSearch,"g").replace("reflink",C.reflink).replace("nolink",C.nolink).getRegex(),C.normal={...C},C.pedantic={...C.normal,strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:g(/^!?\[(label)\]\((.*?)\)/).replace("label",C._label).getRegex(),reflink:g(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",C._label).getRegex()},C.gfm={...C.normal,escape:g(C.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},C.gfm.url=g(C.gfm.url,"i").replace("email",C.gfm._extended_email).getRegex(),C.breaks={...C.gfm,br:g(C.br).replace("{2,}","*").getRegex(),text:g(C.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()};class j{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||t.defaults,this.options.tokenizer=this.options.tokenizer||new S,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const n={block:T.normal,inline:C.normal};this.options.pedantic?(n.block=T.pedantic,n.inline=C.pedantic):this.options.gfm&&(n.block=T.gfm,this.options.breaks?n.inline=C.breaks:n.inline=C.gfm),this.tokenizer.rules=n}static get rules(){return{block:T,inline:C}}static lex(e,t){return new j(t).lex(e)}static lexInline(e,t){return new j(t).inlineTokens(e)}lex(e){let t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens}blockTokens(e,t=[]){let n,r,s,i;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,t,n)=>t+"    ".repeat(n.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((r=>!!(n=r.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),r=t[t.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?t.push(n):(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),r=t[t.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(r.raw+="\n"+n.raw,r.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else{if(s=e,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startBlock.forEach((e=>{r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(s=e.substring(0,t+1))}if(this.state.top&&(n=this.tokenizer.paragraph(s)))r=t[t.length-1],i&&"paragraph"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n),i=s.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n,r,s,i,l,o,a=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(i=this.tokenizer.rules.inline.reflinkSearch.exec(a));)e.includes(i[0].slice(i[0].lastIndexOf("[")+1,-1))&&(a=a.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+a.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(i=this.tokenizer.rules.inline.blockSkip.exec(a));)a=a.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+a.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(i=this.tokenizer.rules.inline.anyPunctuation.exec(a));)a=a.slice(0,i.index)+"++"+a.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;e;)if(l||(o=""),l=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((r=>!!(n=r.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,a,o))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e,I))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e,I))){if(s=e,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startInline.forEach((e=>{r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(s=e.substring(0,t+1))}if(n=this.tokenizer.inlineText(s,R))e=e.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(o=n.raw.slice(-1)),l=!0,r=t[t.length-1],r&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(n.raw.length),t.push(n);return t}}class A{options;constructor(e){this.options=e||t.defaults}code(e,t,n){const r=(t||"").match(/^\S*/)?.[0];if(this.options.highlight){const t=this.options.highlight(e,r);null!=t&&t!==e&&(n=!0,e=t)}return e=e.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+h(r)+'">'+(n?e:h(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:h(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e,t){return e}heading(e,t,n,r){return this.options.headerIds?`<h${t} id="${this.options.headerPrefix+r.slug(n)}">${e}</h${t}>\n`:`<h${t}>${e}</h${t}>\n`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){const r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"}listitem(e,t,n){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>\n`}table(e,t){return t&&(t=`<tbody>${t}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,t){const n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,t,n){const r=b(this.options.sanitize,this.options.baseUrl,e);if(null===r)return n;let s='<a href="'+(e=r)+'"';return t&&(s+=' title="'+t+'"'),s+=">"+n+"</a>",s}image(e,t,n){const r=b(this.options.sanitize,this.options.baseUrl,e);if(null===r)return n;let s=`<img src="${e=r}" alt="${n}"`;return t&&(s+=` title="${t}"`),s+=this.options.xhtml?"/>":">",s}text(e){return e}}class E{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}class L{seen;constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,t){let n=e,r=0;if(this.seen.hasOwnProperty(n)){r=this.seen[e];do{r++,n=e+"-"+r}while(this.seen.hasOwnProperty(n))}return t||(this.seen[e]=r,this.seen[n]=0),n}slug(e,t={}){const n=this.serialize(e);return this.getNextSafeSlug(n,t.dryrun)}}class B{options;renderer;textRenderer;slugger;constructor(e){this.options=e||t.defaults,this.options.renderer=this.options.renderer||new A,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new E,this.slugger=new L}static parse(e,t){return new B(t).parse(e)}static parseInline(e,t){return new B(t).parseInline(e)}parse(e,t=!0){let n="";for(let r=0;r<e.length;r++){const s=e[r];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[s.type]){const e=s,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){n+=t||"";continue}}switch(s.type){case"space":continue;case"hr":n+=this.renderer.hr();continue;case"heading":{const e=s;n+=this.renderer.heading(this.parseInline(e.tokens),e.depth,u(this.parseInline(e.tokens,this.textRenderer)),this.slugger);continue}case"code":{const e=s;n+=this.renderer.code(e.text,e.lang,!!e.escaped);continue}case"table":{const e=s;let t="",r="";for(let t=0;t<e.header.length;t++)r+=this.renderer.tablecell(this.parseInline(e.header[t].tokens),{header:!0,align:e.align[t]});t+=this.renderer.tablerow(r);let i="";for(let t=0;t<e.rows.length;t++){const n=e.rows[t];r="";for(let t=0;t<n.length;t++)r+=this.renderer.tablecell(this.parseInline(n[t].tokens),{header:!1,align:e.align[t]});i+=this.renderer.tablerow(r)}n+=this.renderer.table(t,i);continue}case"blockquote":{const e=s,t=this.parse(e.tokens);n+=this.renderer.blockquote(t);continue}case"list":{const e=s,t=e.ordered,r=e.start,i=e.loose;let l="";for(let t=0;t<e.items.length;t++){const n=e.items[t],r=n.checked,s=n.task;let o="";if(n.task){const e=this.renderer.checkbox(!!r);i?n.tokens.length>0&&"paragraph"===n.tokens[0].type?(n.tokens[0].text=e+" "+n.tokens[0].text,n.tokens[0].tokens&&n.tokens[0].tokens.length>0&&"text"===n.tokens[0].tokens[0].type&&(n.tokens[0].tokens[0].text=e+" "+n.tokens[0].tokens[0].text)):n.tokens.unshift({type:"text",text:e}):o+=e}o+=this.parse(n.tokens,i),l+=this.renderer.listitem(o,s,!!r)}n+=this.renderer.list(l,t,r);continue}case"html":{const e=s;n+=this.renderer.html(e.text,e.block);continue}case"paragraph":{const e=s;n+=this.renderer.paragraph(this.parseInline(e.tokens));continue}case"text":{let i=s,l=i.tokens?this.parseInline(i.tokens):i.text;for(;r+1<e.length&&"text"===e[r+1].type;)i=e[++r],l+="\n"+(i.tokens?this.parseInline(i.tokens):i.text);n+=t?this.renderer.paragraph(l):l;continue}default:{const e='Token with "'+s.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}parseInline(e,t){t=t||this.renderer;let n="";for(let r=0;r<e.length;r++){const s=e[r];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[s.type]){const e=this.options.extensions.renderers[s.type].call({parser:this},s);if(!1!==e||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(s.type)){n+=e||"";continue}}switch(s.type){case"escape":{const e=s;n+=t.text(e.text);break}case"html":{const e=s;n+=t.html(e.text);break}case"link":{const e=s;n+=t.link(e.href,e.title,this.parseInline(e.tokens,t));break}case"image":{const e=s;n+=t.image(e.href,e.title,e.text);break}case"strong":{const e=s;n+=t.strong(this.parseInline(e.tokens,t));break}case"em":{const e=s;n+=t.em(this.parseInline(e.tokens,t));break}case"codespan":{const e=s;n+=t.codespan(e.text);break}case"br":n+=t.br();break;case"del":{const e=s;n+=t.del(this.parseInline(e.tokens,t));break}case"text":{const e=s;n+=t.text(e.text);break}default:{const e='Token with "'+s.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}}class P{options;constructor(e){this.options=e||t.defaults}static passThroughHooks=new Set(["preprocess","postprocess"]);preprocess(e){return e}postprocess(e){return e}}class O{defaults={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};options=this.setOptions;parse=this.#e(j.lex,B.parse);parseInline=this.#e(j.lexInline,B.parseInline);Parser=B;parser=B.parse;Renderer=A;TextRenderer=E;Lexer=j;lexer=j.lex;Tokenizer=S;Slugger=L;Hooks=P;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(const r of e)switch(n=n.concat(t.call(this,r)),r.type){case"table":{const e=r;for(const r of e.header)n=n.concat(this.walkTokens(r.tokens,t));for(const r of e.rows)for(const e of r)n=n.concat(this.walkTokens(e.tokens,t));break}case"list":{const e=r;n=n.concat(this.walkTokens(e.items,t));break}default:{const e=r;this.defaults.extensions?.childTokens?.[e.type]?this.defaults.extensions.childTokens[e.type].forEach((r=>{n=n.concat(this.walkTokens(e[r],t))})):e.tokens&&(n=n.concat(this.walkTokens(e.tokens,t)))}}return n}use(...e){const t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach((e=>{const n={...e};if(n.async=this.defaults.async||n.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if("renderer"in e){const n=t.renderers[e.name];t.renderers[e.name]=n?function(...t){let r=e.renderer.apply(this,t);return!1===r&&(r=n.apply(this,t)),r}:e.renderer}if("tokenizer"in e){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");const n=t[e.level];n?n.unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}"childTokens"in e&&e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),n.extensions=t),e.renderer){const t=this.defaults.renderer||new A(this.defaults);for(const n in e.renderer){const r=e.renderer[n],s=n,i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n||""}}n.renderer=t}if(e.tokenizer){const t=this.defaults.tokenizer||new S(this.defaults);for(const n in e.tokenizer){const r=e.tokenizer[n],s=n,i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.tokenizer=t}if(e.hooks){const t=this.defaults.hooks||new P;for(const n in e.hooks){const r=e.hooks[n],s=n,i=t[s];P.passThroughHooks.has(n)?t[s]=e=>{if(this.defaults.async)return Promise.resolve(r.call(t,e)).then((e=>i.call(t,e)));const n=r.call(t,e);return i.call(t,n)}:t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.hooks=t}if(e.walkTokens){const t=this.defaults.walkTokens,r=e.walkTokens;n.walkTokens=function(e){let n=[];return n.push(r.call(this,e)),t&&(n=n.concat(t.call(this,e))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(e){return this.defaults={...this.defaults,...e},this}#e(e,t){return(n,r,s)=>{"function"==typeof r&&(s=r,r=null);const i={...r},l={...this.defaults,...i};!0===this.defaults.async&&!1===i.async&&(l.silent||console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored."),l.async=!0);const o=this.#t(!!l.silent,!!l.async,s);if(null==n)return o(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof n)return o(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(n)+", string expected"));if(function(e,t){e&&!e.silent&&(t&&console.warn("marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async"),(e.sanitize||e.sanitizer)&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options"),(e.highlight||"language-"!==e.langPrefix)&&console.warn("marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight."),e.mangle&&console.warn("marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`."),e.baseUrl&&console.warn("marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url."),e.smartypants&&console.warn("marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants."),e.xhtml&&console.warn("marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml."),(e.headerIds||e.headerPrefix)&&console.warn("marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`."))}(l,s),l.hooks&&(l.hooks.options=l),s){const r=s,i=l.highlight;let a;try{l.hooks&&(n=l.hooks.preprocess(n)),a=e(n,l)}catch(e){return o(e)}const c=e=>{let n;if(!e)try{l.walkTokens&&this.walkTokens(a,l.walkTokens),n=t(a,l),l.hooks&&(n=l.hooks.postprocess(n))}catch(t){e=t}return l.highlight=i,e?o(e):r(null,n)};if(!i||i.length<3)return c();if(delete l.highlight,!a.length)return c();let h=0;return this.walkTokens(a,(e=>{"code"===e.type&&(h++,setTimeout((()=>{i(e.text,e.lang,((t,n)=>{if(t)return c(t);null!=n&&n!==e.text&&(e.text=n,e.escaped=!0),h--,0===h&&c()}))}),0))})),void(0===h&&c())}if(l.async)return Promise.resolve(l.hooks?l.hooks.preprocess(n):n).then((t=>e(t,l))).then((e=>l.walkTokens?Promise.all(this.walkTokens(e,l.walkTokens)).then((()=>e)):e)).then((e=>t(e,l))).then((e=>l.hooks?l.hooks.postprocess(e):e)).catch(o);try{l.hooks&&(n=l.hooks.preprocess(n));const r=e(n,l);l.walkTokens&&this.walkTokens(r,l.walkTokens);let s=t(r,l);return l.hooks&&(s=l.hooks.postprocess(s)),s}catch(e){return o(e)}}}#t(e,t,n){return r=>{if(r.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+h(r.message+"",!0)+"</pre>";return t?Promise.resolve(e):n?void n(null,e):e}if(t)return Promise.reject(r);if(!n)throw r;n(r)}}}const M=new O;function q(e,t,n){return M.parse(e,t,n)}q.options=q.setOptions=function(e){return M.setOptions(e),q.defaults=M.defaults,r(q.defaults),q},q.getDefaults=n,q.defaults=t.defaults,q.use=function(...e){return M.use(...e),q.defaults=M.defaults,r(q.defaults),q},q.walkTokens=function(e,t){return M.walkTokens(e,t)},q.parseInline=M.parseInline,q.Parser=B,q.parser=B.parse,q.Renderer=A,q.TextRenderer=E,q.Lexer=j,q.lexer=j.lex,q.Tokenizer=S,q.Slugger=L,q.Hooks=P,q.parse=q;const Z=q.options,D=q.setOptions,U=q.use,N=q.walkTokens,Q=q.parseInline,H=q,F=B.parse,X=j.lex;t.Hooks=P,t.Lexer=j,t.Marked=O,t.Parser=B,t.Renderer=A,t.Slugger=L,t.TextRenderer=E,t.Tokenizer=S,t.getDefaults=n,t.lexer=X,t.marked=q,t.options=Z,t.parse=H,t.parseInline=Q,t.parser=F,t.setOptions=D,t.use=U,t.walkTokens=N}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.nc=void 0,(()=>{"use strict";class e{constructor(e){this.element=e}enableClass(e){return this.element.classList.add(e),this}disableClass(e){return this.element.classList.remove(e),this}html(e){return this.element.innerHTML=e,this}addElement(t){let n=document.createElement(t);return this.element.appendChild(n),new e(n)}onClick(e){this.element.onclick=e}}function t(t){if(t instanceof String||"string"==typeof t){if(-1!==t.indexOf("#")){let n=document.getElementById(t.substr(1));return new e(n)}{let n=document.getElementsByClassName(t)[0];return new e(n)}}return new e(t)}n(763),n(861);class r{static getBlogContent(e){return new Promise((t=>{void 0!==r.cache[e]&&t(r.cache[e]);let n="https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/"+e,s=new XMLHttpRequest;s.open("GET",n),s.onload=()=>{200==s.status&&(r.cache[e]=s.responseText,t(s.responseText))},s.send()}))}static getBlogList(){return new Promise((e=>{let t=new XMLHttpRequest;t.open("GET","https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/blog.json"),t.onload=()=>{console.log("status is"+t.status),200==t.status&&(this.blogSettings=JSON.parse(t.responseText),e(this.blogSettings.articles),console.log("articles is "+t.responseText),console.log("length is "+this.blogSettings.articles.length))},t.send()}))}}r.cache=[],n(89),n(509);const{marked:s}=n(970);s.setOptions({highlight:function(e,t){const n=hljs.getLanguage(t)?t:"plaintext";return hljs.highlight(e,{language:n}).value},langPrefix:"hljs language-"});const i=new s.Renderer;let l=i.paragraph.bind(i);function o(e){if("$"===e[0]&&"$"===e[e.length-1]){let t=!1;"$"===(e=e.substr(1,e.length-2))[0]&&"$"===e[e.length-1]&&(t=!0,e=e.substr(1,e.length-2));let n=null;try{n=katex.renderToString(e)}catch(e){console.err(e)}return t&&n&&(n=n.replace(/class="katex"/g,'class="katex katex-block" style="display: block;"')),n}return null}i.paragraph=e=>{let t=e.match(/\$\$[^\$]*\$\$/g),n=e.match(/\$[^\$]*\$/g);for(let n in t){const r=t[n],s=o(r);e=e.replace(r,s)}for(let t in n){const r=n[t],s=o(r);e=e.replace(r,s)}return l(e)},s.setOptions({renderer:i});let a="",c="",h=t("#side-close-button"),p=t("#side-open-button");h.onClick((e=>{t("topnav").enableClass("sidebar-off"),t("sidebar").enableClass("sidebar-off"),t("content").enableClass("sidebar-off"),p.enableClass("sidebar-off")})),p.onClick((e=>{t("topnav").disableClass("sidebar-off"),t("sidebar").disableClass("sidebar-off"),t("content").disableClass("sidebar-off"),h.disableClass("sidebar-off"),p.disableClass("sidebar-off")}));let u=new class{constructor(e){this.currentState=e,this.previousState=e,this.onChangeListener=[]}changeState(e){for(let t of this.onChangeListener)t(this.currentState,e);this.previousState=this.currentState,this.currentState=e}onChange(e){this.onChangeListener.push(e)}clearListener(){this.onChangeListener=[]}}(0),d=new class{constructor(e,n,r){this.activeIndex=r,this.parent=e,this.parent.classList.add("sidebar"),this.children=[],this.items=n,this.items.forEach(((e,n)=>{let r=document.createElement("a");this.children.push(r),r.innerText=e[0],r.href="#"+e[0],r.index=n,r.onclick=()=>{for(let e of this.children)t(e).disableClass("active");this.activeIndex=r.index,t(r).enableClass("active"),e[1]()},n===this.activeIndex&&r.classList.add("active"),this.parent.appendChild(r)}))}addItem(e,n,r=!1){let s=document.createElement("a");this.children.push(s),s.innerText=e,s.href="#"+e,s.index=this.children.length;let i=()=>{for(let e of this.children)t(e).disableClass("active");this.activeIndex=s.index,t(s).enableClass("active"),n()};s.onclick=i,s.index===this.activeIndex&&s.classList.add("active"),this.parent.appendChild(s),r&&i()}}(document.getElementById("side"),[],0),g=[["Resumé",()=>{u.changeState(2)}],["Publications",()=>{u.changeState(1)}],["Home",()=>{u.changeState(0)}]],f=new class{constructor(e,n,r){this.activeIndex=r,this.parent=e,this.container=document.createElement("div"),this.container.classList.add("topnav"),this.parent.appendChild(this.container);let s=document.createElement("a");s.innerText="Tianyu's Blog",s.style.float="left",s.style.fontWeight="bold",s.href="https://weakknight.github.io/",this.container.appendChild(s),this.children=[],this.items=n,this.items.forEach(((e,n)=>{let r=document.createElement("a");this.children.push(r),r.innerText=e[0],r.href="#"+e[0],r.index=n,r.onclick=()=>{for(let e of this.children)t(e).disableClass("active");this.activeIndex=r.index,t(r).enableClass("active"),e[1]()},n===this.activeIndex&&r.classList.add("active"),this.container.appendChild(r)}))}setSelectionByIndex(e){for(let e of this.children)t(e).disableClass("active");this.items.forEach(((n,r)=>{let s=this.children[r];r===e&&(this.activeIndex=r,t(s).enableClass("active"),n[1]())}))}}(document.getElementById("header"),g,g.length-1);u.onChange(((e,n)=>{t("content").html(""),0===n?(t("topnav").disableClass("sidebar-off"),t("sidebar").disableClass("sidebar-off"),t("content").disableClass("noSideBar"),r.getBlogContent(a).then((e=>{document.title=c;try{t("blog").html(s(e,{renderer:i}))}catch(e){console.log(e)}}))):(t("topnav").enableClass("sidebar-off"),t("sidebar").enableClass("sidebar-off"),t("content").enableClass("noSideBar"),2===n?r.getBlogContent("resume.md").then((e=>{t("blog").html(s(e,{renderer:i}))})):1===n&&r.getBlogContent("publications.md").then((e=>{t("blog").html(s(e,{renderer:i}))})))})),r.getBlogList().then((e=>{let n="";""!=window.location.hash&&(n=decodeURIComponent(window.location.hash)),console.log("hashBlogName Is "+n);for(let l of e){let e=!1;""!=n?"#"+l.title==n&&(console.log("find hashed default"),e=!0):e||!0===l.default&&(console.log(l.default),e=!0),d.addItem(l.title,(()=>{a=l.path,c=l.title+"----Tianyu Li's Blog",document.title=c,r.getBlogContent(l.path).then((e=>{try{t("blog").html(s(e,{renderer:i}))}catch(e){console.log(e)}}))}),e),"#Publications"!==window.location.hash&&"#Resum%C3%A9"!==window.location.hash&&e&&(a=l.path,c=l.title+"----Tianyu Li's Blog",document.title=c)}"#Publications"===window.location.hash?f.setSelectionByIndex(1):"#Resum%C3%A9"===window.location.hash?f.setSelectionByIndex(0):f.setSelectionByIndex(2)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGtCQUF6QnZlLE9BQU9vZ0IsU0FBU0MsS0FDaEJWLEVBQU9JLG9CQUFvQixHQUVHLGlCQUF6Qi9mLE9BQU9vZ0IsU0FBU0MsS0FDckJWLEVBQU9JLG9CQUFvQixHQUczQkosRUFBT0ksb0JBQW9CLEVBQy9CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1sb2cvLi9zcmMvY29tcG9uZW50cy9uYXZiYXIuY3NzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb21wb25lbnRzL3NpZGViYXIuY3NzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9oaWdobGlnaHQuY3NzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovL215LWxvZy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vbXktbG9nLy4vc3JjL2NvbXBvbmVudHMvbmF2YmFyLmNzcz84MDI4Iiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb21wb25lbnRzL3NpZGViYXIuY3NzPzQxOGQiLCJ3ZWJwYWNrOi8vbXktbG9nLy4vc3JjL2hpZ2hsaWdodC5jc3M/NmYwMCIsIndlYnBhY2s6Ly9teS1sb2cvLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovL215LWxvZy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9teS1sb2cvLi9ub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuY2pzIiwid2VicGFjazovL215LWxvZy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9teS1sb2cvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb3JlL3V0aWxzLmpzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb3JlL2Jsb2doZWxwZXIuanMiLCJ3ZWJwYWNrOi8vbXktbG9nLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb3JlL3N0YXRlbWFjaGluZS5qcyIsIndlYnBhY2s6Ly9teS1sb2cvLi9zcmMvY29tcG9uZW50cy9zaWRlYmFyLmpzIiwid2VicGFjazovL215LWxvZy8uL3NyYy9jb21wb25lbnRzL25hdmJhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvcG5hdiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNzM3Mzg7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHRvcDogMHB4O1xcclxcbiAgICB6LWluZGV4OiAxMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnRvcG5hdiBhIHtcXHJcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcclxcbiAgICBjb2xvcjogI2NjY2NjYztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAxNHB4IDE2cHg7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcclxcbn1cXHJcXG5cXHJcXG4udG9wbmF2IGE6aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTA1MDUwO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiAjY2NjY2NjO1xcclxcbn1cXHJcXG5cXHJcXG4udG9wbmF2IGEuYWN0aXZlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwMzAzMDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBjb2xvcjogI2NjY2NjYztcXHJcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2lkZWJhciB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzcsIDM3LCAzOCk7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA0OHB4KTtcXHJcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICAgIHRvcDogNDhweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXIuc2lkZWJhci1vZmZ7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyIGEge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgY29sb3I6ICNjY2NjY2M7XFxyXFxuICAgIHBhZGRpbmc6IDdweDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBmb250LXNpemU6IDEzcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXIgYS5hY3RpdmUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTUsIDU1LCA2MSk7XFxyXFxuICAgIGNvbG9yOiAjY2NjY2NjO1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhciBhOmhvdmVyOm5vdCguYWN0aXZlKSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig0MiwgNDUsIDQ2KTtcXHJcXG4gICAgY29sb3I6ICNjY2NjY2M7XFxyXFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXHJcXG5BdG9tIE9uZSBEYXJrIGJ5IERhbmllbCBHYW1hZ2VcXHJcXG5PcmlnaW5hbCBPbmUgRGFyayBTeW50YXggdGhlbWUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXRvbS9vbmUtZGFyay1zeW50YXhcXHJcXG5iYXNlOiAgICAjMjgyYzM0XFxyXFxubW9uby0xOiAgI2FiYjJiZlxcclxcbm1vbm8tMjogICM4MTg4OTZcXHJcXG5tb25vLTM6ICAjNWM2MzcwXFxyXFxuaHVlLTE6ICAgIzU2YjZjMlxcclxcbmh1ZS0yOiAgICM2MWFlZWVcXHJcXG5odWUtMzogICAjYzY3OGRkXFxyXFxuaHVlLTQ6ICAgIzk4YzM3OVxcclxcbmh1ZS01OiAgICNlMDZjNzVcXHJcXG5odWUtNS0yOiAjYmU1MDQ2XFxyXFxuaHVlLTY6ICAgI2QxOWE2Nlxcclxcbmh1ZS02LTI6ICNlNmMwN2JcXHJcXG4qL1xcclxcblxcclxcbi5obGpzIHtcXHJcXG4gICAgY29sb3I6ICNjY2NjY2M7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYigzNywzNywzOCk7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLWNvbW1lbnQsXFxyXFxuICAuaGxqcy1xdW90ZSB7XFxyXFxuICAgIGNvbG9yOiAjNWM2MzcwO1xcclxcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLWRvY3RhZyxcXHJcXG4gIC5obGpzLWtleXdvcmQsXFxyXFxuICAuaGxqcy1mb3JtdWxhIHtcXHJcXG4gICAgY29sb3I6ICNjNjc4ZGQ7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLXNlY3Rpb24sXFxyXFxuICAuaGxqcy1uYW1lLFxcclxcbiAgLmhsanMtc2VsZWN0b3ItdGFnLFxcclxcbiAgLmhsanMtZGVsZXRpb24sXFxyXFxuICAuaGxqcy1zdWJzdCB7XFxyXFxuICAgIGNvbG9yOiAjZTA2Yzc1O1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAuaGxqcy1saXRlcmFsIHtcXHJcXG4gICAgY29sb3I6ICM1NmI2YzI7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLXN0cmluZyxcXHJcXG4gIC5obGpzLXJlZ2V4cCxcXHJcXG4gIC5obGpzLWFkZGl0aW9uLFxcclxcbiAgLmhsanMtYXR0cmlidXRlLFxcclxcbiAgLmhsanMtbWV0YSAuaGxqcy1zdHJpbmcge1xcclxcbiAgICBjb2xvcjogIzk4YzM3OTtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgLmhsanMtYXR0cixcXHJcXG4gIC5obGpzLXZhcmlhYmxlLFxcclxcbiAgLmhsanMtdGVtcGxhdGUtdmFyaWFibGUsXFxyXFxuICAuaGxqcy10eXBlLFxcclxcbiAgLmhsanMtc2VsZWN0b3ItY2xhc3MsXFxyXFxuICAuaGxqcy1zZWxlY3Rvci1hdHRyLFxcclxcbiAgLmhsanMtc2VsZWN0b3ItcHNldWRvLFxcclxcbiAgLmhsanMtbnVtYmVyIHtcXHJcXG4gICAgY29sb3I6ICNkMTlhNjY7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLXN5bWJvbCxcXHJcXG4gIC5obGpzLWJ1bGxldCxcXHJcXG4gIC5obGpzLWxpbmssXFxyXFxuICAuaGxqcy1tZXRhLFxcclxcbiAgLmhsanMtc2VsZWN0b3ItaWQsXFxyXFxuICAuaGxqcy10aXRsZSB7XFxyXFxuICAgIGNvbG9yOiAjNjFhZWVlO1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAuaGxqcy1idWlsdF9pbixcXHJcXG4gIC5obGpzLXRpdGxlLmNsYXNzXyxcXHJcXG4gIC5obGpzLWNsYXNzIC5obGpzLXRpdGxlIHtcXHJcXG4gICAgY29sb3I6ICNlNmMwN2I7XFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC5obGpzLWVtcGhhc2lzIHtcXHJcXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAuaGxqcy1zdHJvbmcge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgLmhsanMtbGluayB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgfVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZTFlMWUgIWltcG9ydGFudDtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG5wcmVcXHJcXG57XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigzNywzNywzOCk7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG5jb2RlXFxyXFxue1xcclxcbiAgICBjb2xvcjogI2NjY2NjYztcXHJcXG59XFxyXFxuXFxyXFxucFxcclxcbntcXHJcXG4gICAgY29sb3I6ICNjY2NjY2M7XFxyXFxufVxcclxcblxcclxcbmFcXHJcXG57XFxyXFxuICAgIGNvbG9yOiByZ2IoNTUsIDE0OCwyNTUpO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuY29udGVudCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAyMDBweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xcclxcbiAgICB0b3A6IDQ4cHg7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgLyogcGFkZGluZzogMXB4IDE2cHg7ICovXFxyXFxuICAgIGhlaWdodDogY2FsYygxMDAlIC0gNDhweCk7XFxyXFxuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMzBweCk7XFxyXFxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXHJcXG4gICAgb3ZlcmZsb3cteTogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuZGl2LmNvbnRlbnQuc2lkZWJhci1vZmYge1xcclxcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNjBweCk7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jc2lkZS1jbG9zZS1idXR0b25cXHJcXG57XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDgwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig1NSwgNTUsIDU2KTtcXHJcXG4gICAgbGVmdDogMTcwcHg7XFxyXFxuICAgIHRvcDogNTAlO1xcclxcbiAgICBvcGFjaXR5OiAwLjU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDgwcHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTdweDtcXHJcXG4gICAgY29sb3I6ICNjY2NjY2M7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuI3NpZGUtY2xvc2UtYnV0dG9uLnNpZGViYXItb2ZmXFxyXFxue1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4jc2lkZS1vcGVuLWJ1dHRvblxcclxcbntcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI3NpZGUtb3Blbi1idXR0b24uc2lkZWJhci1vZmZcXHJcXG57XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDgwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig1NSwgNTUsIDU2KTtcXHJcXG4gICAgbGVmdDogMHB4O1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgb3BhY2l0eTogMC41O1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiA4MHB4O1xcclxcbiAgICBmb250LXNpemU6IDE3cHg7XFxyXFxuICAgIGNvbG9yOiAjY2NjY2NjO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxufVxcclxcblxcclxcbi5ibG9nPnAge1xcclxcbiAgICBjb2xvcjogcmdiKDIxMiwgMjEyLCAyMTIpO1xcclxcbn1cXHJcXG5cXHJcXG4uYmxvZz5oMSB7XFxyXFxuICAgIGNvbG9yOiByZ2IoMjEyLCAyMTIsIDIxMik7XFxyXFxufVxcclxcblxcclxcbi5ibG9nPmgyIHtcXHJcXG4gICAgY29sb3I6IHJnYigyMTIsIDIxMiwgMjEyKTtcXHJcXG59XFxyXFxuXFxyXFxuLmJsb2c+aDMge1xcclxcbiAgICBjb2xvcjogcmdiKDIxMiwgMjEyLCAyMTIpO1xcclxcbn1cXHJcXG5cXHJcXG4uYmxvZz5oNCB7XFxyXFxuICAgIGNvbG9yOiByZ2IoMjEyLCAyMTIsIDIxMik7XFxyXFxufVxcclxcblxcclxcbi5ibG9nPmg1IHtcXHJcXG4gICAgY29sb3I6IHJnYigyMTIsIDIxMiwgMjEyKTtcXHJcXG59XFxyXFxuXFxyXFxuLmJsb2cge1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzAsMzAsMzApO1xcclxcbn1cXHJcXG5cXHJcXG5kaXYuY29udGVudC5ub1NpZGVCYXJ7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4vKiB3aWR0aCAqL1xcclxcbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcclxcbiAgICB3aWR0aDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLyogVHJhY2sgKi9cXHJcXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDMwLCAzMCwgMzApO1xcclxcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHJnYig2NiwgNjYsIDY2KTtcXHJcXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgcmdiKDY2LCA2NiwgNjYpO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBIYW5kbGUgKi9cXHJcXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDY2LCA2NiwgNjYpO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBIYW5kbGUgb24gaG92ZXIgKi9cXHJcXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDc5LCA3OSwgNzkpO1xcclxcbn1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25hdmJhci5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zaWRlYmFyLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hpZ2hsaWdodC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8qKlxuICogbWFya2VkIHY3LjAuNCAtIGEgbWFya2Rvd24gcGFyc2VyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAyMywgQ2hyaXN0b3BoZXIgSmVmZnJleS4gKE1JVCBMaWNlbnNlZClcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWRcbiAqL1xuXG4vKipcbiAqIERPIE5PVCBFRElUIFRISVMgRklMRVxuICogVGhlIGNvZGUgaW4gdGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBmcm9tIGZpbGVzIGluIC4vc3JjL1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZXRzIHRoZSBvcmlnaW5hbCBtYXJrZWQgZGVmYXVsdCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBfZ2V0RGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICBiYXNlVXJsOiBudWxsLFxuICAgICAgICBicmVha3M6IGZhbHNlLFxuICAgICAgICBleHRlbnNpb25zOiBudWxsLFxuICAgICAgICBnZm06IHRydWUsXG4gICAgICAgIGhlYWRlcklkczogZmFsc2UsXG4gICAgICAgIGhlYWRlclByZWZpeDogJycsXG4gICAgICAgIGhpZ2hsaWdodDogbnVsbCxcbiAgICAgICAgaG9va3M6IG51bGwsXG4gICAgICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuICAgICAgICBtYW5nbGU6IGZhbHNlLFxuICAgICAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgICAgIHJlbmRlcmVyOiBudWxsLFxuICAgICAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgICAgIHNhbml0aXplcjogbnVsbCxcbiAgICAgICAgc2lsZW50OiBmYWxzZSxcbiAgICAgICAgc21hcnR5cGFudHM6IGZhbHNlLFxuICAgICAgICB0b2tlbml6ZXI6IG51bGwsXG4gICAgICAgIHdhbGtUb2tlbnM6IG51bGwsXG4gICAgICAgIHhodG1sOiBmYWxzZVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHRzID0gX2dldERlZmF1bHRzKCk7XG5mdW5jdGlvbiBjaGFuZ2VEZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4cG9ydHMuZGVmYXVsdHMgPSBuZXdEZWZhdWx0cztcbn1cblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cbmNvbnN0IGVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuY29uc3QgZXNjYXBlUmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlVGVzdC5zb3VyY2UsICdnJyk7XG5jb25zdCBlc2NhcGVUZXN0Tm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hKCNcXGR7MSw3fXwjW1h4XVthLWZBLUYwLTldezEsNn18XFx3Kyk7KS87XG5jb25zdCBlc2NhcGVSZXBsYWNlTm9FbmNvZGUgPSBuZXcgUmVnRXhwKGVzY2FwZVRlc3ROb0VuY29kZS5zb3VyY2UsICdnJyk7XG5jb25zdCBlc2NhcGVSZXBsYWNlbWVudHMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG59O1xuY29uc3QgZ2V0RXNjYXBlUmVwbGFjZW1lbnQgPSAoY2gpID0+IGVzY2FwZVJlcGxhY2VtZW50c1tjaF07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gICAgaWYgKGVuY29kZSkge1xuICAgICAgICBpZiAoZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2UsIGdldEVzY2FwZVJlcGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2VOb0VuY29kZSwgZ2V0RXNjYXBlUmVwbGFjZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBodG1sO1xufVxuY29uc3QgdW5lc2NhcGVUZXN0ID0gLyYoIyg/OlxcZCspfCg/OiN4WzAtOUEtRmEtZl0rKXwoPzpcXHcrKSk7Py9pZztcbmZ1bmN0aW9uIHVuZXNjYXBlKGh0bWwpIHtcbiAgICAvLyBleHBsaWNpdGx5IG1hdGNoIGRlY2ltYWwsIGhleCwgYW5kIG5hbWVkIEhUTUwgZW50aXRpZXNcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKHVuZXNjYXBlVGVzdCwgKF8sIG4pID0+IHtcbiAgICAgICAgbiA9IG4udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG4gPT09ICdjb2xvbicpXG4gICAgICAgICAgICByZXR1cm4gJzonO1xuICAgICAgICBpZiAobi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgcmV0dXJuIG4uY2hhckF0KDEpID09PSAneCdcbiAgICAgICAgICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG59XG5jb25zdCBjYXJldCA9IC8oXnxbXlxcW10pXFxeL2c7XG5mdW5jdGlvbiBlZGl0KHJlZ2V4LCBvcHQpIHtcbiAgICByZWdleCA9IHR5cGVvZiByZWdleCA9PT0gJ3N0cmluZycgPyByZWdleCA6IHJlZ2V4LnNvdXJjZTtcbiAgICBvcHQgPSBvcHQgfHwgJyc7XG4gICAgY29uc3Qgb2JqID0ge1xuICAgICAgICByZXBsYWNlOiAobmFtZSwgdmFsKSA9PiB7XG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAnc291cmNlJyBpbiB2YWwgPyB2YWwuc291cmNlIDogdmFsO1xuICAgICAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoY2FyZXQsICckMScpO1xuICAgICAgICAgICAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbCk7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LFxuICAgICAgICBnZXRSZWdleDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG9wdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBvYmo7XG59XG5jb25zdCBub25Xb3JkQW5kQ29sb25UZXN0ID0gL1teXFx3Ol0vZztcbmNvbnN0IG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gICAgaWYgKHNhbml0aXplKSB7XG4gICAgICAgIGxldCBwcm90O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvdCA9IGRlY29kZVVSSUNvbXBvbmVudCh1bmVzY2FwZShocmVmKSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShub25Xb3JkQW5kQ29sb25UZXN0LCAnJylcbiAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3QuaW5kZXhPZignamF2YXNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ3Zic2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZignZGF0YTonKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJhc2UgJiYgIW9yaWdpbkluZGVwZW5kZW50VXJsLnRlc3QoaHJlZikpIHtcbiAgICAgICAgaHJlZiA9IHJlc29sdmVVcmwoYmFzZSwgaHJlZik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGhyZWYgPSBlbmNvZGVVUkkoaHJlZikucmVwbGFjZSgvJTI1L2csICclJyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZjtcbn1cbmNvbnN0IGJhc2VVcmxzID0ge307XG5jb25zdCBqdXN0RG9tYWluID0gL15bXjpdKzpcXC8qW14vXSokLztcbmNvbnN0IHByb3RvY29sID0gL14oW146XSs6KVtcXHNcXFNdKiQvO1xuY29uc3QgZG9tYWluID0gL14oW146XSs6XFwvKlteL10qKVtcXHNcXFNdKiQvO1xuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gICAgaWYgKCFiYXNlVXJsc1snICcgKyBiYXNlXSkge1xuICAgICAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgICAgIC8vIGJ1dCB3ZSBtaWdodCBuZWVkIHRvIGFkZCBfdGhhdF9cbiAgICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zXG4gICAgICAgIGlmIChqdXN0RG9tYWluLnRlc3QoYmFzZSkpIHtcbiAgICAgICAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gcnRyaW0oYmFzZSwgJy8nLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG4gICAgY29uc3QgcmVsYXRpdmVCYXNlID0gYmFzZS5pbmRleE9mKCc6JykgPT09IC0xO1xuICAgIGlmIChocmVmLnN1YnN0cmluZygwLCAyKSA9PT0gJy8vJykge1xuICAgICAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaHJlZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZS5yZXBsYWNlKHByb3RvY29sLCAnJDEnKSArIGhyZWY7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgaWYgKHJlbGF0aXZlQmFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZShkb21haW4sICckMScpICsgaHJlZjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBiYXNlICsgaHJlZjtcbiAgICB9XG59XG5jb25zdCBub29wVGVzdCA9IHsgZXhlYzogKCkgPT4gbnVsbCB9O1xuZnVuY3Rpb24gc3BsaXRDZWxscyh0YWJsZVJvdywgY291bnQpIHtcbiAgICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAgIC8vIGJlZm9yZSBpdCB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIGFuIGVzY2FwZWQgcGlwZVxuICAgIGNvbnN0IHJvdyA9IHRhYmxlUm93LnJlcGxhY2UoL1xcfC9nLCAobWF0Y2gsIG9mZnNldCwgc3RyKSA9PiB7XG4gICAgICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBjdXJyID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpXG4gICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQ7XG4gICAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgICAgICAvLyBvZGQgbnVtYmVyIG9mIHNsYXNoZXMgbWVhbnMgfCBpcyBlc2NhcGVkXG4gICAgICAgICAgICAvLyBzbyB3ZSBsZWF2ZSBpdCBhbG9uZVxuICAgICAgICAgICAgcmV0dXJuICd8JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgICAgIHJldHVybiAnIHwnO1xuICAgICAgICB9XG4gICAgfSksIGNlbGxzID0gcm93LnNwbGl0KC8gXFx8Lyk7XG4gICAgbGV0IGkgPSAwO1xuICAgIC8vIEZpcnN0L2xhc3QgY2VsbCBpbiBhIHJvdyBjYW5ub3QgYmUgZW1wdHkgaWYgaXQgaGFzIG5vIGxlYWRpbmcvdHJhaWxpbmcgcGlwZVxuICAgIGlmICghY2VsbHNbMF0udHJpbSgpKSB7XG4gICAgICAgIGNlbGxzLnNoaWZ0KCk7XG4gICAgfVxuICAgIGlmIChjZWxscy5sZW5ndGggPiAwICYmICFjZWxsc1tjZWxscy5sZW5ndGggLSAxXS50cmltKCkpIHtcbiAgICAgICAgY2VsbHMucG9wKCk7XG4gICAgfVxuICAgIGlmIChjb3VudCkge1xuICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICAgICAgICAgIGNlbGxzLnNwbGljZShjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoY2VsbHMubGVuZ3RoIDwgY291bnQpXG4gICAgICAgICAgICAgICAgY2VsbHMucHVzaCgnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2UgaXMgaWdub3JlZCBwZXIgdGhlIGdmbSBzcGVjXG4gICAgICAgIGNlbGxzW2ldID0gY2VsbHNbaV0udHJpbSgpLnJlcGxhY2UoL1xcXFxcXHwvZywgJ3wnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNlbGxzO1xufVxuLyoqXG4gKiBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuICogL2MqJC8gaXMgdnVsbmVyYWJsZSB0byBSRURPUy5cbiAqXG4gKiBAcGFyYW0gc3RyXG4gKiBAcGFyYW0gY1xuICogQHBhcmFtIGludmVydCBSZW1vdmUgc3VmZml4IG9mIG5vbi1jIGNoYXJzIGluc3RlYWQuIERlZmF1bHQgZmFsc2V5LlxuICovXG5mdW5jdGlvbiBydHJpbShzdHIsIGMsIGludmVydCkge1xuICAgIGNvbnN0IGwgPSBzdHIubGVuZ3RoO1xuICAgIGlmIChsID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgLy8gTGVuZ3RoIG9mIHN1ZmZpeCBtYXRjaGluZyB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgICBsZXQgc3VmZkxlbiA9IDA7XG4gICAgLy8gU3RlcCBsZWZ0IHVudGlsIHdlIGZhaWwgdG8gbWF0Y2ggdGhlIGludmVydCBjb25kaXRpb24uXG4gICAgd2hpbGUgKHN1ZmZMZW4gPCBsKSB7XG4gICAgICAgIGNvbnN0IGN1cnJDaGFyID0gc3RyLmNoYXJBdChsIC0gc3VmZkxlbiAtIDEpO1xuICAgICAgICBpZiAoY3VyckNoYXIgPT09IGMgJiYgIWludmVydCkge1xuICAgICAgICAgICAgc3VmZkxlbisrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgICAgICAgc3VmZkxlbisrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0ci5zbGljZSgwLCBsIC0gc3VmZkxlbik7XG59XG5mdW5jdGlvbiBmaW5kQ2xvc2luZ0JyYWNrZXQoc3RyLCBiKSB7XG4gICAgaWYgKHN0ci5pbmRleE9mKGJbMV0pID09PSAtMSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGxldCBsZXZlbCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RyW2ldID09PSBiWzBdKSB7XG4gICAgICAgICAgICBsZXZlbCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0cltpXSA9PT0gYlsxXSkge1xuICAgICAgICAgICAgbGV2ZWwtLTtcbiAgICAgICAgICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBjaGVja0RlcHJlY2F0aW9ucyhvcHQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFvcHQgfHwgb3B0LnNpbGVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ21hcmtlZCgpOiBjYWxsYmFjayBpcyBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gNS4wLjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL21hcmtlZC5qcy5vcmcvdXNpbmdfcHJvI2FzeW5jJyk7XG4gICAgfVxuICAgIGlmIChvcHQuc2FuaXRpemUgfHwgb3B0LnNhbml0aXplcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ21hcmtlZCgpOiBzYW5pdGl6ZSBhbmQgc2FuaXRpemVyIHBhcmFtZXRlcnMgYXJlIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAwLjcuMCwgc2hvdWxkIG5vdCBiZSB1c2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUmVhZCBtb3JlIGhlcmU6IGh0dHBzOi8vbWFya2VkLmpzLm9yZy8jL1VTSU5HX0FEVkFOQ0VELm1kI29wdGlvbnMnKTtcbiAgICB9XG4gICAgaWYgKG9wdC5oaWdobGlnaHQgfHwgb3B0LmxhbmdQcmVmaXggIT09ICdsYW5ndWFnZS0nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IGhpZ2hsaWdodCBhbmQgbGFuZ1ByZWZpeCBwYXJhbWV0ZXJzIGFyZSBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gNS4wLjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIEluc3RlYWQgdXNlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21hcmtlZC1oaWdobGlnaHQuJyk7XG4gICAgfVxuICAgIGlmIChvcHQubWFuZ2xlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IG1hbmdsZSBwYXJhbWV0ZXIgaXMgZW5hYmxlZCBieSBkZWZhdWx0LCBidXQgaXMgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDUuMC4wLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFRvIGNsZWFyIHRoaXMgd2FybmluZywgaW5zdGFsbCBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9tYXJrZWQtbWFuZ2xlLCBvciBkaXNhYmxlIGJ5IHNldHRpbmcgYHttYW5nbGU6IGZhbHNlfWAuJyk7XG4gICAgfVxuICAgIGlmIChvcHQuYmFzZVVybCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ21hcmtlZCgpOiBiYXNlVXJsIHBhcmFtZXRlciBpcyBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gNS4wLjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIEluc3RlYWQgdXNlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21hcmtlZC1iYXNlLXVybC4nKTtcbiAgICB9XG4gICAgaWYgKG9wdC5zbWFydHlwYW50cykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ21hcmtlZCgpOiBzbWFydHlwYW50cyBwYXJhbWV0ZXIgaXMgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDUuMC4wLCBzaG91bGQgbm90IGJlIHVzZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBJbnN0ZWFkIHVzZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9tYXJrZWQtc21hcnR5cGFudHMuJyk7XG4gICAgfVxuICAgIGlmIChvcHQueGh0bWwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdtYXJrZWQoKTogeGh0bWwgcGFyYW1ldGVyIGlzIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiA1LjAuMCwgc2hvdWxkIG5vdCBiZSB1c2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gSW5zdGVhZCB1c2UgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWFya2VkLXhodG1sLicpO1xuICAgIH1cbiAgICBpZiAob3B0LmhlYWRlcklkcyB8fCBvcHQuaGVhZGVyUHJlZml4KSB7XG4gICAgICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IGhlYWRlcklkcyBhbmQgaGVhZGVyUHJlZml4IHBhcmFtZXRlcnMgZW5hYmxlZCBieSBkZWZhdWx0LCBidXQgYXJlIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiA1LjAuMCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBUbyBjbGVhciB0aGlzIHdhcm5pbmcsIGluc3RhbGwgIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21hcmtlZC1nZm0taGVhZGluZy1pZCwgb3IgZGlzYWJsZSBieSBzZXR0aW5nIGB7aGVhZGVySWRzOiBmYWxzZX1gLicpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb3V0cHV0TGluayhjYXAsIGxpbmssIHJhdywgbGV4ZXIpIHtcbiAgICBjb25zdCBocmVmID0gbGluay5ocmVmO1xuICAgIGNvbnN0IHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZShsaW5rLnRpdGxlKSA6IG51bGw7XG4gICAgY29uc3QgdGV4dCA9IGNhcFsxXS5yZXBsYWNlKC9cXFxcKFtcXFtcXF1dKS9nLCAnJDEnKTtcbiAgICBpZiAoY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnKSB7XG4gICAgICAgIGxleGVyLnN0YXRlLmluTGluayA9IHRydWU7XG4gICAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRva2VuczogbGV4ZXIuaW5saW5lVG9rZW5zKHRleHQpXG4gICAgICAgIH07XG4gICAgICAgIGxleGVyLnN0YXRlLmluTGluayA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICAgIHJhdyxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHRleHQ6IGVzY2FwZSh0ZXh0KVxuICAgIH07XG59XG5mdW5jdGlvbiBpbmRlbnRDb2RlQ29tcGVuc2F0aW9uKHJhdywgdGV4dCkge1xuICAgIGNvbnN0IG1hdGNoSW5kZW50VG9Db2RlID0gcmF3Lm1hdGNoKC9eKFxccyspKD86YGBgKS8pO1xuICAgIGlmIChtYXRjaEluZGVudFRvQ29kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgY29uc3QgaW5kZW50VG9Db2RlID0gbWF0Y2hJbmRlbnRUb0NvZGVbMV07XG4gICAgcmV0dXJuIHRleHRcbiAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAubWFwKG5vZGUgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaEluZGVudEluTm9kZSA9IG5vZGUubWF0Y2goL15cXHMrLyk7XG4gICAgICAgIGlmIChtYXRjaEluZGVudEluTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2luZGVudEluTm9kZV0gPSBtYXRjaEluZGVudEluTm9kZTtcbiAgICAgICAgaWYgKGluZGVudEluTm9kZS5sZW5ndGggPj0gaW5kZW50VG9Db2RlLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2xpY2UoaW5kZW50VG9Db2RlLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xufVxuLyoqXG4gKiBUb2tlbml6ZXJcbiAqL1xuY2xhc3MgX1Rva2VuaXplciB7XG4gICAgb3B0aW9ucztcbiAgICAvLyBUT0RPOiBGaXggdGhpcyBydWxlcyB0eXBlXG4gICAgcnVsZXM7XG4gICAgbGV4ZXI7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGV4cG9ydHMuZGVmYXVsdHM7XG4gICAgfVxuICAgIHNwYWNlKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLm5ld2xpbmUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwICYmIGNhcFswXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzcGFjZScsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29kZShzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5jb2RlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBjb2RlQmxvY2tTdHlsZTogJ2luZGVudGVkJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICAgICAgICAgID8gcnRyaW0odGV4dCwgJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgIDogdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmZW5jZXMoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZmVuY2VzLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgcmF3ID0gY2FwWzBdO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGluZGVudENvZGVDb21wZW5zYXRpb24ocmF3LCBjYXBbM10gfHwgJycpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgICAgIGxhbmc6IGNhcFsyXSA/IGNhcFsyXS50cmltKCkucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiBjYXBbMl0sXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoZWFkaW5nKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmhlYWRpbmcuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGNhcFsyXS50cmltKCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgdHJhaWxpbmcgI3NcbiAgICAgICAgICAgIGlmICgvIyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkID0gcnRyaW0odGV4dCwgJyMnKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRyaW1tZWQgfHwgLyAkLy50ZXN0KHRyaW1tZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENvbW1vbk1hcmsgcmVxdWlyZXMgc3BhY2UgYmVmb3JlIHRyYWlsaW5nICNzXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmUodGV4dClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaHIoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHIuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdocicsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmxvY2txdW90ZShzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5ibG9ja3F1b3RlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eICo+WyBcXHRdPy9nbSwgJycpO1xuICAgICAgICAgICAgY29uc3QgdG9wID0gdGhpcy5sZXhlci5zdGF0ZS50b3A7XG4gICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLnRvcCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB0b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKHRleHQpO1xuICAgICAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS50b3AgPSB0b3A7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsaXN0KHNyYykge1xuICAgICAgICBsZXQgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saXN0LmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgbGV0IGJ1bGwgPSBjYXBbMV0udHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgaXNvcmRlcmVkID0gYnVsbC5sZW5ndGggPiAxO1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgICAgICAgICBvcmRlcmVkOiBpc29yZGVyZWQsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsLnNsaWNlKDAsIC0xKSA6ICcnLFxuICAgICAgICAgICAgICAgIGxvb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpdGVtczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBidWxsID0gaXNvcmRlcmVkID8gYFxcXFxkezEsOX1cXFxcJHtidWxsLnNsaWNlKC0xKX1gIDogYFxcXFwke2J1bGx9YDtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgICAgICBidWxsID0gaXNvcmRlcmVkID8gYnVsbCA6ICdbKistXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgbmV4dCBsaXN0IGl0ZW1cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoYF4oIHswLDN9JHtidWxsfSkoKD86W1xcdCBdW15cXFxcbl0qKT8oPzpcXFxcbnwkKSlgKTtcbiAgICAgICAgICAgIGxldCByYXcgPSAnJztcbiAgICAgICAgICAgIGxldCBpdGVtQ29udGVudHMgPSAnJztcbiAgICAgICAgICAgIGxldCBlbmRzV2l0aEJsYW5rTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBidWxsZXQgcG9pbnQgY2FuIHN0YXJ0IGEgbmV3IExpc3QgSXRlbVxuICAgICAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgICAgIGxldCBlbmRFYXJseSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghKGNhcCA9IGl0ZW1SZWdleC5leGVjKHNyYykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ydWxlcy5ibG9jay5oci50ZXN0KHNyYykpIHsgLy8gRW5kIGxpc3QgaWYgYnVsbGV0IHdhcyBhY3R1YWxseSBIUiAocG9zc2libHkgbW92ZSBpbnRvIGl0ZW1SZWdleD8pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYXcgPSBjYXBbMF07XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZSA9IGNhcFsyXS5zcGxpdCgnXFxuJywgMSlbMF0ucmVwbGFjZSgvXlxcdCsvLCAodCkgPT4gJyAnLnJlcGVhdCgzICogdC5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dExpbmUgPSBzcmMuc3BsaXQoJ1xcbicsIDEpWzBdO1xuICAgICAgICAgICAgICAgIGxldCBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS50cmltTGVmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ID0gY2FwWzJdLnNlYXJjaCgvW14gXS8pOyAvLyBGaW5kIGZpcnN0IG5vbi1zcGFjZSBjaGFyXG4gICAgICAgICAgICAgICAgICAgIGluZGVudCA9IGluZGVudCA+IDQgPyAxIDogaW5kZW50OyAvLyBUcmVhdCBpbmRlbnRlZCBjb2RlIGJsb2NrcyAoPiA0IHNwYWNlcykgYXMgaGF2aW5nIG9ubHkgMSBpbmRlbnRcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgKz0gY2FwWzFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJsYW5rTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghbGluZSAmJiAvXiAqJC8udGVzdChuZXh0TGluZSkpIHsgLy8gSXRlbXMgYmVnaW4gd2l0aCBhdCBtb3N0IG9uZSBibGFuayBsaW5lXG4gICAgICAgICAgICAgICAgICAgIHJhdyArPSBuZXh0TGluZSArICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKG5leHRMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBlbmRFYXJseSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZW5kRWFybHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEJ1bGxldFJlZ2V4ID0gbmV3IFJlZ0V4cChgXiB7MCwke01hdGgubWluKDMsIGluZGVudCAtIDEpfX0oPzpbKistXXxcXFxcZHsxLDl9Wy4pXSkoKD86WyBcXHRdW15cXFxcbl0qKT8oPzpcXFxcbnwkKSlgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHJSZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KCg/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcXFwqICopezMsfSkoPzpcXFxcbit8JClgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVuY2VzQmVnaW5SZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KD86XFxgXFxgXFxgfH5+filgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZ0JlZ2luUmVnZXggPSBuZXcgUmVnRXhwKGBeIHswLCR7TWF0aC5taW4oMywgaW5kZW50IC0gMSl9fSNgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZm9sbG93aW5nIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBMaXN0IEl0ZW1cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3TGluZSA9IHNyYy5zcGxpdCgnXFxuJywgMSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGluZSA9IHJhd0xpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1hbGlnbiB0byBmb2xsb3cgY29tbW9ubWFyayBuZXN0aW5nIHJ1bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpbmUgPSBuZXh0TGluZS5yZXBsYWNlKC9eIHsxLDR9KD89KCB7NH0pKlteIF0pL2csICcgICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5kIGxpc3QgaXRlbSBpZiBmb3VuZCBjb2RlIGZlbmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlbmNlc0JlZ2luUmVnZXgudGVzdChuZXh0TGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgc3RhcnQgb2YgbmV3IGhlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkaW5nQmVnaW5SZWdleC50ZXN0KG5leHRMaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5kIGxpc3QgaXRlbSBpZiBmb3VuZCBzdGFydCBvZiBuZXcgYnVsbGV0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEJ1bGxldFJlZ2V4LnRlc3QobmV4dExpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3Jpem9udGFsIHJ1bGUgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoclJlZ2V4LnRlc3Qoc3JjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRMaW5lLnNlYXJjaCgvW14gXS8pID49IGluZGVudCB8fCAhbmV4dExpbmUudHJpbSgpKSB7IC8vIERlZGVudCBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Db250ZW50cyArPSAnXFxuJyArIG5leHRMaW5lLnNsaWNlKGluZGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3QgZW5vdWdoIGluZGVudGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsYW5rTGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFyYWdyYXBoIGNvbnRpbnVhdGlvbiB1bmxlc3MgbGFzdCBsaW5lIHdhcyBhIGRpZmZlcmVudCBibG9jayBsZXZlbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUuc2VhcmNoKC9bXiBdLykgPj0gNCkgeyAvLyBpbmRlbnRlZCBjb2RlIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVuY2VzQmVnaW5SZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGluZ0JlZ2luUmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyUmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzICs9ICdcXG4nICsgbmV4dExpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJsYW5rTGluZSAmJiAhbmV4dExpbmUudHJpbSgpKSB7IC8vIENoZWNrIGlmIGN1cnJlbnQgbGluZSBpcyBibGFua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByYXcgKz0gcmF3TGluZSArICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXdMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IG5leHRMaW5lLnNsaWNlKGluZGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFsaXN0Lmxvb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBpdGVtIGVuZGVkIHdpdGggYSBibGFuayBsaW5lLCB0aGUgbGlzdCBpcyBsb29zZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kc1dpdGhCbGFua0xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QubG9vc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKC9cXG4gKlxcbiAqJC8udGVzdChyYXcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRzV2l0aEJsYW5rTGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGlzdGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IGlzY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdGFzayBsaXN0IGl0ZW1zXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXN0YXNrID0gL15cXFtbIHhYXVxcXSAvLmV4ZWMoaXRlbUNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzdGFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNjaGVja2VkID0gaXN0YXNrWzBdICE9PSAnWyBdICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtQ29udGVudHMgPSBpdGVtQ29udGVudHMucmVwbGFjZSgvXlxcW1sgeFhdXFxdICsvLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGlzdC5pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbScsXG4gICAgICAgICAgICAgICAgICAgIHJhdyxcbiAgICAgICAgICAgICAgICAgICAgdGFzazogISFpc3Rhc2ssXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGlzY2hlY2tlZCxcbiAgICAgICAgICAgICAgICAgICAgbG9vc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtQ29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuczogW11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsaXN0LnJhdyArPSByYXc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEbyBub3QgY29uc3VtZSBuZXdsaW5lcyBhdCBlbmQgb2YgZmluYWwgaXRlbS4gQWx0ZXJuYXRpdmVseSwgbWFrZSBpdGVtUmVnZXggKnN0YXJ0KiB3aXRoIGFueSBuZXdsaW5lcyB0byBzaW1wbGlmeS9zcGVlZCB1cCBlbmRzV2l0aEJsYW5rTGluZSBsb2dpY1xuICAgICAgICAgICAgbGlzdC5pdGVtc1tsaXN0Lml0ZW1zLmxlbmd0aCAtIDFdLnJhdyA9IHJhdy50cmltUmlnaHQoKTtcbiAgICAgICAgICAgIGxpc3QuaXRlbXNbbGlzdC5pdGVtcy5sZW5ndGggLSAxXS50ZXh0ID0gaXRlbUNvbnRlbnRzLnRyaW1SaWdodCgpO1xuICAgICAgICAgICAgbGlzdC5yYXcgPSBsaXN0LnJhdy50cmltUmlnaHQoKTtcbiAgICAgICAgICAgIC8vIEl0ZW0gY2hpbGQgdG9rZW5zIGhhbmRsZWQgaGVyZSBhdCBlbmQgYmVjYXVzZSB3ZSBuZWVkZWQgdG8gaGF2ZSB0aGUgZmluYWwgaXRlbSB0byB0cmltIGl0IGZpcnN0XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLnRvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxpc3QuaXRlbXNbaV0udG9rZW5zID0gdGhpcy5sZXhlci5ibG9ja1Rva2VucyhsaXN0Lml0ZW1zW2ldLnRleHQsIFtdKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3QubG9vc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbGlzdCBzaG91bGQgYmUgbG9vc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhY2VycyA9IGxpc3QuaXRlbXNbaV0udG9rZW5zLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc011bHRpcGxlTGluZUJyZWFrcyA9IHNwYWNlcnMubGVuZ3RoID4gMCAmJiBzcGFjZXJzLnNvbWUodCA9PiAvXFxuLipcXG4vLnRlc3QodC5yYXcpKTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5sb29zZSA9IGhhc011bHRpcGxlTGluZUJyZWFrcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgYWxsIGl0ZW1zIHRvIGxvb3NlIGlmIGxpc3QgaXMgbG9vc2VcbiAgICAgICAgICAgIGlmIChsaXN0Lmxvb3NlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuaXRlbXNbaV0ubG9vc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGh0bWwoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHRtbC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcbiAgICAgICAgICAgICAgICBibG9jazogdHJ1ZSxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBwcmU6ICF0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhZ3JhcGggPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBwYXJhZ3JhcGgudHlwZSA9ICdwYXJhZ3JhcGgnO1xuICAgICAgICAgICAgICAgIHBhcmFncmFwaC50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgICAgICBwYXJhZ3JhcGgudG9rZW5zID0gdGhpcy5sZXhlci5pbmxpbmUodGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVmKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmRlZi5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IGNhcFsxXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSBjYXBbMl0gPyBjYXBbMl0ucmVwbGFjZSgvXjwoLiopPiQvLCAnJDEnKS5yZXBsYWNlKHRoaXMucnVsZXMuaW5saW5lLl9lc2NhcGVzLCAnJDEnKSA6ICcnO1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBjYXBbM10gPyBjYXBbM10uc3Vic3RyaW5nKDEsIGNhcFszXS5sZW5ndGggLSAxKS5yZXBsYWNlKHRoaXMucnVsZXMuaW5saW5lLl9lc2NhcGVzLCAnJDEnKSA6IGNhcFszXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2RlZicsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFibGUoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2sudGFibGUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0YWJsZScsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXSkubWFwKGMgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXh0OiBjLCB0b2tlbnM6IFtdIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICAgICAgICAgIHJvd3M6IGNhcFszXSAmJiBjYXBbM10udHJpbSgpID8gY2FwWzNdLnJlcGxhY2UoL1xcblsgXFx0XSokLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGl0ZW0uaGVhZGVyLmxlbmd0aCA9PT0gaXRlbS5hbGlnbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbCA9IGl0ZW0uYWxpZ24ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBpLCBqLCBrLCByb3c7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGlnbiA9IGl0ZW0uYWxpZ25baV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGlnbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoYWxpZ24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChhbGlnbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGFsaWduKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsID0gaXRlbS5yb3dzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ucm93c1tpXSA9IHNwbGl0Q2VsbHMoaXRlbS5yb3dzW2ldLCBpdGVtLmhlYWRlci5sZW5ndGgpLm1hcChjID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHRleHQ6IGMsIHRva2VuczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHBhcnNlIGNoaWxkIHRva2VucyBpbnNpZGUgaGVhZGVycyBhbmQgY2VsbHNcbiAgICAgICAgICAgICAgICAvLyBoZWFkZXIgY2hpbGQgdG9rZW5zXG4gICAgICAgICAgICAgICAgbCA9IGl0ZW0uaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaGVhZGVyW2pdLnRva2VucyA9IHRoaXMubGV4ZXIuaW5saW5lKGl0ZW0uaGVhZGVyW2pdLnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjZWxsIGNoaWxkIHRva2Vuc1xuICAgICAgICAgICAgICAgIGwgPSBpdGVtLnJvd3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gaXRlbS5yb3dzW2pdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcm93Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dba10udG9rZW5zID0gdGhpcy5sZXhlci5pbmxpbmUocm93W2tdLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxoZWFkaW5nKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmxoZWFkaW5nLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgZGVwdGg6IGNhcFsyXS5jaGFyQXQoMCkgPT09ICc9JyA/IDEgOiAyLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNhcFsxXSxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKGNhcFsxXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYWdyYXBoKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnBhcmFncmFwaC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xcbidcbiAgICAgICAgICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgICAgICA6IGNhcFsxXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKHRleHQpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRleHQoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2sudGV4dC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKGNhcFswXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXNjYXBlKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5lc2NhcGUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdlc2NhcGUnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQ6IGVzY2FwZShjYXBbMV0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRhZyhzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUudGFnLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxleGVyLnN0YXRlLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rICYmIC9ePFxcL2E+L2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5vcHRpb25zLnNhbml0aXplXG4gICAgICAgICAgICAgICAgICAgID8gJ3RleHQnXG4gICAgICAgICAgICAgICAgICAgIDogJ2h0bWwnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIGluTGluazogdGhpcy5sZXhlci5zdGF0ZS5pbkxpbmssXG4gICAgICAgICAgICAgICAgaW5SYXdCbG9jazogdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrLFxuICAgICAgICAgICAgICAgIGJsb2NrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXNjYXBlKGNhcFswXSkpXG4gICAgICAgICAgICAgICAgICAgIDogY2FwWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGxpbmsoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmxpbmsuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBjb25zdCB0cmltbWVkVXJsID0gY2FwWzJdLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBlZGFudGljICYmIC9ePC8udGVzdCh0cmltbWVkVXJsKSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbW1vbm1hcmsgcmVxdWlyZXMgbWF0Y2hpbmcgYW5nbGUgYnJhY2tldHNcbiAgICAgICAgICAgICAgICBpZiAoISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZW5kaW5nIGFuZ2xlIGJyYWNrZXQgY2Fubm90IGJlIGVzY2FwZWRcbiAgICAgICAgICAgICAgICBjb25zdCBydHJpbVNsYXNoID0gcnRyaW0odHJpbW1lZFVybC5zbGljZSgwLCAtMSksICdcXFxcJyk7XG4gICAgICAgICAgICAgICAgaWYgKCh0cmltbWVkVXJsLmxlbmd0aCAtIHJ0cmltU2xhc2gubGVuZ3RoKSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZpbmQgY2xvc2luZyBwYXJlbnRoZXNpc1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQYXJlbkluZGV4ID0gZmluZENsb3NpbmdCcmFja2V0KGNhcFsyXSwgJygpJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQYXJlbkluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBjYXBbMF0uaW5kZXhPZignIScpID09PSAwID8gNSA6IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtMZW4gPSBzdGFydCArIGNhcFsxXS5sZW5ndGggKyBsYXN0UGFyZW5JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgY2FwWzJdID0gY2FwWzJdLnN1YnN0cmluZygwLCBsYXN0UGFyZW5JbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNhcFswXSA9IGNhcFswXS5zdWJzdHJpbmcoMCwgbGlua0xlbikudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXBbM10gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaHJlZiA9IGNhcFsyXTtcbiAgICAgICAgICAgIGxldCB0aXRsZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgICAgICAgIC8vIHNwbGl0IHBlZGFudGljIGhyZWYgYW5kIHRpdGxlXG4gICAgICAgICAgICAgICAgY29uc3QgbGluayA9IC9eKFteJ1wiXSpbXlxcc10pXFxzKyhbJ1wiXSkoLiopXFwyLy5leGVjKGhyZWYpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGhyZWYgPSBsaW5rWzFdO1xuICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IGxpbmtbM107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGUgPSBjYXBbM10gPyBjYXBbM10uc2xpY2UoMSwgLTEpIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBocmVmID0gaHJlZi50cmltKCk7XG4gICAgICAgICAgICBpZiAoL148Ly50ZXN0KGhyZWYpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYyAmJiAhKC8+JC8udGVzdCh0cmltbWVkVXJsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGVkYW50aWMgYWxsb3dzIHN0YXJ0aW5nIGFuZ2xlIGJyYWNrZXQgd2l0aG91dCBlbmRpbmcgYW5nbGUgYnJhY2tldFxuICAgICAgICAgICAgICAgICAgICBocmVmID0gaHJlZi5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0TGluayhjYXAsIHtcbiAgICAgICAgICAgICAgICBocmVmOiBocmVmID8gaHJlZi5yZXBsYWNlKHRoaXMucnVsZXMuaW5saW5lLl9lc2NhcGVzLCAnJDEnKSA6IGhyZWYsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiB0aXRsZVxuICAgICAgICAgICAgfSwgY2FwWzBdLCB0aGlzLmxleGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWZsaW5rKHNyYywgbGlua3MpIHtcbiAgICAgICAgbGV0IGNhcDtcbiAgICAgICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5yZWZsaW5rLmV4ZWMoc3JjKSlcbiAgICAgICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgICAgICAgbGV0IGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgICAgICAgbGluayA9IGxpbmtzW2xpbmsudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICBpZiAoIWxpbmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gY2FwWzBdLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0TGluayhjYXAsIGxpbmssIGNhcFswXSwgdGhpcy5sZXhlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1TdHJvbmcoc3JjLCBtYXNrZWRTcmMsIHByZXZDaGFyID0gJycpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmcubERlbGltLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gXyBjYW4ndCBiZSBiZXR3ZWVuIHR3byBhbHBoYW51bWVyaWNzLiBcXHB7TH1cXHB7Tn0gaW5jbHVkZXMgbm9uLWVuZ2xpc2ggYWxwaGFiZXQvbnVtYmVycyBhcyB3ZWxsXG4gICAgICAgIGlmIChtYXRjaFszXSAmJiBwcmV2Q2hhci5tYXRjaCgvW1xccHtMfVxccHtOfV0vdSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IG5leHRDaGFyID0gbWF0Y2hbMV0gfHwgbWF0Y2hbMl0gfHwgJyc7XG4gICAgICAgIGlmICghbmV4dENoYXIgfHwgIXByZXZDaGFyIHx8IHRoaXMucnVsZXMuaW5saW5lLnB1bmN0dWF0aW9uLmV4ZWMocHJldkNoYXIpKSB7XG4gICAgICAgICAgICAvLyB1bmljb2RlIFJlZ2V4IGNvdW50cyBlbW9qaSBhcyAxIGNoYXI7IHNwcmVhZCBpbnRvIGFycmF5IGZvciBwcm9wZXIgY291bnQgKHVzZWQgbXVsdGlwbGUgdGltZXMgYmVsb3cpXG4gICAgICAgICAgICBjb25zdCBsTGVuZ3RoID0gWy4uLm1hdGNoWzBdXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IHJEZWxpbSwgckxlbmd0aCwgZGVsaW1Ub3RhbCA9IGxMZW5ndGgsIG1pZERlbGltVG90YWwgPSAwO1xuICAgICAgICAgICAgY29uc3QgZW5kUmVnID0gbWF0Y2hbMF1bMF0gPT09ICcqJyA/IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCA6IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLnJEZWxpbVVuZDtcbiAgICAgICAgICAgIGVuZFJlZy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgLy8gQ2xpcCBtYXNrZWRTcmMgdG8gc2FtZSBzZWN0aW9uIG9mIHN0cmluZyBhcyBzcmMgKG1vdmUgdG8gbGV4ZXI/KVxuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKC0xICogc3JjLmxlbmd0aCArIGxMZW5ndGgpO1xuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IGVuZFJlZy5leGVjKG1hc2tlZFNyYykpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByRGVsaW0gPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBtYXRjaFs2XTtcbiAgICAgICAgICAgICAgICBpZiAoIXJEZWxpbSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgc2luZ2xlICogaW4gX19hYmMqYWJjX19cbiAgICAgICAgICAgICAgICByTGVuZ3RoID0gWy4uLnJEZWxpbV0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFszXSB8fCBtYXRjaFs0XSkgeyAvLyBmb3VuZCBhbm90aGVyIExlZnQgRGVsaW1cbiAgICAgICAgICAgICAgICAgICAgZGVsaW1Ub3RhbCArPSByTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hbNV0gfHwgbWF0Y2hbNl0pIHsgLy8gZWl0aGVyIExlZnQgb3IgUmlnaHQgRGVsaW1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxMZW5ndGggJSAzICYmICEoKGxMZW5ndGggKyByTGVuZ3RoKSAlIDMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWREZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gQ29tbW9uTWFyayBFbXBoYXNpcyBSdWxlcyA5LTEwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsaW1Ub3RhbCAtPSByTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChkZWxpbVRvdGFsID4gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIEhhdmVuJ3QgZm91bmQgZW5vdWdoIGNsb3NpbmcgZGVsaW1pdGVyc1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleHRyYSBjaGFyYWN0ZXJzLiAqYSoqKiAtPiAqYSpcbiAgICAgICAgICAgICAgICByTGVuZ3RoID0gTWF0aC5taW4ockxlbmd0aCwgckxlbmd0aCArIGRlbGltVG90YWwgKyBtaWREZWxpbVRvdGFsKTtcbiAgICAgICAgICAgICAgICBjb25zdCByYXcgPSBbLi4uc3JjXS5zbGljZSgwLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyByTGVuZ3RoICsgMSkuam9pbignJyk7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGBlbWAgaWYgc21hbGxlc3QgZGVsaW1pdGVyIGhhcyBvZGQgY2hhciBjb3VudC4gKmEqKipcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5taW4obExlbmd0aCwgckxlbmd0aCkgJSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSByYXcuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lVG9rZW5zKHRleHQpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSAnc3Ryb25nJyBpZiBzbWFsbGVzdCBkZWxpbWl0ZXIgaGFzIGV2ZW4gY2hhciBjb3VudC4gKiphKioqXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHJhdy5zbGljZSgyLCAtMik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0cm9uZycsXG4gICAgICAgICAgICAgICAgICAgIHJhdyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29kZXNwYW4oc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmNvZGUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGNhcFsyXS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc05vblNwYWNlQ2hhcnMgPSAvW14gXS8udGVzdCh0ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzID0gL14gLy50ZXN0KHRleHQpICYmIC8gJC8udGVzdCh0ZXh0KTtcbiAgICAgICAgICAgIGlmIChoYXNOb25TcGFjZUNoYXJzICYmIGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDEsIHRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ID0gZXNjYXBlKHRleHQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29kZXNwYW4nLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnIoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmJyLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYnInLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbChzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuZGVsLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjYXBbMl0sXG4gICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2VucyhjYXBbMl0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGF1dG9saW5rKHNyYywgbWFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmF1dG9saW5rLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgbGV0IHRleHQsIGhyZWY7XG4gICAgICAgICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5tYW5nbGUgPyBtYW5nbGUoY2FwWzFdKSA6IGNhcFsxXSk7XG4gICAgICAgICAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFsxXSk7XG4gICAgICAgICAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXJsKHNyYywgbWFuZ2xlKSB7XG4gICAgICAgIGxldCBjYXA7XG4gICAgICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS51cmwuZXhlYyhzcmMpKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgICAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICAgICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5vcHRpb25zLm1hbmdsZSA/IG1hbmdsZShjYXBbMF0pIDogY2FwWzBdKTtcbiAgICAgICAgICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRvIGV4dGVuZGVkIGF1dG9saW5rIHBhdGggdmFsaWRhdGlvblxuICAgICAgICAgICAgICAgIGxldCBwcmV2Q2FwWmVybztcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZDYXBaZXJvID0gY2FwWzBdO1xuICAgICAgICAgICAgICAgICAgICBjYXBbMF0gPSB0aGlzLnJ1bGVzLmlubGluZS5fYmFja3BlZGFsLmV4ZWMoY2FwWzBdKVswXTtcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChwcmV2Q2FwWmVybyAhPT0gY2FwWzBdKTtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFswXSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcFsxXSA9PT0gJ3d3dy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGhyZWYgPSAnaHR0cDovLycgKyBjYXBbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBocmVmID0gY2FwWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgICB0b2tlbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmxpbmVUZXh0KHNyYywgc21hcnR5cGFudHMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUudGV4dC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGxldCB0ZXh0O1xuICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jaykge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0aGlzLm9wdGlvbnMuc2FuaXRpemUgPyAodGhpcy5vcHRpb25zLnNhbml0aXplciA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKSA6IGVzY2FwZShjYXBbMF0pKSA6IGNhcFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5vcHRpb25zLnNtYXJ0eXBhbnRzID8gc21hcnR5cGFudHMoY2FwWzBdKSA6IGNhcFswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEJsb2NrLUxldmVsIEdyYW1tYXJcbiAqL1xuLy8gTm90IGFsbCBydWxlcyBhcmUgZGVmaW5lZCBpbiB0aGUgb2JqZWN0IGxpdGVyYWxcbi8vIEB0cy1leHBlY3QtZXJyb3JcbmNvbnN0IGJsb2NrID0ge1xuICAgIG5ld2xpbmU6IC9eKD86ICooPzpcXG58JCkpKy8sXG4gICAgY29kZTogL14oIHs0fVteXFxuXSsoPzpcXG4oPzogKig/OlxcbnwkKSkqKT8pKy8sXG4gICAgZmVuY2VzOiAvXiB7MCwzfShgezMsfSg/PVteYFxcbl0qKD86XFxufCQpKXx+ezMsfSkoW15cXG5dKikoPzpcXG58JCkoPzp8KFtcXHNcXFNdKj8pKD86XFxufCQpKSg/OiB7MCwzfVxcMVt+YF0qICooPz1cXG58JCl8JCkvLFxuICAgIGhyOiAvXiB7MCwzfSgoPzotW1xcdCBdKil7Myx9fCg/Ol9bIFxcdF0qKXszLH18KD86XFwqWyBcXHRdKil7Myx9KSg/Olxcbit8JCkvLFxuICAgIGhlYWRpbmc6IC9eIHswLDN9KCN7MSw2fSkoPz1cXHN8JCkoLiopKD86XFxuK3wkKS8sXG4gICAgYmxvY2txdW90ZTogL14oIHswLDN9PiA/KHBhcmFncmFwaHxbXlxcbl0qKSg/OlxcbnwkKSkrLyxcbiAgICBsaXN0OiAvXiggezAsM31idWxsKShbIFxcdF1bXlxcbl0rPyk/KD86XFxufCQpLyxcbiAgICBodG1sOiAnXiB7MCwzfSg/OicgLy8gb3B0aW9uYWwgaW5kZW50YXRpb25cbiAgICAgICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgICAgICsgJ3xjb21tZW50W15cXFxcbl0qKFxcXFxuK3wkKScgLy8gKDIpXG4gICAgICAgICsgJ3w8XFxcXD9bXFxcXHNcXFxcU10qPyg/OlxcXFw/PlxcXFxuKnwkKScgLy8gKDMpXG4gICAgICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8oPzo+XFxcXG4qfCQpJyAvLyAoNClcbiAgICAgICAgKyAnfDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj8oPzpcXFxcXVxcXFxdPlxcXFxuKnwkKScgLy8gKDUpXG4gICAgICAgICsgJ3w8Lz8odGFnKSg/OiArfFxcXFxufC8/PilbXFxcXHNcXFxcU10qPyg/Oig/OlxcXFxuICopK1xcXFxufCQpJyAvLyAoNilcbiAgICAgICAgKyAnfDwoPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKShbYS16XVtcXFxcdy1dKikoPzphdHRyaWJ1dGUpKj8gKi8/Pig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICAgICArICd8PC8oPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVthLXpdW1xcXFx3LV0qXFxcXHMqPig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBjbG9zaW5nIHRhZ1xuICAgICAgICArICcpJyxcbiAgICBkZWY6IC9eIHswLDN9XFxbKGxhYmVsKVxcXTogKig/OlxcbiAqKT8oW148XFxzXVteXFxzXSp8PC4qPz4pKD86KD86ICsoPzpcXG4gKik/fCAqXFxuICopKHRpdGxlKSk/ICooPzpcXG4rfCQpLyxcbiAgICB0YWJsZTogbm9vcFRlc3QsXG4gICAgbGhlYWRpbmc6IC9eKCg/Oig/IV5idWxsICkufFxcbig/IVxcbnxidWxsICkpKz8pXFxuIHswLDN9KD0rfC0rKSAqKD86XFxuK3wkKS8sXG4gICAgLy8gcmVnZXggdGVtcGxhdGUsIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIGFjY29yZGluZyB0byBkaWZmZXJlbnQgcGFyYWdyYXBoXG4gICAgLy8gaW50ZXJydXB0aW9uIHJ1bGVzIG9mIGNvbW1vbm1hcmsgYW5kIHRoZSBvcmlnaW5hbCBtYXJrZG93biBzcGVjOlxuICAgIF9wYXJhZ3JhcGg6IC9eKFteXFxuXSsoPzpcXG4oPyFocnxoZWFkaW5nfGxoZWFkaW5nfGJsb2NrcXVvdGV8ZmVuY2VzfGxpc3R8aHRtbHx0YWJsZXwgK1xcbilbXlxcbl0rKSopLyxcbiAgICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuYmxvY2suX2xhYmVsID0gLyg/IVxccypcXF0pKD86XFxcXC58W15cXFtcXF1cXFxcXSkrLztcbmJsb2NrLl90aXRsZSA9IC8oPzpcIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnW14nXFxuXSooPzpcXG5bXidcXG5dKykqXFxuPyd8XFwoW14oKV0qXFwpKS87XG5ibG9jay5kZWYgPSBlZGl0KGJsb2NrLmRlZilcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBibG9jay5fbGFiZWwpXG4gICAgLnJlcGxhY2UoJ3RpdGxlJywgYmxvY2suX3RpdGxlKVxuICAgIC5nZXRSZWdleCgpO1xuYmxvY2suYnVsbGV0ID0gLyg/OlsqKy1dfFxcZHsxLDl9Wy4pXSkvO1xuYmxvY2subGlzdEl0ZW1TdGFydCA9IGVkaXQoL14oICopKGJ1bGwpICovKVxuICAgIC5yZXBsYWNlKCdidWxsJywgYmxvY2suYnVsbGV0KVxuICAgIC5nZXRSZWdleCgpO1xuYmxvY2subGlzdCA9IGVkaXQoYmxvY2subGlzdClcbiAgICAucmVwbGFjZSgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gICAgLnJlcGxhY2UoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/Oig/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcXFwqICopezMsfSkoPzpcXFxcbit8JCkpJylcbiAgICAucmVwbGFjZSgnZGVmJywgJ1xcXFxuKyg/PScgKyBibG9jay5kZWYuc291cmNlICsgJyknKVxuICAgIC5nZXRSZWdleCgpO1xuYmxvY2suX3RhZyA9ICdhZGRyZXNzfGFydGljbGV8YXNpZGV8YmFzZXxiYXNlZm9udHxibG9ja3F1b3RlfGJvZHl8Y2FwdGlvbidcbiAgICArICd8Y2VudGVyfGNvbHxjb2xncm91cHxkZHxkZXRhaWxzfGRpYWxvZ3xkaXJ8ZGl2fGRsfGR0fGZpZWxkc2V0fGZpZ2NhcHRpb24nXG4gICAgKyAnfGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHxoWzEtNl18aGVhZHxoZWFkZXJ8aHJ8aHRtbHxpZnJhbWUnXG4gICAgKyAnfGxlZ2VuZHxsaXxsaW5rfG1haW58bWVudXxtZW51aXRlbXxtZXRhfG5hdnxub2ZyYW1lc3xvbHxvcHRncm91cHxvcHRpb24nXG4gICAgKyAnfHB8cGFyYW18c2VjdGlvbnxzb3VyY2V8c3VtbWFyeXx0YWJsZXx0Ym9keXx0ZHx0Zm9vdHx0aHx0aGVhZHx0aXRsZXx0cidcbiAgICArICd8dHJhY2t8dWwnO1xuYmxvY2suX2NvbW1lbnQgPSAvPCEtLSg/IS0/PilbXFxzXFxTXSo/KD86LS0+fCQpLztcbmJsb2NrLmh0bWwgPSBlZGl0KGJsb2NrLmh0bWwsICdpJylcbiAgICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAgIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKVxuICAgIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvICtbYS16QS1aOl9dW1xcdy46LV0qKD86ICo9ICpcIlteXCJcXG5dKlwifCAqPSAqJ1teJ1xcbl0qJ3wgKj0gKlteXFxzXCInPTw+YF0rKT8vKVxuICAgIC5nZXRSZWdleCgpO1xuYmxvY2subGhlYWRpbmcgPSBlZGl0KGJsb2NrLmxoZWFkaW5nKVxuICAgIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldCkgLy8gbGlzdHMgY2FuIGludGVycnVwdFxuICAgIC5nZXRSZWdleCgpO1xuYmxvY2sucGFyYWdyYXBoID0gZWRpdChibG9jay5fcGFyYWdyYXBoKVxuICAgIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAgIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSAnKVxuICAgIC5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXggaGVhZGluZ3MgZG9uJ3QgaW50ZXJydXB0IGNvbW1vbm1hcmsgcGFyYWdyYXBoc1xuICAgIC5yZXBsYWNlKCd8dGFibGUnLCAnJylcbiAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gICAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gcGFycyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgICAuZ2V0UmVnZXgoKTtcbmJsb2NrLmJsb2NrcXVvdGUgPSBlZGl0KGJsb2NrLmJsb2NrcXVvdGUpXG4gICAgLnJlcGxhY2UoJ3BhcmFncmFwaCcsIGJsb2NrLnBhcmFncmFwaClcbiAgICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAqL1xuYmxvY2subm9ybWFsID0geyAuLi5ibG9jayB9O1xuLyoqXG4gKiBHRk0gQmxvY2sgR3JhbW1hclxuICovXG5ibG9jay5nZm0gPSB7XG4gICAgLi4uYmxvY2subm9ybWFsLFxuICAgIHRhYmxlOiAnXiAqKFteXFxcXG4gXS4qXFxcXHwuKilcXFxcbicgLy8gSGVhZGVyXG4gICAgICAgICsgJyB7MCwzfSg/OlxcXFx8ICopPyg6Py0rOj8gKig/OlxcXFx8ICo6Py0rOj8gKikqKSg/OlxcXFx8ICopPycgLy8gQWxpZ25cbiAgICAgICAgKyAnKD86XFxcXG4oKD86KD8hICpcXFxcbnxocnxoZWFkaW5nfGJsb2NrcXVvdGV8Y29kZXxmZW5jZXN8bGlzdHxodG1sKS4qKD86XFxcXG58JCkpKilcXFxcbip8JCknIC8vIENlbGxzXG59O1xuYmxvY2suZ2ZtLnRhYmxlID0gZWRpdChibG9jay5nZm0udGFibGUpXG4gICAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gICAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpXG4gICAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gICAgLnJlcGxhY2UoJ2NvZGUnLCAnIHs0fVteXFxcXG5dJylcbiAgICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gICAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gdGFibGVzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAgIC5nZXRSZWdleCgpO1xuYmxvY2suZ2ZtLnBhcmFncmFwaCA9IGVkaXQoYmxvY2suX3BhcmFncmFwaClcbiAgICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0gJylcbiAgICAucmVwbGFjZSgnfGxoZWFkaW5nJywgJycpIC8vIHNldGV4IGhlYWRpbmdzIGRvbid0IGludGVycnVwdCBjb21tb25tYXJrIHBhcmFncmFwaHNcbiAgICAucmVwbGFjZSgndGFibGUnLCBibG9jay5nZm0udGFibGUpIC8vIGludGVycnVwdCBwYXJhZ3JhcGhzIHdpdGggdGFibGVcbiAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gICAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gcGFycyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogUGVkYW50aWMgZ3JhbW1hciAob3JpZ2luYWwgSm9obiBHcnViZXIncyBsb29zZSBtYXJrZG93biBzcGVjaWZpY2F0aW9uKVxuICovXG5ibG9jay5wZWRhbnRpYyA9IHtcbiAgICAuLi5ibG9jay5ub3JtYWwsXG4gICAgaHRtbDogZWRpdCgnXiAqKD86Y29tbWVudCAqKD86XFxcXG58XFxcXHMqJCknXG4gICAgICAgICsgJ3w8KHRhZylbXFxcXHNcXFxcU10rPzwvXFxcXDE+ICooPzpcXFxcbnsyLH18XFxcXHMqJCknIC8vIGNsb3NlZCB0YWdcbiAgICAgICAgKyAnfDx0YWcoPzpcIlteXCJdKlwifFxcJ1teXFwnXSpcXCd8XFxcXHNbXlxcJ1wiLz5cXFxcc10qKSo/Lz8+ICooPzpcXFxcbnsyLH18XFxcXHMqJCkpJylcbiAgICAgICAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgICAgICAgLnJlcGxhY2UoL3RhZy9nLCAnKD8hKD86J1xuICAgICAgICArICdhfGVtfHN0cm9uZ3xzbWFsbHxzfGNpdGV8cXxkZm58YWJicnxkYXRhfHRpbWV8Y29kZXx2YXJ8c2FtcHxrYmR8c3ViJ1xuICAgICAgICArICd8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvfHNwYW58YnJ8d2JyfGluc3xkZWx8aW1nKSdcbiAgICAgICAgKyAnXFxcXGIpXFxcXHcrKD8hOnxbXlxcXFx3XFxcXHNAXSpAKVxcXFxiJylcbiAgICAgICAgLmdldFJlZ2V4KCksXG4gICAgZGVmOiAvXiAqXFxbKFteXFxdXSspXFxdOiAqPD8oW15cXHM+XSspPj8oPzogKyhbXCIoXVteXFxuXStbXCIpXSkpPyAqKD86XFxuK3wkKS8sXG4gICAgaGVhZGluZzogL14oI3sxLDZ9KSguKikoPzpcXG4rfCQpLyxcbiAgICBmZW5jZXM6IG5vb3BUZXN0LFxuICAgIGxoZWFkaW5nOiAvXiguKz8pXFxuIHswLDN9KD0rfC0rKSAqKD86XFxuK3wkKS8sXG4gICAgcGFyYWdyYXBoOiBlZGl0KGJsb2NrLm5vcm1hbC5fcGFyYWdyYXBoKVxuICAgICAgICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgICAgICAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnICojezEsNn0gKlteXFxuXScpXG4gICAgICAgIC5yZXBsYWNlKCdsaGVhZGluZycsIGJsb2NrLmxoZWFkaW5nKVxuICAgICAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAgICAgLnJlcGxhY2UoJ3xmZW5jZXMnLCAnJylcbiAgICAgICAgLnJlcGxhY2UoJ3xsaXN0JywgJycpXG4gICAgICAgIC5yZXBsYWNlKCd8aHRtbCcsICcnKVxuICAgICAgICAuZ2V0UmVnZXgoKVxufTtcbi8qKlxuICogSW5saW5lLUxldmVsIEdyYW1tYXJcbiAqL1xuLy8gTm90IGFsbCBydWxlcyBhcmUgZGVmaW5lZCBpbiB0aGUgb2JqZWN0IGxpdGVyYWxcbi8vIEB0cy1leHBlY3QtZXJyb3JcbmNvbnN0IGlubGluZSA9IHtcbiAgICBlc2NhcGU6IC9eXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvLFxuICAgIGF1dG9saW5rOiAvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vLFxuICAgIHVybDogbm9vcFRlc3QsXG4gICAgdGFnOiAnXmNvbW1lbnQnXG4gICAgICAgICsgJ3xePC9bYS16QS1aXVtcXFxcdzotXSpcXFxccyo+JyAvLyBzZWxmLWNsb3NpbmcgdGFnXG4gICAgICAgICsgJ3xePFthLXpBLVpdW1xcXFx3LV0qKD86YXR0cmlidXRlKSo/XFxcXHMqLz8+JyAvLyBvcGVuIHRhZ1xuICAgICAgICArICd8XjxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+JyAvLyBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBlLmcuIDw/cGhwID8+XG4gICAgICAgICsgJ3xePCFbYS16QS1aXStcXFxcc1tcXFxcc1xcXFxTXSo/PicgLy8gZGVjbGFyYXRpb24sIGUuZy4gPCFET0NUWVBFIGh0bWw+XG4gICAgICAgICsgJ3xePCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JyxcbiAgICBsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcKFxccyooaHJlZikoPzpcXHMrKHRpdGxlKSk/XFxzKlxcKS8sXG4gICAgcmVmbGluazogL14hP1xcWyhsYWJlbClcXF1cXFsocmVmKVxcXS8sXG4gICAgbm9saW5rOiAvXiE/XFxbKHJlZilcXF0oPzpcXFtcXF0pPy8sXG4gICAgcmVmbGlua1NlYXJjaDogJ3JlZmxpbmt8bm9saW5rKD8hXFxcXCgpJyxcbiAgICBlbVN0cm9uZzoge1xuICAgICAgICBsRGVsaW06IC9eKD86XFwqKyg/OigoPyFcXCopW3B1bmN0XSl8W15cXHMqXSkpfF5fKyg/OigoPyFfKVtwdW5jdF0pfChbXlxcc19dKSkvLFxuICAgICAgICAvLyAgICAgICAgICgxKSBhbmQgKDIpIGNhbiBvbmx5IGJlIGEgUmlnaHQgRGVsaW1pdGVyLiAoMykgYW5kICg0KSBjYW4gb25seSBiZSBMZWZ0LiAgKDUpIGFuZCAoNikgY2FuIGJlIGVpdGhlciBMZWZ0IG9yIFJpZ2h0LlxuICAgICAgICAvLyAgICAgICAgIHwgU2tpcCBvcnBoYW4gaW5zaWRlIHN0cm9uZyAgICAgIHwgQ29uc3VtZSB0byBkZWxpbSB8ICgxKSAjKioqICAgICAgICAgICAgICB8ICgyKSBhKioqIywgYSoqKiAgICAgICAgICAgICAgICAgICAgfCAoMykgIyoqKmEsICoqKmEgICAgICAgICAgICAgICAgICB8ICg0KSAqKiojICAgICAgICAgICAgICAgICB8ICg1KSAjKioqIyAgICAgICAgICAgICAgICAgICAgICAgICB8ICg2KSBhKioqYVxuICAgICAgICByRGVsaW1Bc3Q6IC9eW15fKl0qP19fW15fKl0qP1xcKlteXypdKj8oPz1fXyl8W14qXSsoPz1bXipdKXwoPyFcXCopW3B1bmN0XShcXCorKSg/PVtcXHNdfCQpfFtecHVuY3RcXHNdKFxcKispKD8hXFwqKSg/PVtwdW5jdFxcc118JCl8KD8hXFwqKVtwdW5jdFxcc10oXFwqKykoPz1bXnB1bmN0XFxzXSl8W1xcc10oXFwqKykoPyFcXCopKD89W3B1bmN0XSl8KD8hXFwqKVtwdW5jdF0oXFwqKykoPyFcXCopKD89W3B1bmN0XSl8W15wdW5jdFxcc10oXFwqKykoPz1bXnB1bmN0XFxzXSkvLFxuICAgICAgICByRGVsaW1VbmQ6IC9eW15fKl0qP1xcKlxcKlteXypdKj9fW15fKl0qPyg/PVxcKlxcKil8W15fXSsoPz1bXl9dKXwoPyFfKVtwdW5jdF0oXyspKD89W1xcc118JCl8W15wdW5jdFxcc10oXyspKD8hXykoPz1bcHVuY3RcXHNdfCQpfCg/IV8pW3B1bmN0XFxzXShfKykoPz1bXnB1bmN0XFxzXSl8W1xcc10oXyspKD8hXykoPz1bcHVuY3RdKXwoPyFfKVtwdW5jdF0oXyspKD8hXykoPz1bcHVuY3RdKS8gLy8gXi0gTm90IGFsbG93ZWQgZm9yIF9cbiAgICB9LFxuICAgIGNvZGU6IC9eKGArKShbXmBdfFteYF1bXFxzXFxTXSo/W15gXSlcXDEoPyFgKS8sXG4gICAgYnI6IC9eKCB7Mix9fFxcXFwpXFxuKD8hXFxzKiQpLyxcbiAgICBkZWw6IG5vb3BUZXN0LFxuICAgIHRleHQ6IC9eKGArfFteYF0pKD86KD89IHsyLH1cXG4pfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCpfXXxcXGJffCQpfFteIF0oPz0gezIsfVxcbikpKS8sXG4gICAgcHVuY3R1YXRpb246IC9eKCg/IVsqX10pW1xcc3B1bmN0dWF0aW9uXSkvXG59O1xuLy8gbGlzdCBvZiB1bmljb2RlIHB1bmN0dWF0aW9uIG1hcmtzLCBwbHVzIGFueSBtaXNzaW5nIGNoYXJhY3RlcnMgZnJvbSBDb21tb25NYXJrIHNwZWNcbmlubGluZS5fcHVuY3R1YXRpb24gPSAnXFxcXHB7UH0kKzw9PmBefH4nO1xuaW5saW5lLnB1bmN0dWF0aW9uID0gZWRpdChpbmxpbmUucHVuY3R1YXRpb24sICd1JykucmVwbGFjZSgvcHVuY3R1YXRpb24vZywgaW5saW5lLl9wdW5jdHVhdGlvbikuZ2V0UmVnZXgoKTtcbi8vIHNlcXVlbmNlcyBlbSBzaG91bGQgc2tpcCBvdmVyIFt0aXRsZV0obGluayksIGBjb2RlYCwgPGh0bWw+XG5pbmxpbmUuYmxvY2tTa2lwID0gL1xcW1teW1xcXV0qP1xcXVxcKFteXFwoXFwpXSo/XFwpfGBbXmBdKj9gfDxbXjw+XSo/Pi9nO1xuaW5saW5lLmFueVB1bmN0dWF0aW9uID0gL1xcXFxbcHVuY3RdL2c7XG5pbmxpbmUuX2VzY2FwZXMgPSAvXFxcXChbcHVuY3RdKS9nO1xuaW5saW5lLl9jb21tZW50ID0gZWRpdChibG9jay5fY29tbWVudCkucmVwbGFjZSgnKD86LS0+fCQpJywgJy0tPicpLmdldFJlZ2V4KCk7XG5pbmxpbmUuZW1TdHJvbmcubERlbGltID0gZWRpdChpbmxpbmUuZW1TdHJvbmcubERlbGltLCAndScpXG4gICAgLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pXG4gICAgLmdldFJlZ2V4KCk7XG5pbmxpbmUuZW1TdHJvbmcuckRlbGltQXN0ID0gZWRpdChpbmxpbmUuZW1TdHJvbmcuckRlbGltQXN0LCAnZ3UnKVxuICAgIC5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKVxuICAgIC5nZXRSZWdleCgpO1xuaW5saW5lLmVtU3Ryb25nLnJEZWxpbVVuZCA9IGVkaXQoaW5saW5lLmVtU3Ryb25nLnJEZWxpbVVuZCwgJ2d1JylcbiAgICAucmVwbGFjZSgvcHVuY3QvZywgaW5saW5lLl9wdW5jdHVhdGlvbilcbiAgICAuZ2V0UmVnZXgoKTtcbmlubGluZS5hbnlQdW5jdHVhdGlvbiA9IGVkaXQoaW5saW5lLmFueVB1bmN0dWF0aW9uLCAnZ3UnKVxuICAgIC5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKVxuICAgIC5nZXRSZWdleCgpO1xuaW5saW5lLl9lc2NhcGVzID0gZWRpdChpbmxpbmUuX2VzY2FwZXMsICdndScpXG4gICAgLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pXG4gICAgLmdldFJlZ2V4KCk7XG5pbmxpbmUuX3NjaGVtZSA9IC9bYS16QS1aXVthLXpBLVowLTkrLi1dezEsMzF9LztcbmlubGluZS5fZW1haWwgPSAvW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXSsoQClbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKyg/IVstX10pLztcbmlubGluZS5hdXRvbGluayA9IGVkaXQoaW5saW5lLmF1dG9saW5rKVxuICAgIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuX2VtYWlsKVxuICAgIC5nZXRSZWdleCgpO1xuaW5saW5lLl9hdHRyaWJ1dGUgPSAvXFxzK1thLXpBLVo6X11bXFx3LjotXSooPzpcXHMqPVxccypcIlteXCJdKlwifFxccyo9XFxzKidbXiddKid8XFxzKj1cXHMqW15cXHNcIic9PD5gXSspPy87XG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAgIC5yZXBsYWNlKCdjb21tZW50JywgaW5saW5lLl9jb21tZW50KVxuICAgIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCBpbmxpbmUuX2F0dHJpYnV0ZSlcbiAgICAuZ2V0UmVnZXgoKTtcbmlubGluZS5fbGFiZWwgPSAvKD86XFxbKD86XFxcXC58W15cXFtcXF1cXFxcXSkqXFxdfFxcXFwufGBbXmBdKmB8W15cXFtcXF1cXFxcYF0pKj8vO1xuaW5saW5lLl9ocmVmID0gLzwoPzpcXFxcLnxbXlxcbjw+XFxcXF0pKz58W15cXHNcXHgwMC1cXHgxZl0qLztcbmlubGluZS5fdGl0bGUgPSAvXCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8Jyg/OlxcXFwnP3xbXidcXFxcXSkqJ3xcXCgoPzpcXFxcXFwpP3xbXilcXFxcXSkqXFwpLztcbmlubGluZS5saW5rID0gZWRpdChpbmxpbmUubGluaylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5yZXBsYWNlKCdocmVmJywgaW5saW5lLl9ocmVmKVxuICAgIC5yZXBsYWNlKCd0aXRsZScsIGlubGluZS5fdGl0bGUpXG4gICAgLmdldFJlZ2V4KCk7XG5pbmxpbmUucmVmbGluayA9IGVkaXQoaW5saW5lLnJlZmxpbmspXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAucmVwbGFjZSgncmVmJywgYmxvY2suX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpO1xuaW5saW5lLm5vbGluayA9IGVkaXQoaW5saW5lLm5vbGluaylcbiAgICAucmVwbGFjZSgncmVmJywgYmxvY2suX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpO1xuaW5saW5lLnJlZmxpbmtTZWFyY2ggPSBlZGl0KGlubGluZS5yZWZsaW5rU2VhcmNoLCAnZycpXG4gICAgLnJlcGxhY2UoJ3JlZmxpbmsnLCBpbmxpbmUucmVmbGluaylcbiAgICAucmVwbGFjZSgnbm9saW5rJywgaW5saW5lLm5vbGluaylcbiAgICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogTm9ybWFsIElubGluZSBHcmFtbWFyXG4gKi9cbmlubGluZS5ub3JtYWwgPSB7IC4uLmlubGluZSB9O1xuLyoqXG4gKiBQZWRhbnRpYyBJbmxpbmUgR3JhbW1hclxuICovXG5pbmxpbmUucGVkYW50aWMgPSB7XG4gICAgLi4uaW5saW5lLm5vcm1hbCxcbiAgICBzdHJvbmc6IHtcbiAgICAgICAgc3RhcnQ6IC9eX198XFwqXFwqLyxcbiAgICAgICAgbWlkZGxlOiAvXl9fKD89XFxTKShbXFxzXFxTXSo/XFxTKV9fKD8hXyl8XlxcKlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCpcXCooPyFcXCopLyxcbiAgICAgICAgZW5kQXN0OiAvXFwqXFwqKD8hXFwqKS9nLFxuICAgICAgICBlbmRVbmQ6IC9fXyg/IV8pL2dcbiAgICB9LFxuICAgIGVtOiB7XG4gICAgICAgIHN0YXJ0OiAvXl98XFwqLyxcbiAgICAgICAgbWlkZGxlOiAvXigpXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKig/IVxcKil8Xl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pLyxcbiAgICAgICAgZW5kQXN0OiAvXFwqKD8hXFwqKS9nLFxuICAgICAgICBlbmRVbmQ6IC9fKD8hXykvZ1xuICAgIH0sXG4gICAgbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcKCguKj8pXFwpLylcbiAgICAgICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAgICAgLmdldFJlZ2V4KCksXG4gICAgcmVmbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxccypcXFsoW15cXF1dKilcXF0vKVxuICAgICAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgICAgICAuZ2V0UmVnZXgoKVxufTtcbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cbmlubGluZS5nZm0gPSB7XG4gICAgLi4uaW5saW5lLm5vcm1hbCxcbiAgICBlc2NhcGU6IGVkaXQoaW5saW5lLmVzY2FwZSkucmVwbGFjZSgnXSknLCAnfnxdKScpLmdldFJlZ2V4KCksXG4gICAgX2V4dGVuZGVkX2VtYWlsOiAvW0EtWmEtejAtOS5fKy1dKyhAKVthLXpBLVowLTktX10rKD86XFwuW2EtekEtWjAtOS1fXSpbYS16QS1aMC05XSkrKD8hWy1fXSkvLFxuICAgIHVybDogL14oKD86ZnRwfGh0dHBzPyk6XFwvXFwvfHd3d1xcLikoPzpbYS16QS1aMC05XFwtXStcXC4/KStbXlxcczxdKnxeZW1haWwvLFxuICAgIF9iYWNrcGVkYWw6IC8oPzpbXj8hLiw6OypfJ1wifigpJl0rfFxcKFteKV0qXFwpfCYoPyFbYS16QS1aMC05XSs7JCl8Wz8hLiw6OypfJ1wifildKyg/ISQpKSsvLFxuICAgIGRlbDogL14ofn4/KSg/PVteXFxzfl0pKFtcXHNcXFNdKj9bXlxcc35dKVxcMSg/PVtefl18JCkvLFxuICAgIHRleHQ6IC9eKFtgfl0rfFteYH5dKSg/Oig/PSB7Mix9XFxuKXwoPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCp+X118XFxiX3xodHRwcz86XFwvXFwvfGZ0cDpcXC9cXC98d3d3XFwufCQpfFteIF0oPz0gezIsfVxcbil8W15hLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0oPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApKSkvXG59O1xuaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsLCAnaScpXG4gICAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLmdmbS5fZXh0ZW5kZWRfZW1haWwpXG4gICAgLmdldFJlZ2V4KCk7XG4vKipcbiAqIEdGTSArIExpbmUgQnJlYWtzIElubGluZSBHcmFtbWFyXG4gKi9cbmlubGluZS5icmVha3MgPSB7XG4gICAgLi4uaW5saW5lLmdmbSxcbiAgICBicjogZWRpdChpbmxpbmUuYnIpLnJlcGxhY2UoJ3syLH0nLCAnKicpLmdldFJlZ2V4KCksXG4gICAgdGV4dDogZWRpdChpbmxpbmUuZ2ZtLnRleHQpXG4gICAgICAgIC5yZXBsYWNlKCdcXFxcYl8nLCAnXFxcXGJffCB7Mix9XFxcXG4nKVxuICAgICAgICAucmVwbGFjZSgvXFx7MixcXH0vZywgJyonKVxuICAgICAgICAuZ2V0UmVnZXgoKVxufTtcblxuLyoqXG4gKiBzbWFydHlwYW50cyB0ZXh0IHJlcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIHNtYXJ0eXBhbnRzKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dFxuICAgICAgICAvLyBlbS1kYXNoZXNcbiAgICAgICAgLnJlcGxhY2UoLy0tLS9nLCAnXFx1MjAxNCcpXG4gICAgICAgIC8vIGVuLWRhc2hlc1xuICAgICAgICAucmVwbGFjZSgvLS0vZywgJ1xcdTIwMTMnKVxuICAgICAgICAvLyBvcGVuaW5nIHNpbmdsZXNcbiAgICAgICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1wiXFxzXSknL2csICckMVxcdTIwMTgnKVxuICAgICAgICAvLyBjbG9zaW5nIHNpbmdsZXMgJiBhcG9zdHJvcGhlc1xuICAgICAgICAucmVwbGFjZSgvJy9nLCAnXFx1MjAxOScpXG4gICAgICAgIC8vIG9wZW5pbmcgZG91Ymxlc1xuICAgICAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XFx1MjAxOFxcc10pXCIvZywgJyQxXFx1MjAxYycpXG4gICAgICAgIC8vIGNsb3NpbmcgZG91Ymxlc1xuICAgICAgICAucmVwbGFjZSgvXCIvZywgJ1xcdTIwMWQnKVxuICAgICAgICAvLyBlbGxpcHNlc1xuICAgICAgICAucmVwbGFjZSgvXFwuezN9L2csICdcXHUyMDI2Jyk7XG59XG4vKipcbiAqIG1hbmdsZSBlbWFpbCBhZGRyZXNzZXNcbiAqL1xuZnVuY3Rpb24gbWFuZ2xlKHRleHQpIHtcbiAgICBsZXQgb3V0ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoID0gTWF0aC5yYW5kb20oKSA+IDAuNVxuICAgICAgICAgICAgPyAneCcgKyB0ZXh0LmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICA6IHRleHQuY2hhckNvZGVBdChpKS50b1N0cmluZygpO1xuICAgICAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5jbGFzcyBfTGV4ZXIge1xuICAgIHRva2VucztcbiAgICBvcHRpb25zO1xuICAgIHN0YXRlO1xuICAgIHRva2VuaXplcjtcbiAgICBpbmxpbmVRdWV1ZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIC8vIFRva2VuTGlzdCBjYW5ub3QgYmUgY3JlYXRlZCBpbiBvbmUgZ29cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgICAgICB0aGlzLnRva2Vucy5saW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZXhwb3J0cy5kZWZhdWx0cztcbiAgICAgICAgdGhpcy5vcHRpb25zLnRva2VuaXplciA9IHRoaXMub3B0aW9ucy50b2tlbml6ZXIgfHwgbmV3IF9Ub2tlbml6ZXIoKTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSB0aGlzLm9wdGlvbnMudG9rZW5pemVyO1xuICAgICAgICB0aGlzLnRva2VuaXplci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLnRva2VuaXplci5sZXhlciA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW5saW5lUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGluTGluazogZmFsc2UsXG4gICAgICAgICAgICBpblJhd0Jsb2NrOiBmYWxzZSxcbiAgICAgICAgICAgIHRvcDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBydWxlcyA9IHtcbiAgICAgICAgICAgIGJsb2NrOiBibG9jay5ub3JtYWwsXG4gICAgICAgICAgICBpbmxpbmU6IGlubGluZS5ub3JtYWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgICAgcnVsZXMuYmxvY2sgPSBibG9jay5wZWRhbnRpYztcbiAgICAgICAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5wZWRhbnRpYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgICAgICAgICBydWxlcy5ibG9jayA9IGJsb2NrLmdmbTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICAgICAgICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLmJyZWFrcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5nZm07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b2tlbml6ZXIucnVsZXMgPSBydWxlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwb3NlIFJ1bGVzXG4gICAgICovXG4gICAgc3RhdGljIGdldCBydWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgaW5saW5lXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBMZXggTWV0aG9kXG4gICAgICovXG4gICAgc3RhdGljIGxleChzcmMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGV4ZXIgPSBuZXcgX0xleGVyKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbGV4ZXIubGV4KHNyYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBMZXggSW5saW5lIE1ldGhvZFxuICAgICAqL1xuICAgIHN0YXRpYyBsZXhJbmxpbmUoc3JjLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxleGVyID0gbmV3IF9MZXhlcihvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGxleGVyLmlubGluZVRva2VucyhzcmMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVwcm9jZXNzaW5nXG4gICAgICovXG4gICAgbGV4KHNyYykge1xuICAgICAgICBzcmMgPSBzcmNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKTtcbiAgICAgICAgdGhpcy5ibG9ja1Rva2VucyhzcmMsIHRoaXMudG9rZW5zKTtcbiAgICAgICAgbGV0IG5leHQ7XG4gICAgICAgIHdoaWxlIChuZXh0ID0gdGhpcy5pbmxpbmVRdWV1ZS5zaGlmdCgpKSB7XG4gICAgICAgICAgICB0aGlzLmlubGluZVRva2VucyhuZXh0LnNyYywgbmV4dC50b2tlbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgICB9XG4gICAgYmxvY2tUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFx0L2csICcgICAgJykucmVwbGFjZSgvXiArJC9nbSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3JjID0gc3JjLnJlcGxhY2UoL14oICopKFxcdCspL2dtLCAoXywgbGVhZGluZywgdGFicykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWFkaW5nICsgJyAgICAnLnJlcGVhdCh0YWJzLmxlbmd0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9rZW47XG4gICAgICAgIGxldCBsYXN0VG9rZW47XG4gICAgICAgIGxldCBjdXRTcmM7XG4gICAgICAgIGxldCBsYXN0UGFyYWdyYXBoQ2xpcHBlZDtcbiAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2tcbiAgICAgICAgICAgICAgICAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5ibG9jay5zb21lKChleHRUb2tlbml6ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuID0gZXh0VG9rZW5pemVyLmNhbGwoeyBsZXhlcjogdGhpcyB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5ld2xpbmVcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnNwYWNlKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5yYXcubGVuZ3RoID09PSAxICYmIHRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBzaW5nbGUgXFxuIGFzIGEgc3BhY2VyLCBpdCdzIHRlcm1pbmF0aW5nIHRoZSBsYXN0IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIG1vdmUgaXQgdGhlcmUgc28gdGhhdCB3ZSBkb24ndCBnZXQgdW5lY2Vzc2FyeSBwYXJhZ3JhcGggdGFnc1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnJhdyArPSAnXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb2RlXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5jb2RlKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgLy8gQW4gaW5kZW50ZWQgY29kZSBibG9jayBjYW5ub3QgaW50ZXJydXB0IGEgcGFyYWdyYXBoLlxuICAgICAgICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgKGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJyB8fCBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmZW5jZXNcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmZlbmNlcyhzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoZWFkaW5nXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5oZWFkaW5nKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhyXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5ocihzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBibG9ja3F1b3RlXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5ibG9ja3F1b3RlKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxpc3RcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxpc3Qoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaHRtbFxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuaHRtbChzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWZcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmRlZihzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgKGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJyB8fCBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy50b2tlbnMubGlua3NbdG9rZW4udGFnXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2Vucy5saW5rc1t0b2tlbi50YWddID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogdG9rZW4uaHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0b2tlbi50aXRsZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRhYmxlIChnZm0pXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci50YWJsZShzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBsaGVhZGluZ1xuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGhlYWRpbmcoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgICAgICAgICAgLy8gcHJldmVudCBwYXJhZ3JhcGggY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG4gICAgICAgICAgICBjdXRTcmMgPSBzcmM7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRCbG9jaykge1xuICAgICAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFNyYyA9IHNyYy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcFN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0QmxvY2suZm9yRWFjaCgoZ2V0U3RhcnRJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoeyBsZXhlcjogdGhpcyB9LCB0ZW1wU3JjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wU3RhcnQgPT09ICdudW1iZXInICYmIHRlbXBTdGFydCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCwgdGVtcFN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4IDwgSW5maW5pdHkgJiYgc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1dFNyYyA9IHNyYy5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnRvcCAmJiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5wYXJhZ3JhcGgoY3V0U3JjKSkpIHtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0UGFyYWdyYXBoQ2xpcHBlZCAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RQYXJhZ3JhcGhDbGlwcGVkID0gKGN1dFNyYy5sZW5ndGggIT09IHNyYy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXh0XG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci50ZXh0KHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlLnRvcCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuICAgIGlubGluZShzcmMsIHRva2VucyA9IFtdKSB7XG4gICAgICAgIHRoaXMuaW5saW5lUXVldWUucHVzaCh7IHNyYywgdG9rZW5zIH0pO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMZXhpbmcvQ29tcGlsaW5nXG4gICAgICovXG4gICAgaW5saW5lVG9rZW5zKHNyYywgdG9rZW5zID0gW10pIHtcbiAgICAgICAgbGV0IHRva2VuLCBsYXN0VG9rZW4sIGN1dFNyYztcbiAgICAgICAgLy8gU3RyaW5nIHdpdGggbGlua3MgbWFza2VkIHRvIGF2b2lkIGludGVyZmVyZW5jZSB3aXRoIGVtIGFuZCBzdHJvbmdcbiAgICAgICAgbGV0IG1hc2tlZFNyYyA9IHNyYztcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBsZXQga2VlcFByZXZDaGFyLCBwcmV2Q2hhcjtcbiAgICAgICAgLy8gTWFzayBvdXQgcmVmbGlua3NcbiAgICAgICAgaWYgKHRoaXMudG9rZW5zLmxpbmtzKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rcyA9IE9iamVjdC5rZXlzKHRoaXMudG9rZW5zLmxpbmtzKTtcbiAgICAgICAgICAgIGlmIChsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlua3MuaW5jbHVkZXMobWF0Y2hbMF0uc2xpY2UobWF0Y2hbMF0ubGFzdEluZGV4T2YoJ1snKSArIDEsIC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tlZFNyYyA9IG1hc2tlZFNyYy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyAnWycgKyAnYScucmVwZWF0KG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmxhc3RJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFzayBvdXQgb3RoZXIgYmxvY2tzXG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuYmxvY2tTa2lwLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArICdhJy5yZXBlYXQobWF0Y2hbMF0ubGVuZ3RoIC0gMikgKyAnXScgKyBtYXNrZWRTcmMuc2xpY2UodGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmJsb2NrU2tpcC5sYXN0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1hc2sgb3V0IGVzY2FwZWQgY2hhcmFjdGVyc1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmFueVB1bmN0dWF0aW9uLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICcrKycgKyBtYXNrZWRTcmMuc2xpY2UodGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmFueVB1bmN0dWF0aW9uLmxhc3RJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgaWYgKCFrZWVwUHJldkNoYXIpIHtcbiAgICAgICAgICAgICAgICBwcmV2Q2hhciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2VlcFByZXZDaGFyID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBleHRlbnNpb25zXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5pbmxpbmVcbiAgICAgICAgICAgICAgICAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5pbmxpbmUuc29tZSgoZXh0VG9rZW5pemVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiA9IGV4dFRva2VuaXplci5jYWxsKHsgbGV4ZXI6IHRoaXMgfSwgc3JjLCB0b2tlbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2NhcGVcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVzY2FwZShzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWdcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRhZyhzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbGlua1xuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGluayhzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWZsaW5rLCBub2xpbmtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnJlZmxpbmsoc3JjLCB0aGlzLnRva2Vucy5saW5rcykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiB0b2tlbi50eXBlID09PSAndGV4dCcgJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gdG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbSAmIHN0cm9uZ1xuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZW1TdHJvbmcoc3JjLCBtYXNrZWRTcmMsIHByZXZDaGFyKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29kZVxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZXNwYW4oc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYnJcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmJyKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlbCAoZ2ZtKVxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZGVsKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF1dG9saW5rXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5hdXRvbGluayhzcmMsIG1hbmdsZSkpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVybCAoZ2ZtKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmluTGluayAmJiAodG9rZW4gPSB0aGlzLnRva2VuaXplci51cmwoc3JjLCBtYW5nbGUpKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGV4dFxuICAgICAgICAgICAgLy8gcHJldmVudCBpbmxpbmVUZXh0IGNvbnN1bWluZyBleHRlbnNpb25zIGJ5IGNsaXBwaW5nICdzcmMnIHRvIGV4dGVuc2lvbiBzdGFydFxuICAgICAgICAgICAgY3V0U3JjID0gc3JjO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wU3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRJbmxpbmUuZm9yRWFjaCgoZ2V0U3RhcnRJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoeyBsZXhlcjogdGhpcyB9LCB0ZW1wU3JjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wU3RhcnQgPT09ICdudW1iZXInICYmIHRlbXBTdGFydCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCwgdGVtcFN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4IDwgSW5maW5pdHkgJiYgc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1dFNyYyA9IHNyYy5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmlubGluZVRleHQoY3V0U3JjLCBzbWFydHlwYW50cykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5yYXcuc2xpY2UoLTEpICE9PSAnXycpIHsgLy8gVHJhY2sgcHJldkNoYXIgYmVmb3JlIHN0cmluZyBvZiBfX19fIHN0YXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgcHJldkNoYXIgPSB0b2tlbi5yYXcuc2xpY2UoLTEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrZWVwUHJldkNoYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gdG9rZW4ucmF3O1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW5kZXJlclxuICovXG5jbGFzcyBfUmVuZGVyZXIge1xuICAgIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGV4cG9ydHMuZGVmYXVsdHM7XG4gICAgfVxuICAgIGNvZGUoY29kZSwgaW5mb3N0cmluZywgZXNjYXBlZCkge1xuICAgICAgICBjb25zdCBsYW5nID0gKGluZm9zdHJpbmcgfHwgJycpLm1hdGNoKC9eXFxTKi8pPy5bMF07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICBjb25zdCBvdXQgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KGNvZGUsIGxhbmcpO1xuICAgICAgICAgICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gY29kZSkge1xuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29kZSA9IGNvZGUucmVwbGFjZSgvXFxuJC8sICcnKSArICdcXG4nO1xuICAgICAgICBpZiAoIWxhbmcpIHtcbiAgICAgICAgICAgIHJldHVybiAnPHByZT48Y29kZT4nXG4gICAgICAgICAgICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgKyAnPC9jb2RlPjwvcHJlPlxcbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICc8cHJlPjxjb2RlIGNsYXNzPVwiJ1xuICAgICAgICAgICAgKyB0aGlzLm9wdGlvbnMubGFuZ1ByZWZpeFxuICAgICAgICAgICAgKyBlc2NhcGUobGFuZylcbiAgICAgICAgICAgICsgJ1wiPidcbiAgICAgICAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICAgICAgICAgKyAnPC9jb2RlPjwvcHJlPlxcbic7XG4gICAgfVxuICAgIGJsb2NrcXVvdGUocXVvdGUpIHtcbiAgICAgICAgcmV0dXJuIGA8YmxvY2txdW90ZT5cXG4ke3F1b3RlfTwvYmxvY2txdW90ZT5cXG5gO1xuICAgIH1cbiAgICBodG1sKGh0bWwsIGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICBoZWFkaW5nKHRleHQsIGxldmVsLCByYXcsIHNsdWdnZXIpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJJZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeCArIHNsdWdnZXIuc2x1ZyhyYXcpO1xuICAgICAgICAgICAgcmV0dXJuIGA8aCR7bGV2ZWx9IGlkPVwiJHtpZH1cIj4ke3RleHR9PC9oJHtsZXZlbH0+XFxuYDtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZ25vcmUgSURzXG4gICAgICAgIHJldHVybiBgPGgke2xldmVsfT4ke3RleHR9PC9oJHtsZXZlbH0+XFxuYDtcbiAgICB9XG4gICAgaHIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xuICAgIH1cbiAgICBsaXN0KGJvZHksIG9yZGVyZWQsIHN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBvcmRlcmVkID8gJ29sJyA6ICd1bCc7XG4gICAgICAgIGNvbnN0IHN0YXJ0YXR0ID0gKG9yZGVyZWQgJiYgc3RhcnQgIT09IDEpID8gKCcgc3RhcnQ9XCInICsgc3RhcnQgKyAnXCInKSA6ICcnO1xuICAgICAgICByZXR1cm4gJzwnICsgdHlwZSArIHN0YXJ0YXR0ICsgJz5cXG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cXG4nO1xuICAgIH1cbiAgICBsaXN0aXRlbSh0ZXh0LCB0YXNrLCBjaGVja2VkKSB7XG4gICAgICAgIHJldHVybiBgPGxpPiR7dGV4dH08L2xpPlxcbmA7XG4gICAgfVxuICAgIGNoZWNrYm94KGNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuICc8aW5wdXQgJ1xuICAgICAgICAgICAgKyAoY2hlY2tlZCA/ICdjaGVja2VkPVwiXCIgJyA6ICcnKVxuICAgICAgICAgICAgKyAnZGlzYWJsZWQ9XCJcIiB0eXBlPVwiY2hlY2tib3hcIidcbiAgICAgICAgICAgICsgKHRoaXMub3B0aW9ucy54aHRtbCA/ICcgLycgOiAnJylcbiAgICAgICAgICAgICsgJz4gJztcbiAgICB9XG4gICAgcGFyYWdyYXBoKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGA8cD4ke3RleHR9PC9wPlxcbmA7XG4gICAgfVxuICAgIHRhYmxlKGhlYWRlciwgYm9keSkge1xuICAgICAgICBpZiAoYm9keSlcbiAgICAgICAgICAgIGJvZHkgPSBgPHRib2R5PiR7Ym9keX08L3Rib2R5PmA7XG4gICAgICAgIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICAgICAgICAgICsgJzx0aGVhZD5cXG4nXG4gICAgICAgICAgICArIGhlYWRlclxuICAgICAgICAgICAgKyAnPC90aGVhZD5cXG4nXG4gICAgICAgICAgICArIGJvZHlcbiAgICAgICAgICAgICsgJzwvdGFibGU+XFxuJztcbiAgICB9XG4gICAgdGFibGVyb3coY29udGVudCkge1xuICAgICAgICByZXR1cm4gYDx0cj5cXG4ke2NvbnRlbnR9PC90cj5cXG5gO1xuICAgIH1cbiAgICB0YWJsZWNlbGwoY29udGVudCwgZmxhZ3MpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGZsYWdzLmhlYWRlciA/ICd0aCcgOiAndGQnO1xuICAgICAgICBjb25zdCB0YWcgPSBmbGFncy5hbGlnblxuICAgICAgICAgICAgPyBgPCR7dHlwZX0gYWxpZ249XCIke2ZsYWdzLmFsaWdufVwiPmBcbiAgICAgICAgICAgIDogYDwke3R5cGV9PmA7XG4gICAgICAgIHJldHVybiB0YWcgKyBjb250ZW50ICsgYDwvJHt0eXBlfT5cXG5gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBzcGFuIGxldmVsIHJlbmRlcmVyXG4gICAgICovXG4gICAgc3Ryb25nKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGA8c3Ryb25nPiR7dGV4dH08L3N0cm9uZz5gO1xuICAgIH1cbiAgICBlbSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBgPGVtPiR7dGV4dH08L2VtPmA7XG4gICAgfVxuICAgIGNvZGVzcGFuKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGA8Y29kZT4ke3RleHR9PC9jb2RlPmA7XG4gICAgfVxuICAgIGJyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+JztcbiAgICB9XG4gICAgZGVsKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGA8ZGVsPiR7dGV4dH08L2RlbD5gO1xuICAgIH1cbiAgICBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNsZWFuSHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuICAgICAgICBpZiAoY2xlYW5IcmVmID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBocmVmID0gY2xlYW5IcmVmO1xuICAgICAgICBsZXQgb3V0ID0gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIic7XG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICBjb25zdCBjbGVhbkhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgICAgICAgaWYgKGNsZWFuSHJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgaHJlZiA9IGNsZWFuSHJlZjtcbiAgICAgICAgbGV0IG91dCA9IGA8aW1nIHNyYz1cIiR7aHJlZn1cIiBhbHQ9XCIke3RleHR9XCJgO1xuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgIG91dCArPSBgIHRpdGxlPVwiJHt0aXRsZX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG59XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuY2xhc3MgX1RleHRSZW5kZXJlciB7XG4gICAgLy8gbm8gbmVlZCBmb3IgYmxvY2sgbGV2ZWwgcmVuZGVyZXJzXG4gICAgc3Ryb25nKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGVtKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGNvZGVzcGFuKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGRlbCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBodG1sKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIHRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgbGluayhocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gJycgKyB0ZXh0O1xuICAgIH1cbiAgICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gJycgKyB0ZXh0O1xuICAgIH1cbiAgICBicigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTbHVnZ2VyIGdlbmVyYXRlcyBoZWFkZXIgaWRcbiAqL1xuY2xhc3MgX1NsdWdnZXIge1xuICAgIHNlZW47XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2VlbiA9IHt9O1xuICAgIH1cbiAgICBzZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgLy8gcmVtb3ZlIGh0bWwgdGFnc1xuICAgICAgICAgICAgLnJlcGxhY2UoLzxbIVxcL2Etel0uKj8+L2lnLCAnJylcbiAgICAgICAgICAgIC8vIHJlbW92ZSB1bndhbnRlZCBjaGFyc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHUyMDAwLVxcdTIwNkZcXHUyRTAwLVxcdTJFN0ZcXFxcJyFcIiMkJSYoKSorLC4vOjs8PT4/QFtcXF1eYHt8fX5dL2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xccy9nLCAnLScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgbmV4dCBzYWZlICh1bmlxdWUpIHNsdWcgdG8gdXNlXG4gICAgICovXG4gICAgZ2V0TmV4dFNhZmVTbHVnKG9yaWdpbmFsU2x1ZywgaXNEcnlSdW4pIHtcbiAgICAgICAgbGV0IHNsdWcgPSBvcmlnaW5hbFNsdWc7XG4gICAgICAgIGxldCBvY2N1cmVuY2VBY2N1bXVsYXRvciA9IDA7XG4gICAgICAgIGlmICh0aGlzLnNlZW4uaGFzT3duUHJvcGVydHkoc2x1ZykpIHtcbiAgICAgICAgICAgIG9jY3VyZW5jZUFjY3VtdWxhdG9yID0gdGhpcy5zZWVuW29yaWdpbmFsU2x1Z107XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IrKztcbiAgICAgICAgICAgICAgICBzbHVnID0gb3JpZ2luYWxTbHVnICsgJy0nICsgb2NjdXJlbmNlQWNjdW11bGF0b3I7XG4gICAgICAgICAgICB9IHdoaWxlICh0aGlzLnNlZW4uaGFzT3duUHJvcGVydHkoc2x1ZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNEcnlSdW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2VlbltvcmlnaW5hbFNsdWddID0gb2NjdXJlbmNlQWNjdW11bGF0b3I7XG4gICAgICAgICAgICB0aGlzLnNlZW5bc2x1Z10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbHVnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHN0cmluZyB0byB1bmlxdWUgaWRcbiAgICAgKi9cbiAgICBzbHVnKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3Qgc2x1ZyA9IHRoaXMuc2VyaWFsaXplKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmV4dFNhZmVTbHVnKHNsdWcsIG9wdGlvbnMuZHJ5cnVuKTtcbiAgICB9XG59XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5jbGFzcyBfUGFyc2VyIHtcbiAgICBvcHRpb25zO1xuICAgIHJlbmRlcmVyO1xuICAgIHRleHRSZW5kZXJlcjtcbiAgICBzbHVnZ2VyO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBleHBvcnRzLmRlZmF1bHRzO1xuICAgICAgICB0aGlzLm9wdGlvbnMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IF9SZW5kZXJlcigpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMudGV4dFJlbmRlcmVyID0gbmV3IF9UZXh0UmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zbHVnZ2VyID0gbmV3IF9TbHVnZ2VyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBQYXJzZSBNZXRob2RcbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2UodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBfUGFyc2VyKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBQYXJzZSBJbmxpbmUgTWV0aG9kXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlSW5saW5lKHRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgX1BhcnNlcihvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBMb29wXG4gICAgICovXG4gICAgcGFyc2UodG9rZW5zLCB0b3AgPSB0cnVlKSB7XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgLy8gUnVuIGFueSByZW5kZXJlciBleHRlbnNpb25zXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyaWNUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1tnZW5lcmljVG9rZW4udHlwZV0uY2FsbCh7IHBhcnNlcjogdGhpcyB9LCBnZW5lcmljVG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChyZXQgIT09IGZhbHNlIHx8ICFbJ3NwYWNlJywgJ2hyJywgJ2hlYWRpbmcnLCAnY29kZScsICd0YWJsZScsICdibG9ja3F1b3RlJywgJ2xpc3QnLCAnaHRtbCcsICdwYXJhZ3JhcGgnLCAndGV4dCddLmluY2x1ZGVzKGdlbmVyaWNUb2tlbi50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmV0IHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2hyJzoge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZ1Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmhlYWRpbmcodGhpcy5wYXJzZUlubGluZShoZWFkaW5nVG9rZW4udG9rZW5zKSwgaGVhZGluZ1Rva2VuLmRlcHRoLCB1bmVzY2FwZSh0aGlzLnBhcnNlSW5saW5lKGhlYWRpbmdUb2tlbi50b2tlbnMsIHRoaXMudGV4dFJlbmRlcmVyKSksIHRoaXMuc2x1Z2dlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdjb2RlJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZShjb2RlVG9rZW4udGV4dCwgY29kZVRva2VuLmxhbmcsICEhY29kZVRva2VuLmVzY2FwZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAndGFibGUnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAvLyBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YWJsZVRva2VuLmhlYWRlci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbCh0aGlzLnBhcnNlSW5saW5lKHRhYmxlVG9rZW4uaGVhZGVyW2pdLnRva2VucyksIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGFibGVUb2tlbi5hbGlnbltqXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YWJsZVRva2VuLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRhYmxlVG9rZW4ucm93c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcm93Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbCh0aGlzLnBhcnNlSW5saW5lKHJvd1trXS50b2tlbnMpLCB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0YWJsZVRva2VuLmFsaWduW2tdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlKGhlYWRlciwgYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdibG9ja3F1b3RlJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja3F1b3RlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IHRoaXMucGFyc2UoYmxvY2txdW90ZVRva2VuLnRva2Vucyk7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmJsb2NrcXVvdGUoYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdsaXN0Jzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JkZXJlZCA9IGxpc3RUb2tlbi5vcmRlcmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGxpc3RUb2tlbi5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9vc2UgPSBsaXN0VG9rZW4ubG9vc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdFRva2VuLml0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFRva2VuLml0ZW1zW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGl0ZW0uY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBpdGVtLnRhc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbUJvZHkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGVja2JveCA9IHRoaXMucmVuZGVyZXIuY2hlY2tib3goISFjaGVja2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9vc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udG9rZW5zLmxlbmd0aCA+IDAgJiYgaXRlbS50b2tlbnNbMF0udHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zWzBdLnRleHQgPSBjaGVja2JveCArICcgJyArIGl0ZW0udG9rZW5zWzBdLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50b2tlbnNbMF0udG9rZW5zICYmIGl0ZW0udG9rZW5zWzBdLnRva2Vucy5sZW5ndGggPiAwICYmIGl0ZW0udG9rZW5zWzBdLnRva2Vuc1swXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udGV4dCA9IGNoZWNrYm94ICsgJyAnICsgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRva2Vucy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogY2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtQm9keSArPSBjaGVja2JveDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtQm9keSArPSB0aGlzLnBhcnNlKGl0ZW0udG9rZW5zLCBsb29zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oaXRlbUJvZHksIHRhc2ssICEhY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBodG1sVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuaHRtbChodG1sVG9rZW4udGV4dCwgaHRtbFRva2VuLmJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3BhcmFncmFwaCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYWdyYXBoVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VJbmxpbmUocGFyYWdyYXBoVG9rZW4udG9rZW5zKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gdGV4dFRva2VuLnRva2VucyA/IHRoaXMucGFyc2VJbmxpbmUodGV4dFRva2VuLnRva2VucykgOiB0ZXh0VG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgKyAxIDwgdG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbaSArIDFdLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRva2VuID0gdG9rZW5zWysraV07XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICdcXG4nICsgKHRleHRUb2tlbi50b2tlbnMgPyB0aGlzLnBhcnNlSW5saW5lKHRleHRUb2tlbi50b2tlbnMpIDogdGV4dFRva2VuLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0b3AgPyB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaChib2R5KSA6IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBJbmxpbmUgVG9rZW5zXG4gICAgICovXG4gICAgcGFyc2VJbmxpbmUodG9rZW5zLCByZW5kZXJlcikge1xuICAgICAgICByZW5kZXJlciA9IHJlbmRlcmVyIHx8IHRoaXMucmVuZGVyZXI7XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgLy8gUnVuIGFueSByZW5kZXJlciBleHRlbnNpb25zXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXS5jYWxsKHsgcGFyc2VyOiB0aGlzIH0sIHRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAocmV0ICE9PSBmYWxzZSB8fCAhWydlc2NhcGUnLCAnaHRtbCcsICdsaW5rJywgJ2ltYWdlJywgJ3N0cm9uZycsICdlbScsICdjb2Rlc3BhbicsICdicicsICdkZWwnLCAndGV4dCddLmluY2x1ZGVzKHRva2VuLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSByZXQgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VzY2FwZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnRleHQoZXNjYXBlVG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuaHRtbCh0YWdUb2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIubGluayhsaW5rVG9rZW4uaHJlZiwgbGlua1Rva2VuLnRpdGxlLCB0aGlzLnBhcnNlSW5saW5lKGxpbmtUb2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdpbWFnZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuaW1hZ2UoaW1hZ2VUb2tlbi5ocmVmLCBpbWFnZVRva2VuLnRpdGxlLCBpbWFnZVRva2VuLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnc3Ryb25nJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJvbmdUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuc3Ryb25nKHRoaXMucGFyc2VJbmxpbmUoc3Ryb25nVG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZW0nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmVtKHRoaXMucGFyc2VJbmxpbmUoZW1Ub2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdjb2Rlc3Bhbic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZXNwYW5Ub2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuY29kZXNwYW4oY29kZXNwYW5Ub2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2JyJzoge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuYnIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmRlbCh0aGlzLnBhcnNlSW5saW5lKGRlbFRva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIudGV4dCh0ZXh0VG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbn1cblxuY2xhc3MgX0hvb2tzIHtcbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBleHBvcnRzLmRlZmF1bHRzO1xuICAgIH1cbiAgICBzdGF0aWMgcGFzc1Rocm91Z2hIb29rcyA9IG5ldyBTZXQoW1xuICAgICAgICAncHJlcHJvY2VzcycsXG4gICAgICAgICdwb3N0cHJvY2VzcydcbiAgICBdKTtcbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIG1hcmtkb3duIGJlZm9yZSBtYXJrZWRcbiAgICAgKi9cbiAgICBwcmVwcm9jZXNzKG1hcmtkb3duKSB7XG4gICAgICAgIHJldHVybiBtYXJrZG93bjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBIVE1MIGFmdGVyIG1hcmtlZCBpcyBmaW5pc2hlZFxuICAgICAqL1xuICAgIHBvc3Rwcm9jZXNzKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxufVxuXG5jbGFzcyBNYXJrZWQge1xuICAgIGRlZmF1bHRzID0gX2dldERlZmF1bHRzKCk7XG4gICAgb3B0aW9ucyA9IHRoaXMuc2V0T3B0aW9ucztcbiAgICBwYXJzZSA9IHRoaXMuI3BhcnNlTWFya2Rvd24oX0xleGVyLmxleCwgX1BhcnNlci5wYXJzZSk7XG4gICAgcGFyc2VJbmxpbmUgPSB0aGlzLiNwYXJzZU1hcmtkb3duKF9MZXhlci5sZXhJbmxpbmUsIF9QYXJzZXIucGFyc2VJbmxpbmUpO1xuICAgIFBhcnNlciA9IF9QYXJzZXI7XG4gICAgcGFyc2VyID0gX1BhcnNlci5wYXJzZTtcbiAgICBSZW5kZXJlciA9IF9SZW5kZXJlcjtcbiAgICBUZXh0UmVuZGVyZXIgPSBfVGV4dFJlbmRlcmVyO1xuICAgIExleGVyID0gX0xleGVyO1xuICAgIGxleGVyID0gX0xleGVyLmxleDtcbiAgICBUb2tlbml6ZXIgPSBfVG9rZW5pemVyO1xuICAgIFNsdWdnZXIgPSBfU2x1Z2dlcjtcbiAgICBIb29rcyA9IF9Ib29rcztcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMudXNlKC4uLmFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSdW4gY2FsbGJhY2sgZm9yIGV2ZXJ5IHRva2VuXG4gICAgICovXG4gICAgd2Fsa1Rva2Vucyh0b2tlbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoY2FsbGJhY2suY2FsbCh0aGlzLCB0b2tlbikpO1xuICAgICAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndGFibGUnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHRhYmxlVG9rZW4uaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHRoaXMud2Fsa1Rva2VucyhjZWxsLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0YWJsZVRva2VuLnJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiByb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHRoaXMud2Fsa1Rva2VucyhjZWxsLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnbGlzdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKGxpc3RUb2tlbi5pdGVtcywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJpY1Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRzLmV4dGVuc2lvbnM/LmNoaWxkVG9rZW5zPy5bZ2VuZXJpY1Rva2VuLnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRzLmV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZ2VuZXJpY1Rva2VuLnR5cGVdLmZvckVhY2goKGNoaWxkVG9rZW5zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh0aGlzLndhbGtUb2tlbnMoZ2VuZXJpY1Rva2VuW2NoaWxkVG9rZW5zXSwgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdlbmVyaWNUb2tlbi50b2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKGdlbmVyaWNUb2tlbi50b2tlbnMsIGNhbGxiYWNrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gICAgdXNlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZGVmYXVsdHMuZXh0ZW5zaW9ucyB8fCB7IHJlbmRlcmVyczoge30sIGNoaWxkVG9rZW5zOiB7fSB9O1xuICAgICAgICBhcmdzLmZvckVhY2goKHBhY2spID0+IHtcbiAgICAgICAgICAgIC8vIGNvcHkgb3B0aW9ucyB0byBuZXcgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBvcHRzID0geyAuLi5wYWNrIH07XG4gICAgICAgICAgICAvLyBzZXQgYXN5bmMgdG8gdHJ1ZSBpZiBpdCB3YXMgc2V0IHRvIHRydWUgYmVmb3JlXG4gICAgICAgICAgICBvcHRzLmFzeW5jID0gdGhpcy5kZWZhdWx0cy5hc3luYyB8fCBvcHRzLmFzeW5jIHx8IGZhbHNlO1xuICAgICAgICAgICAgLy8gPT0tLSBQYXJzZSBcImFkZG9uXCIgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgICAgICAgICBpZiAocGFjay5leHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgcGFjay5leHRlbnNpb25zLmZvckVhY2goKGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4dC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4dGVuc2lvbiBuYW1lIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdyZW5kZXJlcicgaW4gZXh0KSB7IC8vIFJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZSZW5kZXJlciA9IGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2UmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGV4dGVuc2lvbiB3aXRoIGZ1bmMgdG8gcnVuIG5ldyBleHRlbnNpb24gYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBleHQucmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5yZW5kZXJlcnNbZXh0Lm5hbWVdID0gZXh0LnJlbmRlcmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgndG9rZW5pemVyJyBpbiBleHQpIHsgLy8gVG9rZW5pemVyIEV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXh0LmxldmVsIHx8IChleHQubGV2ZWwgIT09ICdibG9jaycgJiYgZXh0LmxldmVsICE9PSAnaW5saW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRlbnNpb24gbGV2ZWwgbXVzdCBiZSAnYmxvY2snIG9yICdpbmxpbmUnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0TGV2ZWwgPSBleHRlbnNpb25zW2V4dC5sZXZlbF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRMZXZlbC51bnNoaWZ0KGV4dC50b2tlbml6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHQubGV2ZWxdID0gW2V4dC50b2tlbml6ZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dC5zdGFydCkgeyAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3Igc3RhcnQgb2YgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0LmxldmVsID09PSAnYmxvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0QmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRCbG9jay5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0QmxvY2sgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0SW5saW5lLnB1c2goZXh0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRJbmxpbmUgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoJ2NoaWxkVG9rZW5zJyBpbiBleHQgJiYgZXh0LmNoaWxkVG9rZW5zKSB7IC8vIENoaWxkIHRva2VucyB0byBiZSB2aXNpdGVkIGJ5IHdhbGtUb2tlbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZXh0Lm5hbWVdID0gZXh0LmNoaWxkVG9rZW5zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb3B0cy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vID09LS0gUGFyc2UgXCJvdmVyd3JpdGVcIiBleHRlbnNpb25zIC0tPT0gLy9cbiAgICAgICAgICAgIGlmIChwYWNrLnJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLmRlZmF1bHRzLnJlbmRlcmVyIHx8IG5ldyBfUmVuZGVyZXIodGhpcy5kZWZhdWx0cyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sucmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXJGdW5jID0gcGFjay5yZW5kZXJlcltwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXJLZXkgPSBwcm9wO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2UmVuZGVyZXIgPSByZW5kZXJlcltyZW5kZXJlcktleV07XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgcmVuZGVyZXIgd2l0aCBmdW5jIHRvIHJ1biBleHRlbnNpb24sIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXJbcmVuZGVyZXJLZXldID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSByZW5kZXJlckZ1bmMuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldCB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhY2sudG9rZW5pemVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5pemVyID0gdGhpcy5kZWZhdWx0cy50b2tlbml6ZXIgfHwgbmV3IF9Ub2tlbml6ZXIodGhpcy5kZWZhdWx0cyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sudG9rZW5pemVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuaXplckZ1bmMgPSBwYWNrLnRva2VuaXplcltwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5pemVyS2V5ID0gcHJvcDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldlRva2VuaXplciA9IHRva2VuaXplclt0b2tlbml6ZXJLZXldO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRva2VuaXplciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXJbdG9rZW5pemVyS2V5XSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gdG9rZW5pemVyRnVuYy5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2VG9rZW5pemVyLmFwcGx5KHRva2VuaXplciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vID09LS0gUGFyc2UgSG9va3MgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgICAgICAgICBpZiAocGFjay5ob29rcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvb2tzID0gdGhpcy5kZWZhdWx0cy5ob29rcyB8fCBuZXcgX0hvb2tzKCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2suaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9va3NGdW5jID0gcGFjay5ob29rc1twcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9va3NLZXkgPSBwcm9wO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2SG9vayA9IGhvb2tzW2hvb2tzS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9Ib29rcy5wYXNzVGhyb3VnaEhvb2tzLmhhcyhwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9va3NbaG9va3NLZXldID0gKGFyZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRzLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaG9va3NGdW5jLmNhbGwoaG9va3MsIGFyZykpLnRoZW4ocmV0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2SG9vay5jYWxsKGhvb2tzLCByZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0ID0gaG9va3NGdW5jLmNhbGwoaG9va3MsIGFyZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZIb29rLmNhbGwoaG9va3MsIHJldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG9va3NbaG9va3NLZXldID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gaG9va3NGdW5jLmFwcGx5KGhvb2tzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2SG9vay5hcHBseShob29rcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuaG9va3MgPSBob29rcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vID09LS0gUGFyc2UgV2Fsa1Rva2VucyBleHRlbnNpb25zIC0tPT0gLy9cbiAgICAgICAgICAgIGlmIChwYWNrLndhbGtUb2tlbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3YWxrVG9rZW5zID0gdGhpcy5kZWZhdWx0cy53YWxrVG9rZW5zO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhY2tXYWxrdG9rZW5zID0gcGFjay53YWxrVG9rZW5zO1xuICAgICAgICAgICAgICAgIG9wdHMud2Fsa1Rva2VucyA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHBhY2tXYWxrdG9rZW5zLmNhbGwodGhpcywgdG9rZW4pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhbGtUb2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQod2Fsa1Rva2Vucy5jYWxsKHRoaXMsIHRva2VuKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHsgLi4udGhpcy5kZWZhdWx0cywgLi4ub3B0cyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldE9wdGlvbnMob3B0KSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSB7IC4uLnRoaXMuZGVmYXVsdHMsIC4uLm9wdCB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgI3BhcnNlTWFya2Rvd24obGV4ZXIsIHBhcnNlcikge1xuICAgICAgICByZXR1cm4gKHNyYywgb3B0T3JDYWxsYmFjaywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0T3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0T3JDYWxsYmFjaztcbiAgICAgICAgICAgICAgICBvcHRPckNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9yaWdPcHQgPSB7IC4uLm9wdE9yQ2FsbGJhY2sgfTtcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IHsgLi4udGhpcy5kZWZhdWx0cywgLi4ub3JpZ09wdCB9O1xuICAgICAgICAgICAgLy8gU2hvdyB3YXJuaW5nIGlmIGFuIGV4dGVuc2lvbiBzZXQgYXN5bmMgdG8gdHJ1ZSBidXQgdGhlIHBhcnNlIHdhcyBjYWxsZWQgd2l0aCBhc3luYzogZmFsc2VcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRzLmFzeW5jID09PSB0cnVlICYmIG9yaWdPcHQuYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHQuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IFRoZSBhc3luYyBvcHRpb24gd2FzIHNldCB0byB0cnVlIGJ5IGFuIGV4dGVuc2lvbi4gVGhlIGFzeW5jOiBmYWxzZSBvcHRpb24gc2VudCB0byBwYXJzZSB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aHJvd0Vycm9yID0gdGhpcy4jb25FcnJvcighIW9wdC5zaWxlbnQsICEhb3B0LmFzeW5jLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyB0aHJvdyBlcnJvciBpbiBjYXNlIG9mIG5vbiBzdHJpbmcgaW5wdXRcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICAgICAgICAgICAgICAgICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNyYykgKyAnLCBzdHJpbmcgZXhwZWN0ZWQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja0RlcHJlY2F0aW9ucyhvcHQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChvcHQuaG9va3MpIHtcbiAgICAgICAgICAgICAgICBvcHQuaG9va3Mub3B0aW9ucyA9IG9wdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0ID0gb3B0LmhpZ2hsaWdodDtcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW5zO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQuaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IG9wdC5ob29rcy5wcmVwcm9jZXNzKHNyYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gbGV4ZXIoc3JjLCBvcHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG91dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gcGFyc2VyKHRva2Vucywgb3B0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0Lmhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCA9IG9wdC5ob29rcy5wb3N0cHJvY2VzcyhvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRocm93RXJyb3IoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXN1bHRDYWxsYmFjayhudWxsLCBvdXQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCFoaWdobGlnaHQgfHwgaGlnaGxpZ2h0Lmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9wdC5oaWdobGlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgICAgICAgIGxldCBwZW5kaW5nID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLndhbGtUb2tlbnModG9rZW5zLCAodG9rZW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdjb2RlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0KHRva2VuLnRleHQsIHRva2VuLmxhbmcsIChlcnIsIGNvZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSBudWxsICYmIGNvZGUgIT09IHRva2VuLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnRleHQgPSBjb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdC5hc3luYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob3B0Lmhvb2tzID8gb3B0Lmhvb2tzLnByZXByb2Nlc3Moc3JjKSA6IHNyYylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oc3JjID0+IGxleGVyKHNyYywgb3B0KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odG9rZW5zID0+IG9wdC53YWxrVG9rZW5zID8gUHJvbWlzZS5hbGwodGhpcy53YWxrVG9rZW5zKHRva2Vucywgb3B0LndhbGtUb2tlbnMpKS50aGVuKCgpID0+IHRva2VucykgOiB0b2tlbnMpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRva2VucyA9PiBwYXJzZXIodG9rZW5zLCBvcHQpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihodG1sID0+IG9wdC5ob29rcyA/IG9wdC5ob29rcy5wb3N0cHJvY2VzcyhodG1sKSA6IGh0bWwpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCh0aHJvd0Vycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5ob29rcykge1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSBvcHQuaG9va3MucHJlcHJvY2VzcyhzcmMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBsZXhlcihzcmMsIG9wdCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGh0bWwgPSBwYXJzZXIodG9rZW5zLCBvcHQpO1xuICAgICAgICAgICAgICAgIGlmIChvcHQuaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCA9IG9wdC5ob29rcy5wb3N0cHJvY2VzcyhodG1sKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAjb25FcnJvcihzaWxlbnQsIGFzeW5jLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gKGUpID0+IHtcbiAgICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQuJztcbiAgICAgICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICAgICAgICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9wcmU+JztcbiAgICAgICAgICAgICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbXNnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFzeW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmNvbnN0IG1hcmtlZEluc3RhbmNlID0gbmV3IE1hcmtlZCgpO1xuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBtYXJrZWRJbnN0YW5jZS5wYXJzZShzcmMsIG9wdCwgY2FsbGJhY2spO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgSGFzaCBvZiBvcHRpb25zXG4gKi9cbm1hcmtlZC5vcHRpb25zID1cbiAgICBtYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIG1hcmtlZEluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG1hcmtlZC5kZWZhdWx0cyA9IG1hcmtlZEluc3RhbmNlLmRlZmF1bHRzO1xuICAgICAgICBjaGFuZ2VEZWZhdWx0cyhtYXJrZWQuZGVmYXVsdHMpO1xuICAgICAgICByZXR1cm4gbWFya2VkO1xuICAgIH07XG4vKipcbiAqIEdldHMgdGhlIG9yaWdpbmFsIG1hcmtlZCBkZWZhdWx0IG9wdGlvbnMuXG4gKi9cbm1hcmtlZC5nZXREZWZhdWx0cyA9IF9nZXREZWZhdWx0cztcbm1hcmtlZC5kZWZhdWx0cyA9IGV4cG9ydHMuZGVmYXVsdHM7XG4vKipcbiAqIFVzZSBFeHRlbnNpb25cbiAqL1xubWFya2VkLnVzZSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgbWFya2VkSW5zdGFuY2UudXNlKC4uLmFyZ3MpO1xuICAgIG1hcmtlZC5kZWZhdWx0cyA9IG1hcmtlZEluc3RhbmNlLmRlZmF1bHRzO1xuICAgIGNoYW5nZURlZmF1bHRzKG1hcmtlZC5kZWZhdWx0cyk7XG4gICAgcmV0dXJuIG1hcmtlZDtcbn07XG4vKipcbiAqIFJ1biBjYWxsYmFjayBmb3IgZXZlcnkgdG9rZW5cbiAqL1xubWFya2VkLndhbGtUb2tlbnMgPSBmdW5jdGlvbiAodG9rZW5zLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBtYXJrZWRJbnN0YW5jZS53YWxrVG9rZW5zKHRva2VucywgY2FsbGJhY2spO1xufTtcbi8qKlxuICogQ29tcGlsZXMgbWFya2Rvd24gdG8gSFRNTCB3aXRob3V0IGVuY2xvc2luZyBgcGAgdGFnLlxuICpcbiAqIEBwYXJhbSBzcmMgU3RyaW5nIG9mIG1hcmtkb3duIHNvdXJjZSB0byBiZSBjb21waWxlZFxuICogQHBhcmFtIG9wdGlvbnMgSGFzaCBvZiBvcHRpb25zXG4gKiBAcmV0dXJuIFN0cmluZyBvZiBjb21waWxlZCBIVE1MXG4gKi9cbm1hcmtlZC5wYXJzZUlubGluZSA9IG1hcmtlZEluc3RhbmNlLnBhcnNlSW5saW5lO1xuLyoqXG4gKiBFeHBvc2VcbiAqL1xubWFya2VkLlBhcnNlciA9IF9QYXJzZXI7XG5tYXJrZWQucGFyc2VyID0gX1BhcnNlci5wYXJzZTtcbm1hcmtlZC5SZW5kZXJlciA9IF9SZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBfVGV4dFJlbmRlcmVyO1xubWFya2VkLkxleGVyID0gX0xleGVyO1xubWFya2VkLmxleGVyID0gX0xleGVyLmxleDtcbm1hcmtlZC5Ub2tlbml6ZXIgPSBfVG9rZW5pemVyO1xubWFya2VkLlNsdWdnZXIgPSBfU2x1Z2dlcjtcbm1hcmtlZC5Ib29rcyA9IF9Ib29rcztcbm1hcmtlZC5wYXJzZSA9IG1hcmtlZDtcbmNvbnN0IG9wdGlvbnMgPSBtYXJrZWQub3B0aW9ucztcbmNvbnN0IHNldE9wdGlvbnMgPSBtYXJrZWQuc2V0T3B0aW9ucztcbmNvbnN0IHVzZSA9IG1hcmtlZC51c2U7XG5jb25zdCB3YWxrVG9rZW5zID0gbWFya2VkLndhbGtUb2tlbnM7XG5jb25zdCBwYXJzZUlubGluZSA9IG1hcmtlZC5wYXJzZUlubGluZTtcbmNvbnN0IHBhcnNlID0gbWFya2VkO1xuY29uc3QgcGFyc2VyID0gX1BhcnNlci5wYXJzZTtcbmNvbnN0IGxleGVyID0gX0xleGVyLmxleDtcblxuZXhwb3J0cy5Ib29rcyA9IF9Ib29rcztcbmV4cG9ydHMuTGV4ZXIgPSBfTGV4ZXI7XG5leHBvcnRzLk1hcmtlZCA9IE1hcmtlZDtcbmV4cG9ydHMuUGFyc2VyID0gX1BhcnNlcjtcbmV4cG9ydHMuUmVuZGVyZXIgPSBfUmVuZGVyZXI7XG5leHBvcnRzLlNsdWdnZXIgPSBfU2x1Z2dlcjtcbmV4cG9ydHMuVGV4dFJlbmRlcmVyID0gX1RleHRSZW5kZXJlcjtcbmV4cG9ydHMuVG9rZW5pemVyID0gX1Rva2VuaXplcjtcbmV4cG9ydHMuZ2V0RGVmYXVsdHMgPSBfZ2V0RGVmYXVsdHM7XG5leHBvcnRzLmxleGVyID0gbGV4ZXI7XG5leHBvcnRzLm1hcmtlZCA9IG1hcmtlZDtcbmV4cG9ydHMub3B0aW9ucyA9IG9wdGlvbnM7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnBhcnNlSW5saW5lID0gcGFyc2VJbmxpbmU7XG5leHBvcnRzLnBhcnNlciA9IHBhcnNlcjtcbmV4cG9ydHMuc2V0T3B0aW9ucyA9IHNldE9wdGlvbnM7XG5leHBvcnRzLnVzZSA9IHVzZTtcbmV4cG9ydHMud2Fsa1Rva2VucyA9IHdhbGtUb2tlbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXJrZWQuY2pzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY2xhc3MgSFRNTEVsZW1lbnRXcmFwcGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZUNsYXNzKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzYWJsZUNsYXNzKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgaHRtbChjb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRWxlbWVudChuYW1lKXtcclxuICAgICAgICBsZXQgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgSFRNTEVsZW1lbnRXcmFwcGVyKG5ld0VsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xpY2soZnVuYylcclxuICAgIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub25jbGljayA9IGZ1bmM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICQoZWxlbWVudCkge1xyXG4gICAgaWYgKChlbGVtZW50IGluc3RhbmNlb2YgU3RyaW5nKSB8fCAodHlwZW9mIChlbGVtZW50KSA9PT0gJ3N0cmluZycpKSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQuaW5kZXhPZignIycpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBsZXQgZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudC5zdWJzdHIoMSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEhUTUxFbGVtZW50V3JhcHBlcihkb20pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkb20gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsZW1lbnQpWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEhUTUxFbGVtZW50V3JhcHBlcihkb20pO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIVE1MRWxlbWVudFdyYXBwZXIoZWxlbWVudCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCbG9nSGVscGVyIHtcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWFrS25pZ2h0L3dlYWtrbmlnaHQuZ2l0aHViLmlvL3Jhdy9tYXN0ZXIvc3JjL2Jsb2dzL2hlbGxvd29ybGQubWRcclxuICAgIHN0YXRpYyBnZXRCbG9nQ29udGVudChyZWxhdGl2ZVBhdGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgaWYgKEJsb2dIZWxwZXIuY2FjaGVbcmVsYXRpdmVQYXRoXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKEJsb2dIZWxwZXIuY2FjaGVbcmVsYXRpdmVQYXRoXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB1cmwgPSBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9XZWFrS25pZ2h0L3dlYWtrbmlnaHQuZ2l0aHViLmlvL21hc3Rlci9zcmMvYmxvZ3MvXCIgKyByZWxhdGl2ZVBhdGg7XHJcblxyXG4gICAgICAgICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xyXG4gICAgICAgICAgICAvLyB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEJsb2dIZWxwZXIuY2FjaGVbcmVsYXRpdmVQYXRoXSA9IHhoci5yZXNwb25zZVRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEJsb2dMaXN0KCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vV2Vha0tuaWdodC93ZWFra25pZ2h0LmdpdGh1Yi5pby9tYXN0ZXIvc3JjL2Jsb2dzL2Jsb2cuanNvblwiO1xyXG5cclxuICAgICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcclxuICAgICAgICAgICAgLy8geGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBpc1wiICsgeGhyLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2dTZXR0aW5ncyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmJsb2dTZXR0aW5ncy5hcnRpY2xlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhcnRpY2xlcyBpcyBcIiArIHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibGVuZ3RoIGlzIFwiICsgdGhpcy5ibG9nU2V0dGluZ3MuYXJ0aWNsZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkJsb2dIZWxwZXIuY2FjaGUgPSBbXTsiLCJpbXBvcnQgJCBmcm9tICcuL2NvcmUvdXRpbHMuanMnO1xyXG5pbXBvcnQgU3RhdGVNYWNoaW5lIGZyb20gJy4vY29yZS9zdGF0ZW1hY2hpbmUuanMnO1xyXG5pbXBvcnQgTmF2QmFyIGZyb20gJy4vY29tcG9uZW50cy9uYXZiYXIuanMnO1xyXG5pbXBvcnQgU2lkZUJhciBmcm9tICcuL2NvbXBvbmVudHMvc2lkZWJhci5qcyc7XHJcbmltcG9ydCBCbG9nSGVscGVyIGZyb20gJy4vY29yZS9ibG9naGVscGVyLmpzJztcclxuXHJcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcclxuaW1wb3J0ICcuL2hpZ2hsaWdodC5jc3MnO1xyXG5cclxuY29uc3QgeyBtYXJrZWQgfSA9IHJlcXVpcmUoXCJtYXJrZWRcIik7XHJcbm1hcmtlZC5zZXRPcHRpb25zKHtcclxuICAgIGhpZ2hsaWdodDogZnVuY3Rpb24gKGNvZGUsIGxhbmcpIHtcclxuICAgICAgICBjb25zdCBsYW5ndWFnZSA9IGhsanMuZ2V0TGFuZ3VhZ2UobGFuZykgPyBsYW5nIDogJ3BsYWludGV4dCc7XHJcbiAgICAgICAgcmV0dXJuIGhsanMuaGlnaGxpZ2h0KGNvZGUsIHsgbGFuZ3VhZ2UgfSkudmFsdWU7XHJcbiAgICB9LFxyXG4gICAgbGFuZ1ByZWZpeDogJ2hsanMgbGFuZ3VhZ2UtJyxcclxufSk7XHJcblxyXG5jb25zdCByZW5kZXJlciA9IG5ldyBtYXJrZWQuUmVuZGVyZXIoKTtcclxubGV0IG9yaWdpblBhcmFncmFwaCA9IHJlbmRlcmVyLnBhcmFncmFwaC5iaW5kKHJlbmRlcmVyKVxyXG5yZW5kZXJlci5wYXJhZ3JhcGggPSAodGV4dCkgPT4ge1xyXG4gICAgY29uc3QgYmxvY2tSZWdleCA9IC9cXCRcXCRbXlxcJF0qXFwkXFwkL2dcclxuICAgIGNvbnN0IGlubGluZVJlZ2V4ID0gL1xcJFteXFwkXSpcXCQvZ1xyXG4gICAgbGV0IGJsb2NrRXhwckFycmF5ID0gdGV4dC5tYXRjaChibG9ja1JlZ2V4KVxyXG4gICAgbGV0IGlubGluZUV4cHJBcnJheSA9IHRleHQubWF0Y2goaW5saW5lUmVnZXgpXHJcbiAgICBmb3IgKGxldCBpIGluIGJsb2NrRXhwckFycmF5KSB7XHJcbiAgICAgICAgY29uc3QgZXhwciA9IGJsb2NrRXhwckFycmF5W2ldXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVuZGVyTWF0aHNFeHByZXNzaW9uKGV4cHIpXHJcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShleHByLCByZXN1bHQpXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpIGluIGlubGluZUV4cHJBcnJheSkge1xyXG4gICAgICAgIGNvbnN0IGV4cHIgPSBpbmxpbmVFeHByQXJyYXlbaV1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSByZW5kZXJNYXRoc0V4cHJlc3Npb24oZXhwcilcclxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGV4cHIsIHJlc3VsdClcclxuICAgIH1cclxuICAgIHJldHVybiBvcmlnaW5QYXJhZ3JhcGgodGV4dClcclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlck1hdGhzRXhwcmVzc2lvbihleHByKSB7XHJcbiAgICBpZiAoZXhwclswXSA9PT0gJyQnICYmIGV4cHJbZXhwci5sZW5ndGggLSAxXSA9PT0gJyQnKSB7XHJcbiAgICAgICAgbGV0IGRpc3BsYXlTdHlsZSA9IGZhbHNlXHJcbiAgICAgICAgZXhwciA9IGV4cHIuc3Vic3RyKDEsIGV4cHIubGVuZ3RoIC0gMilcclxuICAgICAgICBpZiAoZXhwclswXSA9PT0gJyQnICYmIGV4cHJbZXhwci5sZW5ndGggLSAxXSA9PT0gJyQnKSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXlTdHlsZSA9IHRydWVcclxuICAgICAgICAgICAgZXhwciA9IGV4cHIuc3Vic3RyKDEsIGV4cHIubGVuZ3RoIC0gMilcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGh0bWwgPSBudWxsXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaHRtbCA9IGthdGV4LnJlbmRlclRvU3RyaW5nKGV4cHIpXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycihlKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlzcGxheVN0eWxlICYmIGh0bWwpIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvY2xhc3M9XCJrYXRleFwiL2csICdjbGFzcz1cImthdGV4IGthdGV4LWJsb2NrXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcIicpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBodG1sXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbn1cclxuXHJcbm1hcmtlZC5zZXRPcHRpb25zKHsgcmVuZGVyZXI6IHJlbmRlcmVyIH0pO1xyXG5cclxuY29uc3QgU1RBVEVfTk9ORSA9IC0xO1xyXG5jb25zdCBTVEFURV9IT01FID0gMDtcclxuY29uc3QgU1RBVEVfUFVCTElDQVRJT05TID0gMTtcclxuY29uc3QgU1RBVEVfUkVTVU1FID0gMjtcclxuXHJcbmxldCBjdXJyZW50QmxvZ1BhdGggPSBcIlwiO1xyXG5sZXQgY3VycmVudEJsb2dUaXRsZSA9IFwiXCI7XHJcblxyXG5sZXQgY2xlYXJDb250ZW50ID0gKCkgPT4ge1xyXG4gICAgJChcImNvbnRlbnRcIikuaHRtbChcIlwiKTtcclxufTtcclxuXHJcbmxldCBzaWRlQ2xvc2VCdXR0b24gPSAkKFwiI3NpZGUtY2xvc2UtYnV0dG9uXCIpO1xyXG5sZXQgc2lkZU9wZW5CdXR0b24gPSAkKFwiI3NpZGUtb3Blbi1idXR0b25cIik7XHJcblxyXG5zaWRlQ2xvc2VCdXR0b24ub25DbGljaygoZSkgPT4ge1xyXG4gICAgJChcInRvcG5hdlwiKS5lbmFibGVDbGFzcyhcInNpZGViYXItb2ZmXCIpO1xyXG4gICAgJChcInNpZGViYXJcIikuZW5hYmxlQ2xhc3MoXCJzaWRlYmFyLW9mZlwiKTtcclxuICAgICQoXCJjb250ZW50XCIpLmVuYWJsZUNsYXNzKFwic2lkZWJhci1vZmZcIik7XHJcbiAgICBzaWRlT3BlbkJ1dHRvbi5lbmFibGVDbGFzcyhcInNpZGViYXItb2ZmXCIpO1xyXG59KTtcclxuXHJcbnNpZGVPcGVuQnV0dG9uLm9uQ2xpY2soKGUpID0+IHtcclxuICAgICQoXCJ0b3BuYXZcIikuZGlzYWJsZUNsYXNzKFwic2lkZWJhci1vZmZcIik7XHJcbiAgICAkKFwic2lkZWJhclwiKS5kaXNhYmxlQ2xhc3MoXCJzaWRlYmFyLW9mZlwiKTtcclxuICAgICQoXCJjb250ZW50XCIpLmRpc2FibGVDbGFzcyhcInNpZGViYXItb2ZmXCIpO1xyXG4gICAgc2lkZUNsb3NlQnV0dG9uLmRpc2FibGVDbGFzcyhcInNpZGViYXItb2ZmXCIpO1xyXG4gICAgc2lkZU9wZW5CdXR0b24uZGlzYWJsZUNsYXNzKFwic2lkZWJhci1vZmZcIik7XHJcbn0pO1xyXG5cclxubGV0IGdsb2JhbFN0YXRlTWFoaW5lID0gbmV3IFN0YXRlTWFjaGluZShTVEFURV9IT01FKTtcclxuXHJcbmxldCBob21lID0gKCkgPT4ge1xyXG4gICAgZ2xvYmFsU3RhdGVNYWhpbmUuY2hhbmdlU3RhdGUoU1RBVEVfSE9NRSk7XHJcbn1cclxuXHJcbmxldCBwdWJsaWNhdGlvbnMgPSAoKSA9PiB7XHJcbiAgICBnbG9iYWxTdGF0ZU1haGluZS5jaGFuZ2VTdGF0ZShTVEFURV9QVUJMSUNBVElPTlMpO1xyXG59XHJcblxyXG5sZXQgcmVzdW1lID0gKCkgPT4ge1xyXG4gICAgZ2xvYmFsU3RhdGVNYWhpbmUuY2hhbmdlU3RhdGUoU1RBVEVfUkVTVU1FKTtcclxufVxyXG5cclxubGV0IG9uQ2hhbmdlID0gKHByZXZpb3VzLCBjdXJyZW50KSA9PiB7XHJcbiAgICBjbGVhckNvbnRlbnQoKTtcclxuXHJcbiAgICBpZiAoY3VycmVudCA9PT0gU1RBVEVfSE9NRSkge1xyXG4gICAgICAgICQoXCJ0b3BuYXZcIikuZGlzYWJsZUNsYXNzKFwic2lkZWJhci1vZmZcIik7XHJcbiAgICAgICAgJChcInNpZGViYXJcIikuZGlzYWJsZUNsYXNzKFwic2lkZWJhci1vZmZcIik7XHJcbiAgICAgICAgJChcImNvbnRlbnRcIikuZGlzYWJsZUNsYXNzKFwibm9TaWRlQmFyXCIpO1xyXG5cclxuICAgICAgICBCbG9nSGVscGVyLmdldEJsb2dDb250ZW50KGN1cnJlbnRCbG9nUGF0aCkudGhlbigoY29udGVudCkgPT4ge1xyXG4gICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGN1cnJlbnRCbG9nVGl0bGU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiYmxvZ1wiKS5odG1sKG1hcmtlZChjb250ZW50LCB7IHJlbmRlcmVyOiByZW5kZXJlciB9KSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgICQoXCJ0b3BuYXZcIikuZW5hYmxlQ2xhc3MoXCJzaWRlYmFyLW9mZlwiKTtcclxuICAgICAgICAkKFwic2lkZWJhclwiKS5lbmFibGVDbGFzcyhcInNpZGViYXItb2ZmXCIpO1xyXG4gICAgICAgICQoXCJjb250ZW50XCIpLmVuYWJsZUNsYXNzKFwibm9TaWRlQmFyXCIpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudCA9PT0gU1RBVEVfUkVTVU1FKSB7XHJcbiAgICAgICAgICAgIEJsb2dIZWxwZXIuZ2V0QmxvZ0NvbnRlbnQoJ3Jlc3VtZS5tZCcpLnRoZW4oKGNvbnRlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICQoXCJibG9nXCIpLmh0bWwobWFya2VkKGNvbnRlbnQsIHsgcmVuZGVyZXI6IHJlbmRlcmVyIH0pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnQgPT09IFNUQVRFX1BVQkxJQ0FUSU9OUykge1xyXG4gICAgICAgICAgICBCbG9nSGVscGVyLmdldEJsb2dDb250ZW50KCdwdWJsaWNhdGlvbnMubWQnKS50aGVuKChjb250ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKFwiYmxvZ1wiKS5odG1sKG1hcmtlZChjb250ZW50LCB7IHJlbmRlcmVyOiByZW5kZXJlciB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbmxldCBzaWRlQmFyID0gbmV3IFNpZGVCYXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaWRlXCIpLCBbXSwgMCk7XHJcbmxldCBuYXZCYXJJdGVtcyA9IFtcclxuICAgIC8vIFtcIkNvbnRhY3RcIiwgY29udGFjdF0sIFxyXG4gICAgW1wiUmVzdW3DqVwiLCByZXN1bWVdLFxyXG4gICAgW1wiUHVibGljYXRpb25zXCIsIHB1YmxpY2F0aW9uc10sXHJcbiAgICBbXCJIb21lXCIsIGhvbWVdXHJcbl07XHJcbmxldCBuYXZCYXIgPSBuZXcgTmF2QmFyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVhZGVyXCIpLFxyXG4gICAgbmF2QmFySXRlbXMsXHJcbiAgICBuYXZCYXJJdGVtcy5sZW5ndGggLSAxKTtcclxuXHJcbmdsb2JhbFN0YXRlTWFoaW5lLm9uQ2hhbmdlKG9uQ2hhbmdlKTtcclxuXHJcbkJsb2dIZWxwZXIuZ2V0QmxvZ0xpc3QoKS50aGVuKChhcnRpY2xlcykgPT4ge1xyXG5cclxuICAgIGxldCBoYXNoQmxvZ05hbWUgPSBcIlwiO1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoICE9IFwiXCIpIHtcclxuICAgICAgICBoYXNoQmxvZ05hbWUgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiaGFzaEJsb2dOYW1lIElzIFwiICsgaGFzaEJsb2dOYW1lKTtcclxuXHJcbiAgICBmb3IgKGxldCBhcnRpY2xlIG9mIGFydGljbGVzKSB7XHJcbiAgICAgICAgbGV0IGlzRGVmYXVsdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoaGFzaEJsb2dOYW1lICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgaWYgKChcIiNcIiArIGFydGljbGUudGl0bGUpID09IGhhc2hCbG9nTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmaW5kIGhhc2hlZCBkZWZhdWx0XCIpO1xyXG4gICAgICAgICAgICAgICAgaXNEZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghaXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgIGlmIChhcnRpY2xlW1wiZGVmYXVsdFwiXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJ0aWNsZVtcImRlZmF1bHRcIl0pO1xyXG4gICAgICAgICAgICAgICAgaXNEZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2lkZUJhci5hZGRJdGVtKGFydGljbGUudGl0bGUsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9nUGF0aCA9IGFydGljbGUucGF0aDtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9nVGl0bGUgPSBhcnRpY2xlLnRpdGxlICsgXCItLS0tVGlhbnl1IExpJ3MgQmxvZ1wiO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBjdXJyZW50QmxvZ1RpdGxlO1xyXG5cclxuICAgICAgICAgICAgICAgIEJsb2dIZWxwZXIuZ2V0QmxvZ0NvbnRlbnQoYXJ0aWNsZS5wYXRoKS50aGVuKChjb250ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcImJsb2dcIikuaHRtbChtYXJrZWQoY29udGVudCwgeyByZW5kZXJlcjogcmVuZGVyZXIgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc0RlZmF1bHQpO1xyXG5cclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggIT09IFwiI1B1YmxpY2F0aW9uc1wiICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoICE9PSBcIiNSZXN1bSVDMyVBOVwiICYmIGlzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICBjdXJyZW50QmxvZ1BhdGggPSBhcnRpY2xlLnBhdGg7XHJcbiAgICAgICAgICAgIGN1cnJlbnRCbG9nVGl0bGUgPSBhcnRpY2xlLnRpdGxlICsgXCItLS0tVGlhbnl1IExpJ3MgQmxvZ1wiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGN1cnJlbnRCbG9nVGl0bGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gXCIjUHVibGljYXRpb25zXCIpIHtcclxuICAgICAgICBuYXZCYXIuc2V0U2VsZWN0aW9uQnlJbmRleCgxKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBcIiNSZXN1bSVDMyVBOVwiKSB7XHJcbiAgICAgICAgbmF2QmFyLnNldFNlbGVjdGlvbkJ5SW5kZXgoMCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBuYXZCYXIuc2V0U2VsZWN0aW9uQnlJbmRleCgyKTtcclxuICAgIH1cclxufSlcclxuXHJcbiIsImltcG9ydCAkIGZyb20gJy4vdXRpbHMuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZU1hY2hpbmUge1xyXG4gICAgY29uc3RydWN0b3IoZGVmYXVsdFN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1N0YXRlID0gZGVmYXVsdFN0YXRlO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VMaXN0ZW5lciA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVN0YXRlKHN0YXRlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgY2FsbGJhY2sgb2YgdGhpcy5vbkNoYW5nZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY3VycmVudFN0YXRlLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByZXZpb3VzU3RhdGUgPSB0aGlzLmN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IHN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUxpc3RlbmVyLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUxpc3RlbmVyID0gW107XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgJy4vc2lkZWJhci5jc3MnO1xyXG5pbXBvcnQgJCBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lkZUJhciB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIGl0ZW1zLCBhY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleDtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcblxyXG4gICAgICAgIHRoaXMucGFyZW50LmNsYXNzTGlzdC5hZGQoJ3NpZGViYXInKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhKTtcclxuXHJcbiAgICAgICAgICAgIGEuaW5uZXJUZXh0ID0gaXRlbVswXTtcclxuICAgICAgICAgICAgYS5ocmVmID0gXCIjXCIgKyBpdGVtWzBdO1xyXG4gICAgICAgICAgICBhW1wiaW5kZXhcIl0gPSBpbmRleDtcclxuICAgICAgICAgICAgYS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmRpc2FibGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IGEuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAkKGEpLmVuYWJsZUNsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtWzFdKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShuYW1lLCBjYWxsYmFjaywgZGVmID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYSk7XHJcblxyXG4gICAgICAgIGEuaW5uZXJUZXh0ID0gbmFtZTtcclxuICAgICAgICBhLmhyZWYgPSBcIiNcIiArIG5hbWU7XHJcbiAgICAgICAgYVtcImluZGV4XCJdID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IG9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICQoY2hpbGQpLmRpc2FibGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBhLmluZGV4O1xyXG4gICAgICAgICAgICAkKGEpLmVuYWJsZUNsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBhLm9uY2xpY2sgPSBvbmNsaWNrO1xyXG5cclxuICAgICAgICBpZiAoYVtcImluZGV4XCJdID09PSB0aGlzLmFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZChhKTtcclxuXHJcbiAgICAgICAgaWYgKGRlZikge1xyXG4gICAgICAgICAgICBvbmNsaWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0ICcuL25hdmJhci5jc3MnO1xyXG5pbXBvcnQgJCBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2QmFyIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgaXRlbXMsIGFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4O1xyXG5cclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0b3BuYXYnKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xyXG5cclxuICAgICAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgdGl0bGUuaW5uZXJUZXh0ID0gXCJUaWFueXUncyBCbG9nXCI7XHJcbiAgICAgICAgdGl0bGUuc3R5bGUuZmxvYXQgPSBcImxlZnRcIjtcclxuICAgICAgICB0aXRsZS5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCJcclxuICAgICAgICB0aXRsZS5ocmVmID0gXCJodHRwczovL3dlYWtrbmlnaHQuZ2l0aHViLmlvL1wiO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhKTtcclxuXHJcbiAgICAgICAgICAgIGEuaW5uZXJUZXh0ID0gaXRlbVswXTtcclxuICAgICAgICAgICAgYS5ocmVmID0gXCIjXCIgKyBpdGVtWzBdO1xyXG4gICAgICAgICAgICBhW1wiaW5kZXhcIl0gPSBpbmRleDtcclxuICAgICAgICAgICAgYS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmRpc2FibGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IGEuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAkKGEpLmVuYWJsZUNsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtWzFdKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMuYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2VsZWN0aW9uQnlJbmRleCh0YXJnZXRJbmRleCkge1xyXG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgJChjaGlsZCkuZGlzYWJsZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYSA9IHRoaXMuY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHRhcmdldEluZGV4KXtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICQoYSkuZW5hYmxlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgaXRlbVsxXSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50Iiwic291cmNlTWFwIiwiYmFzZTY0IiwiZGF0YSIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiYXBpIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvcHRpb25zIiwibG9jYWxzIiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwicHJvdG90eXBlIiwiY2FsbCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9nZXREZWZhdWx0cyIsImFzeW5jIiwiYmFzZVVybCIsImJyZWFrcyIsImV4dGVuc2lvbnMiLCJnZm0iLCJoZWFkZXJJZHMiLCJoZWFkZXJQcmVmaXgiLCJoaWdobGlnaHQiLCJob29rcyIsImxhbmdQcmVmaXgiLCJtYW5nbGUiLCJwZWRhbnRpYyIsInJlbmRlcmVyIiwic2FuaXRpemUiLCJzYW5pdGl6ZXIiLCJzaWxlbnQiLCJzbWFydHlwYW50cyIsInRva2VuaXplciIsIndhbGtUb2tlbnMiLCJ4aHRtbCIsImNoYW5nZURlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJkZWZhdWx0cyIsImVzY2FwZVRlc3QiLCJlc2NhcGVSZXBsYWNlIiwiUmVnRXhwIiwiZXNjYXBlVGVzdE5vRW5jb2RlIiwiZXNjYXBlUmVwbGFjZU5vRW5jb2RlIiwiZXNjYXBlUmVwbGFjZW1lbnRzIiwiZ2V0RXNjYXBlUmVwbGFjZW1lbnQiLCJjaCIsImVzY2FwZSIsImh0bWwiLCJlbmNvZGUiLCJ0ZXN0IiwicmVwbGFjZSIsInVuZXNjYXBlVGVzdCIsIl8iLCJuIiwidG9Mb3dlckNhc2UiLCJjaGFyQXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUludCIsInN1YnN0cmluZyIsImNhcmV0IiwiZWRpdCIsInJlZ2V4Iiwib3B0IiwibmFtZSIsInZhbCIsImdldFJlZ2V4Iiwibm9uV29yZEFuZENvbG9uVGVzdCIsIm9yaWdpbkluZGVwZW5kZW50VXJsIiwiY2xlYW5VcmwiLCJocmVmIiwicHJvdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImluZGV4T2YiLCJiYXNlVXJscyIsImp1c3REb21haW4iLCJydHJpbSIsInJlbGF0aXZlQmFzZSIsInByb3RvY29sIiwiZG9tYWluIiwicmVzb2x2ZVVybCIsImVuY29kZVVSSSIsIm5vb3BUZXN0IiwiZXhlYyIsInNwbGl0Q2VsbHMiLCJ0YWJsZVJvdyIsImNlbGxzIiwibWF0Y2giLCJvZmZzZXQiLCJzdHIiLCJlc2NhcGVkIiwiY3VyciIsInNwbGl0IiwidHJpbSIsInNoaWZ0IiwicG9wIiwiYyIsImludmVydCIsImwiLCJzdWZmTGVuIiwiY3VyckNoYXIiLCJzbGljZSIsIm91dHB1dExpbmsiLCJjYXAiLCJsaW5rIiwicmF3IiwibGV4ZXIiLCJ0aXRsZSIsInRleHQiLCJzdGF0ZSIsImluTGluayIsInRva2VuIiwidHlwZSIsInRva2VucyIsImlubGluZVRva2VucyIsIl9Ub2tlbml6ZXIiLCJydWxlcyIsImNvbnN0cnVjdG9yIiwic3BhY2UiLCJzcmMiLCJibG9jayIsIm5ld2xpbmUiLCJjb2RlIiwiY29kZUJsb2NrU3R5bGUiLCJmZW5jZXMiLCJtYXRjaEluZGVudFRvQ29kZSIsImluZGVudFRvQ29kZSIsIm5vZGUiLCJtYXRjaEluZGVudEluTm9kZSIsImluZGVudEluTm9kZSIsImluZGVudENvZGVDb21wZW5zYXRpb24iLCJsYW5nIiwiaW5saW5lIiwiX2VzY2FwZXMiLCJoZWFkaW5nIiwidHJpbW1lZCIsImRlcHRoIiwiaHIiLCJibG9ja3F1b3RlIiwidG9wIiwiYmxvY2tUb2tlbnMiLCJidWxsIiwiaXNvcmRlcmVkIiwib3JkZXJlZCIsInN0YXJ0IiwibG9vc2UiLCJpdGVtcyIsIml0ZW1SZWdleCIsIml0ZW1Db250ZW50cyIsImVuZHNXaXRoQmxhbmtMaW5lIiwiZW5kRWFybHkiLCJsaW5lIiwidCIsInJlcGVhdCIsIm5leHRMaW5lIiwiaW5kZW50IiwidHJpbUxlZnQiLCJzZWFyY2giLCJibGFua0xpbmUiLCJuZXh0QnVsbGV0UmVnZXgiLCJNYXRoIiwibWluIiwiaHJSZWdleCIsImZlbmNlc0JlZ2luUmVnZXgiLCJoZWFkaW5nQmVnaW5SZWdleCIsInJhd0xpbmUiLCJpc2NoZWNrZWQiLCJpc3Rhc2siLCJ0YXNrIiwiY2hlY2tlZCIsInRyaW1SaWdodCIsInNwYWNlcnMiLCJoYXNNdWx0aXBsZUxpbmVCcmVha3MiLCJzb21lIiwicHJlIiwicGFyYWdyYXBoIiwiZGVmIiwidGFnIiwidGFibGUiLCJoZWFkZXIiLCJhbGlnbiIsInJvd3MiLCJqIiwiayIsInJvdyIsImxoZWFkaW5nIiwiaW5SYXdCbG9jayIsInRyaW1tZWRVcmwiLCJydHJpbVNsYXNoIiwibGFzdFBhcmVuSW5kZXgiLCJiIiwibGV2ZWwiLCJmaW5kQ2xvc2luZ0JyYWNrZXQiLCJsaW5rTGVuIiwicmVmbGluayIsImxpbmtzIiwibm9saW5rIiwiZW1TdHJvbmciLCJtYXNrZWRTcmMiLCJwcmV2Q2hhciIsImxEZWxpbSIsInB1bmN0dWF0aW9uIiwibExlbmd0aCIsInJEZWxpbSIsInJMZW5ndGgiLCJkZWxpbVRvdGFsIiwibWlkRGVsaW1Ub3RhbCIsImVuZFJlZyIsInJEZWxpbUFzdCIsInJEZWxpbVVuZCIsImxhc3RJbmRleCIsImNvZGVzcGFuIiwiaGFzTm9uU3BhY2VDaGFycyIsImhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzIiwiYnIiLCJkZWwiLCJhdXRvbGluayIsInVybCIsInByZXZDYXBaZXJvIiwiX2JhY2twZWRhbCIsImlubGluZVRleHQiLCJfcGFyYWdyYXBoIiwiX2xhYmVsIiwiX3RpdGxlIiwiYnVsbGV0IiwibGlzdEl0ZW1TdGFydCIsIl90YWciLCJfY29tbWVudCIsIm5vcm1hbCIsInJlZmxpbmtTZWFyY2giLCJvdXQiLCJyYW5kb20iLCJjaGFyQ29kZUF0IiwiX3B1bmN0dWF0aW9uIiwiYmxvY2tTa2lwIiwiYW55UHVuY3R1YXRpb24iLCJfc2NoZW1lIiwiX2VtYWlsIiwiX2F0dHJpYnV0ZSIsIl9ocmVmIiwic3Ryb25nIiwibWlkZGxlIiwiZW5kQXN0IiwiZW5kVW5kIiwiZW0iLCJfZXh0ZW5kZWRfZW1haWwiLCJfTGV4ZXIiLCJpbmxpbmVRdWV1ZSIsImNyZWF0ZSIsImxleCIsImxleElubGluZSIsIm5leHQiLCJsYXN0VG9rZW4iLCJjdXRTcmMiLCJsYXN0UGFyYWdyYXBoQ2xpcHBlZCIsImxlYWRpbmciLCJ0YWJzIiwiZXh0VG9rZW5pemVyIiwic3RhcnRCbG9jayIsInN0YXJ0SW5kZXgiLCJJbmZpbml0eSIsInRlbXBTcmMiLCJ0ZW1wU3RhcnQiLCJnZXRTdGFydEluZGV4IiwiZXJyTXNnIiwiY29uc29sZSIsImVycm9yIiwia2VlcFByZXZDaGFyIiwiaW5jbHVkZXMiLCJsYXN0SW5kZXhPZiIsInN0YXJ0SW5saW5lIiwiX1JlbmRlcmVyIiwiaW5mb3N0cmluZyIsInF1b3RlIiwic2x1Z2dlciIsInNsdWciLCJib2R5IiwibGlzdGl0ZW0iLCJjaGVja2JveCIsInRhYmxlcm93IiwidGFibGVjZWxsIiwiZmxhZ3MiLCJjbGVhbkhyZWYiLCJpbWFnZSIsIl9UZXh0UmVuZGVyZXIiLCJfU2x1Z2dlciIsInNlZW4iLCJzZXJpYWxpemUiLCJ2YWx1ZSIsImdldE5leHRTYWZlU2x1ZyIsIm9yaWdpbmFsU2x1ZyIsImlzRHJ5UnVuIiwib2NjdXJlbmNlQWNjdW11bGF0b3IiLCJoYXNPd25Qcm9wZXJ0eSIsImRyeXJ1biIsIl9QYXJzZXIiLCJ0ZXh0UmVuZGVyZXIiLCJwYXJzZSIsInBhcnNlSW5saW5lIiwicmVuZGVyZXJzIiwiZ2VuZXJpY1Rva2VuIiwicmV0IiwicGFyc2VyIiwiaGVhZGluZ1Rva2VuIiwiY29kZVRva2VuIiwidGFibGVUb2tlbiIsImNlbGwiLCJibG9ja3F1b3RlVG9rZW4iLCJsaXN0VG9rZW4iLCJpdGVtQm9keSIsInVuc2hpZnQiLCJodG1sVG9rZW4iLCJwYXJhZ3JhcGhUb2tlbiIsInRleHRUb2tlbiIsImVzY2FwZVRva2VuIiwidGFnVG9rZW4iLCJsaW5rVG9rZW4iLCJpbWFnZVRva2VuIiwic3Ryb25nVG9rZW4iLCJlbVRva2VuIiwiY29kZXNwYW5Ub2tlbiIsImRlbFRva2VuIiwiX0hvb2tzIiwic3RhdGljIiwiU2V0IiwicHJlcHJvY2VzcyIsIm1hcmtkb3duIiwicG9zdHByb2Nlc3MiLCJNYXJrZWQiLCJzZXRPcHRpb25zIiwiUGFyc2VyIiwiUmVuZGVyZXIiLCJUZXh0UmVuZGVyZXIiLCJMZXhlciIsIlRva2VuaXplciIsIlNsdWdnZXIiLCJIb29rcyIsImFyZ3MiLCJ1c2UiLCJjYWxsYmFjayIsInZhbHVlcyIsImNoaWxkVG9rZW5zIiwicGFjayIsIm9wdHMiLCJleHQiLCJwcmV2UmVuZGVyZXIiLCJhcHBseSIsImV4dExldmVsIiwicHJvcCIsInJlbmRlcmVyRnVuYyIsInJlbmRlcmVyS2V5IiwidG9rZW5pemVyRnVuYyIsInRva2VuaXplcktleSIsInByZXZUb2tlbml6ZXIiLCJob29rc0Z1bmMiLCJob29rc0tleSIsInByZXZIb29rIiwicGFzc1Rocm91Z2hIb29rcyIsImhhcyIsImFyZyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInBhY2tXYWxrdG9rZW5zIiwib3B0T3JDYWxsYmFjayIsIm9yaWdPcHQiLCJ3YXJuIiwidGhyb3dFcnJvciIsImNoZWNrRGVwcmVjYXRpb25zIiwicmVzdWx0Q2FsbGJhY2siLCJkb25lIiwiZXJyIiwicGVuZGluZyIsInNldFRpbWVvdXQiLCJjYXRjaCIsIm1lc3NhZ2UiLCJtc2ciLCJyZWplY3QiLCJtYXJrZWRJbnN0YW5jZSIsIm1hcmtlZCIsImdldERlZmF1bHRzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm5jIiwiSFRNTEVsZW1lbnRXcmFwcGVyIiwiZWxlbWVudCIsImVuYWJsZUNsYXNzIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwiZGlzYWJsZUNsYXNzIiwiaW5uZXJIVE1MIiwiYWRkRWxlbWVudCIsIm5ld0VsZW1lbnQiLCJvbkNsaWNrIiwiZnVuYyIsIm9uY2xpY2siLCIkIiwiZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdWJzdHIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiQmxvZ0hlbHBlciIsImdldEJsb2dDb250ZW50IiwicmVsYXRpdmVQYXRoIiwiY2FjaGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiZ2V0QmxvZ0xpc3QiLCJsb2ciLCJibG9nU2V0dGluZ3MiLCJhcnRpY2xlcyIsImxhbmd1YWdlIiwiaGxqcyIsImdldExhbmd1YWdlIiwib3JpZ2luUGFyYWdyYXBoIiwicmVuZGVyTWF0aHNFeHByZXNzaW9uIiwiZXhwciIsImRpc3BsYXlTdHlsZSIsImthdGV4IiwicmVuZGVyVG9TdHJpbmciLCJibG9ja0V4cHJBcnJheSIsImlubGluZUV4cHJBcnJheSIsImN1cnJlbnRCbG9nUGF0aCIsImN1cnJlbnRCbG9nVGl0bGUiLCJzaWRlQ2xvc2VCdXR0b24iLCJzaWRlT3BlbkJ1dHRvbiIsImdsb2JhbFN0YXRlTWFoaW5lIiwiZGVmYXVsdFN0YXRlIiwiY3VycmVudFN0YXRlIiwicHJldmlvdXNTdGF0ZSIsIm9uQ2hhbmdlTGlzdGVuZXIiLCJjaGFuZ2VTdGF0ZSIsIm9uQ2hhbmdlIiwiY2xlYXJMaXN0ZW5lciIsInNpZGVCYXIiLCJwYXJlbnQiLCJhY3RpdmVJbmRleCIsImNoaWxkcmVuIiwiYSIsImlubmVyVGV4dCIsImNoaWxkIiwiYWRkSXRlbSIsIm5hdkJhckl0ZW1zIiwibmF2QmFyIiwiY29udGFpbmVyIiwiZmxvYXQiLCJmb250V2VpZ2h0Iiwic2V0U2VsZWN0aW9uQnlJbmRleCIsInRhcmdldEluZGV4IiwicHJldmlvdXMiLCJjdXJyZW50IiwiaGFzaEJsb2dOYW1lIiwibG9jYXRpb24iLCJoYXNoIiwiYXJ0aWNsZSIsImlzRGVmYXVsdCIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9