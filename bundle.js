!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=18)}([function(e,t){const n=/[&<>"']/,r=/[&<>"']/g,s=/[<>"']|&(?!#?\w+;)/,i=/[<>"']|&(?!#?\w+;)/g,l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},o=e=>l[e];const a=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function c(e){return e.replace(a,(e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):"")}const h=/(^|[^\[])\^/g;const u=/[^\w:]/g,p=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;const d={},g=/^[^:]+:\/*[^/]*$/,f=/^([^:]+:)[\s\S]*$/,b=/^([^:]+:\/*[^/]*)[\s\S]*$/;function m(e,t){d[" "+e]||(g.test(e)?d[" "+e]=e+"/":d[" "+e]=x(e,"/",!0));const n=-1===(e=d[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(f,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(b,"$1")+t:e+t}function x(e,t,n){const r=e.length;if(0===r)return"";let s=0;for(;s<r;){const i=e.charAt(r-s-1);if(i!==t||n){if(i===t||!n)break;s++}else s++}return e.substr(0,r-s)}e.exports={escape:function(e,t){if(t){if(n.test(e))return e.replace(r,o)}else if(s.test(e))return e.replace(i,o);return e},unescape:c,edit:function(e,t){e=e.source||e,t=t||"";const n={replace:(t,r)=>(r=(r=r.source||r).replace(h,"$1"),e=e.replace(t,r),n),getRegex:()=>new RegExp(e,t)};return n},cleanUrl:function(e,t,n){if(e){let e;try{e=decodeURIComponent(c(n)).replace(u,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!p.test(n)&&(n=m(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n},resolveUrl:m,noopTest:{exec:function(){}},merge:function(e){let t,n,r=1;for(;r<arguments.length;r++)for(n in t=arguments[r],t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},splitCells:function(e,t){const n=e.replace(/\|/g,(e,t,n)=>{let r=!1,s=t;for(;--s>=0&&"\\"===n[s];)r=!r;return r?"|":" |"}).split(/ \|/);let r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n},rtrim:x,findClosingBracket:function(e,t){if(-1===e.indexOf(t[1]))return-1;const n=e.length;let r=0,s=0;for(;s<n;s++)if("\\"===e[s])s++;else if(e[s]===t[0])r++;else if(e[s]===t[1]&&(r--,r<0))return s;return-1},checkSanitizeDeprecation:function(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}}},function(e,t){function n(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1}}e.exports={defaults:{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,xhtml:!1},getDefaults:n,changeDefaults:function(t){e.exports.defaults=t}}},function(e,t,n){"use strict";var r,s=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),l={};function o(e,t,n){for(var r=0;r<t.length;r++){var s={css:t[r][1],media:t[r][2],sourceMap:t[r][3]};l[e][r]?l[e][r](s):l[e].push(f(s,n))}}function a(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var s=n.nc;s&&(r.nonce=s)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var l=i(e.insert||"head");if(!l)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");l.appendChild(t)}return t}var c,h=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,r){var s=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,s);else{var i=document.createTextNode(s),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(i,l[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,s=n.media,i=n.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,g=0;function f(e,t){var n,r,s;if(t.singleton){var i=g++;n=d||(d=a(t)),r=u.bind(null,n,i,!1),s=u.bind(null,n,i,!0)}else n=a(t),r=p.bind(null,n,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else s()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=s()),e=n.base?e+n.base:e,t=t||[],l[e]||(l[e]=[]),o(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){l[e]||(l[e]=[]),o(e,t,n);for(var r=t.length;r<l[e].length;r++)l[e][r]();l[e].length=t.length,0===l[e].length&&delete l[e]}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var s=(l=r,o=btoa(unescape(encodeURIComponent(JSON.stringify(l)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(a," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([s]).join("\n")}var l,o,a;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var s=[].concat(e[r]);n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s)}},t}},function(e,t,n){const{defaults:r}=n(1),{cleanUrl:s,escape:i}=n(0);e.exports=class{constructor(e){this.options=e||r}code(e,t,n){const r=(t||"").match(/\S*/)[0];if(this.options.highlight){const t=this.options.highlight(e,r);null!=t&&t!==e&&(n=!0,e=t)}return r?'<pre><code class="'+this.options.langPrefix+i(r,!0)+'">'+(n?e:i(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:i(e,!0))+"</code></pre>"}blockquote(e){return"<blockquote>\n"+e+"</blockquote>\n"}html(e){return e}heading(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){const r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"}listitem(e){return"<li>"+e+"</li>\n"}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return"<p>"+e+"</p>\n"}table(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return"<tr>\n"+e+"</tr>\n"}tablecell(e,t){const n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"}strong(e){return"<strong>"+e+"</strong>"}em(e){return"<em>"+e+"</em>"}codespan(e){return"<code>"+e+"</code>"}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return"<del>"+e+"</del>"}link(e,t,n){if(null===(e=s(this.options.sanitize,this.options.baseUrl,e)))return n;let r='<a href="'+i(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>",r}image(e,t,n){if(null===(e=s(this.options.sanitize,this.options.baseUrl,e)))return n;let r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">",r}text(e){return e}}},function(e,t,n){const{noopTest:r,edit:s,merge:i}=n(0),l={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:r,table:r,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};l.def=s(l.def).replace("label",l._label).replace("title",l._title).getRegex(),l.bullet=/(?:[*+-]|\d{1,9}\.)/,l.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,l.item=s(l.item,"gm").replace(/bull/g,l.bullet).getRegex(),l.list=s(l.list).replace(/bull/g,l.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+l.def.source+")").getRegex(),l._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",l._comment=/<!--(?!-?>)[\s\S]*?-->/,l.html=s(l.html,"i").replace("comment",l._comment).replace("tag",l._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),l.paragraph=s(l._paragraph).replace("hr",l.hr).replace("heading"," {0,3}#{1,6} +").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",l._tag).getRegex(),l.blockquote=s(l.blockquote).replace("paragraph",l.paragraph).getRegex(),l.normal=i({},l),l.gfm=i({},l.normal,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),l.pedantic=i({},l.normal,{html:s("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",l._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:r,paragraph:s(l.normal._paragraph).replace("hr",l.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",l.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});const o={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:r,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:r,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/,_punctuation:"!\"#$%&'()*+,\\-./:;<=>?@\\[^_{|}~"};o.em=s(o.em).replace(/punctuation/g,o._punctuation).getRegex(),o._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,o._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,o._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,o.autolink=s(o.autolink).replace("scheme",o._scheme).replace("email",o._email).getRegex(),o._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,o.tag=s(o.tag).replace("comment",l._comment).replace("attribute",o._attribute).getRegex(),o._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,o._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,o._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,o.link=s(o.link).replace("label",o._label).replace("href",o._href).replace("title",o._title).getRegex(),o.reflink=s(o.reflink).replace("label",o._label).getRegex(),o.normal=i({},o),o.pedantic=i({},o.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:s(/^!?\[(label)\]\((.*?)\)/).replace("label",o._label).getRegex(),reflink:s(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",o._label).getRegex()}),o.gfm=i({},o.normal,{escape:s(o.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),o.gfm.url=s(o.gfm.url,"i").replace("email",o.gfm._extended_email).getRegex(),o.breaks=i({},o.gfm,{br:s(o.br).replace("{2,}","*").getRegex(),text:s(o.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),e.exports={block:l,inline:o}},function(e,t){e.exports=class{constructor(){this.seen={}}slug(e){let t=e.toLowerCase().trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){const e=t;do{this.seen[e]++,t=e+"-"+this.seen[e]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t}}},function(e,t,n){const r=n(4),{defaults:s}=n(1),{inline:i}=n(5),{findClosingBracket:l,escape:o}=n(0);e.exports=class e{constructor(e,t){if(this.options=t||s,this.links=e,this.rules=i.normal,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=i.pedantic:this.options.gfm&&(this.options.breaks?this.rules=i.breaks:this.rules=i.gfm)}static get rules(){return i}static output(t,n,r){return new e(n,r).output(t)}output(t){let n,r,s,i,a,c,h="";for(;t;)if(a=this.rules.escape.exec(t))t=t.substring(a[0].length),h+=o(a[1]);else if(a=this.rules.tag.exec(t))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(a[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(a[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(a[0])&&(this.inRawBlock=!1),t=t.substring(a[0].length),h+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):o(a[0]):a[0];else if(a=this.rules.link.exec(t)){const r=l(a[2],"()");if(r>-1){const e=(0===a[0].indexOf("!")?5:4)+a[1].length+r;a[2]=a[2].substring(0,r),a[0]=a[0].substring(0,e).trim(),a[3]=""}t=t.substring(a[0].length),this.inLink=!0,s=a[2],this.options.pedantic?(n=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(s),n?(s=n[1],i=n[3]):i=""):i=a[3]?a[3].slice(1,-1):"",s=s.trim().replace(/^<([\s\S]*)>$/,"$1"),h+=this.outputLink(a,{href:e.escapes(s),title:e.escapes(i)}),this.inLink=!1}else if((a=this.rules.reflink.exec(t))||(a=this.rules.nolink.exec(t))){if(t=t.substring(a[0].length),n=(a[2]||a[1]).replace(/\s+/g," "),n=this.links[n.toLowerCase()],!n||!n.href){h+=a[0].charAt(0),t=a[0].substring(1)+t;continue}this.inLink=!0,h+=this.outputLink(a,n),this.inLink=!1}else if(a=this.rules.strong.exec(t))t=t.substring(a[0].length),h+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(t))t=t.substring(a[0].length),h+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(t))t=t.substring(a[0].length),h+=this.renderer.codespan(o(a[2].trim(),!0));else if(a=this.rules.br.exec(t))t=t.substring(a[0].length),h+=this.renderer.br();else if(a=this.rules.del.exec(t))t=t.substring(a[0].length),h+=this.renderer.del(this.output(a[1]));else if(a=this.rules.autolink.exec(t))t=t.substring(a[0].length),"@"===a[2]?(r=o(this.mangle(a[1])),s="mailto:"+r):(r=o(a[1]),s=r),h+=this.renderer.link(s,null,r);else if(this.inLink||!(a=this.rules.url.exec(t))){if(a=this.rules.text.exec(t))t=t.substring(a[0].length),this.inRawBlock?h+=this.renderer.text(this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):o(a[0]):a[0]):h+=this.renderer.text(o(this.smartypants(a[0])));else if(t)throw new Error("Infinite loop on byte: "+t.charCodeAt(0))}else{if("@"===a[2])r=o(a[0]),s="mailto:"+r;else{do{c=a[0],a[0]=this.rules._backpedal.exec(a[0])[0]}while(c!==a[0]);r=o(a[0]),s="www."===a[1]?"http://"+r:r}t=t.substring(a[0].length),h+=this.renderer.link(s,null,r)}return h}static escapes(t){return t?t.replace(e.rules._escapes,"$1"):t}outputLink(e,t){const n=t.href,r=t.title?o(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,o(e[1]))}smartypants(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e}mangle(e){if(!this.options.mangle)return e;const t=e.length;let n,r="",s=0;for(;s<t;s++)n=e.charCodeAt(s),Math.random()>.5&&(n="x"+n.toString(16)),r+="&#"+n+";";return r}}},function(e,t){e.exports=class{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}},function(e,t,n){var r=n(2),s=n(10);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var i={insert:"head",singleton:!1},l=(r(e.i,s,i),s.locals?s.locals:{});e.exports=l},function(e,t,n){(t=n(3)(!1)).push([e.i,".topnav {\r\n    background-color: #373738;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    position: fixed;\r\n    top: 0px;\r\n    z-index: 10000;\r\n}\r\n\r\n.topnav a {\r\n    float: right;\r\n    color: #cccccc;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n.topnav a:hover {\r\n    background-color: #505050;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}\r\n\r\n.topnav a.active {\r\n    background-color: #303030;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}",""]),e.exports=t},function(e,t,n){var r=n(2),s=n(12);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var i={insert:"head",singleton:!1},l=(r(e.i,s,i),s.locals?s.locals:{});e.exports=l},function(e,t,n){(t=n(3)(!1)).push([e.i,".sidebar {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 200px;\r\n    background-color: rgb(37, 37, 38);\r\n    position: fixed;\r\n    height: calc(100% - 51px);\r\n    overflow: auto;\r\n    top: 51px;\r\n}\r\n\r\n.sidebar.sidebar-off{\r\n    display: none;\r\n}\r\n\r\n.sidebar a {\r\n    display: block;\r\n    color: #cccccc;\r\n    padding: 7px;\r\n    text-decoration: none;\r\n    font-size: 13px;\r\n    text-align: center;\r\n}\r\n\r\n.sidebar a.active {\r\n    background-color: rgb(55, 55, 61);\r\n    color: #cccccc;\r\n}\r\n\r\n.sidebar a:hover:not(.active) {\r\n    background-color: rgb(42, 45, 46);\r\n    color: #cccccc;\r\n}",""]),e.exports=t},function(e,t,n){var r=n(2),s=n(14);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var i={insert:"head",singleton:!1},l=(r(e.i,s,i),s.locals?s.locals:{});e.exports=l},function(e,t,n){(t=n(3)(!1)).push([e.i,"body {\r\n    background-color: #303030 !important;\r\n    margin: 0;\r\n}\r\n\r\ndiv.content {\r\n    margin-left: 200px;\r\n    top: 51px;\r\n    position: fixed;\r\n    /* padding: 1px 16px; */\r\n    height: calc(100% - 51px);\r\n    width: calc(100% - 200px);\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n}\r\n\r\ndiv.content.sidebar-off {\r\n    width: 100%;\r\n}\r\n\r\n.blog>p {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h1 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h2 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h3 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h4 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog {\r\n    padding: 20px;\r\n    margin-top: 20px;\r\n}\r\n\r\n/* width */\r\n::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n    background: rgb(30, 30, 30);\r\n    border-left: 1px solid rgb(66, 66, 66);\r\n    border-right: 1px solid rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: rgb(66, 66, 66);\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: rgb(79, 79, 79);\r\n}",""]),e.exports=t},function(e,t,n){const r=n(16),s=n(17),i=n(4),l=n(8),o=n(7),a=n(6),{merge:c,checkSanitizeDeprecation:h,escape:u}=n(0),{getDefaults:p,changeDefaults:d,defaults:g}=n(1);function f(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),t=c({},f.defaults,t||{}),h(t);const i=t.highlight;let l,o,a=0;try{l=r.lex(e,t)}catch(e){return n(e)}o=l.length;const u=function(e){if(e)return t.highlight=i,n(e);let r;try{r=s.parse(l,t)}catch(t){e=t}return t.highlight=i,e?n(e):n(null,r)};if(!i||i.length<3)return u();if(delete t.highlight,!o)return u();for(;a<l.length;a++)!function(e){"code"!==e.type?--o||u():i(e.text,e.lang,(function(t,n){return t?u(t):null==n||n===e.text?--o||u():(e.text=n,e.escaped=!0,void(--o||u()))}))}(l[a])}else try{return t=c({},f.defaults,t||{}),h(t),s.parse(r.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||f.defaults).silent)return"<p>An error occurred:</p><pre>"+u(e.message+"",!0)+"</pre>";throw e}}f.options=f.setOptions=function(e){return c(f.defaults,e),d(f.defaults),f},f.getDefaults=p,f.defaults=g,f.Parser=s,f.parser=s.parse,f.Renderer=i,f.TextRenderer=l,f.Lexer=r,f.lexer=r.lex,f.InlineLexer=o,f.inlineLexer=o.output,f.Slugger=a,f.parse=f,e.exports=f},function(e,t,n){const{defaults:r}=n(1),{block:s}=n(5),{rtrim:i,splitCells:l,escape:o}=n(0);e.exports=class e{constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||r,this.rules=s.normal,this.options.pedantic?this.rules=s.pedantic:this.options.gfm&&(this.rules=s.gfm)}static get rules(){return s}static lex(t,n){return new e(n).lex(t)}lex(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    "),this.token(e,!0)}token(e,t){let n,r,a,c,h,u,p,d,g,f,b,m,x,k,_,w;for(e=e.replace(/^ +$/gm,"");e;)if((a=this.rules.newline.exec(e))&&(e=e.substring(a[0].length),a[0].length>1&&this.tokens.push({type:"space"})),a=this.rules.code.exec(e)){const t=this.tokens[this.tokens.length-1];e=e.substring(a[0].length),t&&"paragraph"===t.type?t.text+="\n"+a[0].trimRight():(a=a[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",codeBlockStyle:"indented",text:this.options.pedantic?a:i(a,"\n")}))}else if(a=this.rules.fences.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"code",lang:a[2]?a[2].trim():a[2],text:a[3]||""});else if(a=this.rules.heading.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"heading",depth:a[1].length,text:a[2]});else if((a=this.rules.nptable.exec(e))&&(u={type:"table",header:l(a[1].replace(/^ *| *\| *$/g,"")),align:a[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:a[3]?a[3].replace(/\n$/,"").split("\n"):[]},u.header.length===u.align.length)){for(e=e.substring(a[0].length),b=0;b<u.align.length;b++)/^ *-+: *$/.test(u.align[b])?u.align[b]="right":/^ *:-+: *$/.test(u.align[b])?u.align[b]="center":/^ *:-+ *$/.test(u.align[b])?u.align[b]="left":u.align[b]=null;for(b=0;b<u.cells.length;b++)u.cells[b]=l(u.cells[b],u.header.length);this.tokens.push(u)}else if(a=this.rules.hr.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"hr"});else if(a=this.rules.blockquote.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"blockquote_start"}),a=a[0].replace(/^ *> ?/gm,""),this.token(a,t),this.tokens.push({type:"blockquote_end"});else if(a=this.rules.list.exec(e)){for(e=e.substring(a[0].length),c=a[2],k=c.length>1,p={type:"list_start",ordered:k,start:k?+c:"",loose:!1},this.tokens.push(p),a=a[0].match(this.rules.item),d=[],n=!1,x=a.length,b=0;b<x;b++)u=a[b],f=u.length,u=u.replace(/^ *([*+-]|\d+\.) */,""),~u.indexOf("\n ")&&(f-=u.length,u=this.options.pedantic?u.replace(/^ {1,4}/gm,""):u.replace(new RegExp("^ {1,"+f+"}","gm"),"")),b!==x-1&&(h=s.bullet.exec(a[b+1])[0],(c.length>1?1===h.length:h.length>1||this.options.smartLists&&h!==c)&&(e=a.slice(b+1).join("\n")+e,b=x-1)),r=n||/\n\n(?!\s*$)/.test(u),b!==x-1&&(n="\n"===u.charAt(u.length-1),r||(r=n)),r&&(p.loose=!0),_=/^\[[ xX]\] /.test(u),w=void 0,_&&(w=" "!==u[1],u=u.replace(/^\[[ xX]\] +/,"")),g={type:"list_item_start",task:_,checked:w,loose:r},d.push(g),this.tokens.push(g),this.token(u,!1),this.tokens.push({type:"list_item_end"});if(p.loose)for(x=d.length,b=0;b<x;b++)d[b].loose=!0;this.tokens.push({type:"list_end"})}else if(a=this.rules.html.exec(e))e=e.substring(a[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===a[1]||"script"===a[1]||"style"===a[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):o(a[0]):a[0]});else if(t&&(a=this.rules.def.exec(e)))e=e.substring(a[0].length),a[3]&&(a[3]=a[3].substring(1,a[3].length-1)),m=a[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[m]||(this.tokens.links[m]={href:a[2],title:a[3]});else if((a=this.rules.table.exec(e))&&(u={type:"table",header:l(a[1].replace(/^ *| *\| *$/g,"")),align:a[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:a[3]?a[3].replace(/\n$/,"").split("\n"):[]},u.header.length===u.align.length)){for(e=e.substring(a[0].length),b=0;b<u.align.length;b++)/^ *-+: *$/.test(u.align[b])?u.align[b]="right":/^ *:-+: *$/.test(u.align[b])?u.align[b]="center":/^ *:-+ *$/.test(u.align[b])?u.align[b]="left":u.align[b]=null;for(b=0;b<u.cells.length;b++)u.cells[b]=l(u.cells[b].replace(/^ *\| *| *\| *$/g,""),u.header.length);this.tokens.push(u)}else if(a=this.rules.lheading.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"heading",depth:"="===a[2].charAt(0)?1:2,text:a[1]});else if(t&&(a=this.rules.paragraph.exec(e)))e=e.substring(a[0].length),this.tokens.push({type:"paragraph",text:"\n"===a[1].charAt(a[1].length-1)?a[1].slice(0,-1):a[1]});else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),this.tokens.push({type:"text",text:a[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens}}},function(e,t,n){const r=n(4),s=n(6),i=n(7),l=n(8),{defaults:o}=n(1),{merge:a,unescape:c}=n(0);e.exports=class e{constructor(e){this.tokens=[],this.token=null,this.options=e||o,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options,this.slugger=new s}static parse(t,n){return new e(n).parse(t)}parse(e){this.inline=new i(e.links,this.options),this.inlineText=new i(e.links,a({},this.options,{renderer:new l})),this.tokens=e.reverse();let t="";for(;this.next();)t+=this.tok();return t}next(){return this.token=this.tokens.pop(),this.token}peek(){return this.tokens[this.tokens.length-1]||0}parseText(){let e=this.token.text;for(;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)}tok(){let e="";switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,c(this.inlineText.output(this.token.text)),this.slugger);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":{let t,n,r,s,i="";for(r="",t=0;t<this.token.header.length;t++)r+=this.renderer.tablecell(this.inline.output(this.token.header[t]),{header:!0,align:this.token.align[t]});for(i+=this.renderer.tablerow(r),t=0;t<this.token.cells.length;t++){for(n=this.token.cells[t],r="",s=0;s<n.length;s++)r+=this.renderer.tablecell(this.inline.output(n[s]),{header:!1,align:this.token.align[s]});e+=this.renderer.tablerow(r)}return this.renderer.table(i,e)}case"blockquote_start":for(e="";"blockquote_end"!==this.next().type;)e+=this.tok();return this.renderer.blockquote(e);case"list_start":{e="";const t=this.token.ordered,n=this.token.start;for(;"list_end"!==this.next().type;)e+=this.tok();return this.renderer.list(e,t,n)}case"list_item_start":{e="";const t=this.token.loose,n=this.token.checked,r=this.token.task;if(this.token.task)if(t)if("text"===this.peek().type){const e=this.peek();e.text=this.renderer.checkbox(n)+" "+e.text}else this.tokens.push({type:"text",text:this.renderer.checkbox(n)});else e+=this.renderer.checkbox(n);for(;"list_item_end"!==this.next().type;)e+=t||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(e,r,n)}case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText());default:{const e='Token with "'+this.token.type+'" type was not found.';if(!this.options.silent)throw new Error(e);console.log(e)}}}}},function(e,t,n){"use strict";n.r(t);class r{constructor(e){this.element=e}enableClass(e){return this.element.classList.add(e),this}disableClass(e){return this.element.classList.remove(e),this}html(e){return this.element.innerHTML=e,this}addElement(e){let t=document.createElement(e);return this.element.appendChild(t),new r(t)}}function s(e){if(e instanceof String||"string"==typeof e){if(-1!==e.indexOf("#")){let t=document.getElementById(e);return new r(t)}{let t=document.getElementsByClassName(e)[0];return new r(t)}}return new r(e)}n(9);n(11);class i{static getBlogContent(e){return new Promise(t=>{void 0!==i.cache[e]&&t(i.cache[e]);let n="https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/"+e,r=new XMLHttpRequest;r.open("GET",n),r.onload=()=>{200==r.status&&(i.cache[e]=r.responseText,t(r.responseText))},r.send()})}static getBlogList(){return new Promise(e=>{let t=new XMLHttpRequest;t.open("GET","https://raw.githubusercontent.com/WeakKnight/weakknight.github.io/master/src/blogs/blog.json"),t.onload=()=>{console.log("status is"+t.status),200==t.status&&(this.blogSettings=JSON.parse(t.responseText),e(this.blogSettings.articles),console.log("articles is "+t.responseText),console.log("length is "+this.blogSettings.articles.length))},t.send()})}}i.cache=[];n(13);const l=n(15),o=new l.Renderer;let a="",c=new class{constructor(e){this.currentState=e,this.previousState=e,this.onChangeListener=[]}changeState(e){for(let t of this.onChangeListener)t(this.currentState,e);this.previousState=this.currentState,this.currentState=e}onChange(e){this.onChangeListener.push(e)}clearListener(){this.onChangeListener=[]}}(0),h=(e,t)=>{e!==t&&s("content").html(""),0===t&&0!==e&&(s("topnav").disableClass("sidebar-off"),s("sidebar").disableClass("sidebar-off"),i.getBlogContent(a).then(e=>{s("blog").html(l(e,{renderer:o}))})),0!==t&&0===e&&(s("topnav").enableClass("sidebar-off"),s("sidebar").enableClass("sidebar-off"),2===t&&i.getBlogContent("contact.md").then(e=>{s("blog").html(l(e,{renderer:o}))}),1===t&&i.getBlogContent("portfolio.md").then(e=>{s("blog").html(l(e,{renderer:o}))}))},u=new class{constructor(e,t,n){this.activeIndex=n,this.parent=e,this.parent.classList.add("sidebar"),this.children=[],this.items=t,this.items.forEach((e,t)=>{let n=document.createElement("a");this.children.push(n),n.innerText=e[0],n.href="#"+e[0],n.index=t,n.onclick=()=>{for(let e of this.children)s(e).disableClass("active");this.activeIndex=n.index,s(n).enableClass("active"),e[1]()},t===this.activeIndex&&n.classList.add("active"),this.parent.appendChild(n)})}addItem(e,t,n=!1){let r=document.createElement("a");this.children.push(r),r.innerText=e,r.href="#"+e,r.index=this.children.length;let i=()=>{for(let e of this.children)s(e).disableClass("active");this.activeIndex=r.index,s(r).enableClass("active"),t()};r.onclick=i,r.index===this.activeIndex&&r.classList.add("active"),this.parent.appendChild(r),n&&i()}}(document.getElementById("side"),[],0);new class{constructor(e,t,n){this.activeIndex=n,this.parent=e,this.container=document.createElement("div"),this.container.classList.add("topnav"),this.parent.appendChild(this.container),this.children=[],this.items=t,this.items.forEach((e,t)=>{let n=document.createElement("a");this.children.push(n),n.innerText=e[0],n.href="#"+e[0],n.index=t,n.onclick=()=>{for(let e of this.children)s(e).disableClass("active");this.activeIndex=n.index,s(n).enableClass("active"),e[1]()},t===this.activeIndex&&n.classList.add("active"),this.container.appendChild(n)})}}(document.getElementById("header"),[["Home",()=>{c.changeState(0)}]],0);c.onChange(h),h(-1,0),i.getBlogList().then(e=>{let t="";""!=window.location.hash&&(t=decodeURIComponent(window.location.hash)),console.log("hashBlogName Is "+t);for(let n of e){let e=!1;""!=t?"#"+n.title==t&&(console.log("find hashed default"),e=!0):!0===n.default&&(console.log(n.default),e=!0),u.addItem(n.title,()=>{a=n.path,i.getBlogContent(n.path).then(e=>{s("blog").html(l(e,{renderer:o}))})},e)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,