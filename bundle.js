!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=9)}([function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a={};function c(e,n,t){for(var r=0;r<n.length;r++){var o={css:n[r][1],media:n[r][2],sourceMap:n[r][3]};a[e][r]?a[e][r](o):a[e].push(g(o,t))}}function s(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,d=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function u(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function p(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,f=0;function g(e,n){var t,r,o;if(n.singleton){var i=f++;t=h||(h=s(n)),r=u.bind(null,t,i,!1),o=u.bind(null,t,i,!0)}else t=s(n),r=p.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n,t){return(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o()),e=t.base?e+t.base:e,n=n||[],a[e]||(a[e]=[]),c(e,n,t),function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){a[e]||(a[e]=[]),c(e,n,t);for(var r=n.length;r<a[e].length;r++)a[e][r]();a[e].length=n.length,0===a[e].length&&delete a[e]}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var a,c,s;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);t&&(o[2]?o[2]="".concat(t," and ").concat(o[2]):o[2]=t),n.push(o)}},n}},function(e,n,t){var r=t(0),o=t(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(e.i,o,i),o.locals?o.locals:{});e.exports=a},function(e,n,t){(n=t(1)(!1)).push([e.i,".topnav {\r\n    background-color: #373738;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    position: fixed;\r\n    top: 0px;\r\n    z-index: 10000;\r\n}\r\n\r\n.topnav a {\r\n    float: right;\r\n    color: #cccccc;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n.topnav a:hover {\r\n    background-color: #505050;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}\r\n\r\n.topnav a.active {\r\n    background-color: #303030;\r\n    text-decoration: none;\r\n    color: #cccccc;\r\n}",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(5);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(e.i,o,i),o.locals?o.locals:{});e.exports=a},function(e,n,t){(n=t(1)(!1)).push([e.i,".sidebar {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 200px;\r\n    background-color: rgb(37, 37, 38);\r\n    position: fixed;\r\n    height: calc(100% - 51px);\r\n    overflow: auto;\r\n    top: 51px;\r\n}\r\n\r\n.sidebar.sidebar-off{\r\n    display: none;\r\n}\r\n\r\n.sidebar a {\r\n    display: block;\r\n    color: #cccccc;\r\n    padding: 7px;\r\n    text-decoration: none;\r\n    font-size: 13px;\r\n    text-align: center;\r\n}\r\n\r\n.sidebar a.active {\r\n    background-color: rgb(55, 55, 61);\r\n    color: #cccccc;\r\n}\r\n\r\n.sidebar a:hover:not(.active) {\r\n    background-color: rgb(42, 45, 46);\r\n    color: #cccccc;\r\n}",""]),e.exports=n},function(e,n,t){var r=t(0),o=t(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(r(e.i,o,i),o.locals?o.locals:{});e.exports=a},function(e,n,t){(n=t(1)(!1)).push([e.i,"body {\r\n    background-color: #303030 !important;\r\n    margin: 0;\r\n}\r\n\r\ndiv.content {\r\n    margin-left: 200px;\r\n    top: 51px;\r\n    position: fixed;\r\n    /* padding: 1px 16px; */\r\n    height: calc(100% - 51px);\r\n    width: calc(100% - 200px);\r\n    overflow-x: hidden; \r\n    overflow-y: auto; \r\n}\r\n\r\ndiv.content.sidebar-off {\r\n    width: 100%;\r\n}\r\n\r\n.blog>p {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h1 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h2 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog>h3 {\r\n    color: rgb(212, 212, 212);\r\n}\r\n\r\n.blog {\r\n    padding: 20px;\r\n    margin-top: 20px;\r\n}",""]),e.exports=n},function(e,n){e.exports='<h2 id="hello-world">Hello World!</h2>\n<h3 id="2019-12-27">2019-12-27</h3>\n<p>I am Tianyu Li, currently a graphics focus graduate student. I will share my experience about graphics and programming topics via this blog website! My recent work is mainly about Ray Tracing and NURBS modeling technique. Next semester, I plan to implement my own realtime renderer in Rust Programming language, which is going to support physics animation, gpu based ray tracing, and pbr based realtime rendering. If you are interested at Rust or graphics topics, you can visit this website on a monthly basis to check my updates. </p>\n<p>This website was designed to be a website with no thirdparty dependency except for Webpack. I implemented every details required by a static blog website. Because of its staticity, you can not leave a review on this web page, I am glad to build further contacts with you by Email. Feel free to contact me!</p>\n<p><img src="https://github.com/WeakKnight/weakknight.github.io/raw/master/assets/rtanimation.gif" alt="alt"/> \n<img src="https://github.com/WeakKnight/weakknight.github.io/raw/master/assets/pthighssp.png" alt="alt"/> </p>\n'},function(e,n,t){"use strict";t.r(n);class r{constructor(e){this.element=e}enableClass(e){return this.element.classList.add(e),this}disableClass(e){return this.element.classList.remove(e),this}html(e){return this.element.innerHTML=e,this}addElement(e){let n=document.createElement(e);return this.element.appendChild(n),new r(n)}}function o(e){if(e instanceof String||"string"==typeof e){if(-1!==e.indexOf("#")){let n=document.getElementById(e);return new r(n)}{let n=document.getElementsByClassName(e)[0];return new r(n)}}return new r(e)}t(2);t(4);t(6);var i=t(8);console.log(i);let a=new class{constructor(e){this.currentState=e,this.previousState=e,this.onChangeListener=[]}changeState(e){for(let n of this.onChangeListener)n(this.currentState,e);this.previousState=this.currentState,this.currentState=e}onChange(e){this.onChangeListener.push(e)}clearListener(){this.onChangeListener=[]}}(0),c=(e,n)=>{e!==n&&o("content").html(""),0===n&&0!==e&&(o("topnav").disableClass("sidebar-off"),o("sidebar").disableClass("sidebar-off"),o("content").addElement("div").enableClass("blog").html(i)),0!==n&&0===e&&(o("topnav").enableClass("sidebar-off"),o("sidebar").enableClass("sidebar-off"))};new class{constructor(e,n,t){this.activeIndex=t,this.parent=e,this.container=document.createElement("div"),this.container.classList.add("topnav"),this.parent.appendChild(this.container),this.children=[],this.items=n,this.items.forEach((e,n)=>{let t=document.createElement("a");this.children.push(t),t.innerText=e[0],t.href="#"+e[0],t.index=n,t.onclick=()=>{for(let e of this.children)o(e).disableClass("active");this.activeIndex=t.index,o(t).enableClass("active"),e[1]()},n===this.activeIndex&&t.classList.add("active"),this.container.appendChild(t)})}}(document.getElementById("header"),[["Contact",()=>{a.changeState(2)}],["Portfolio",()=>{a.changeState(1)}],["Home",()=>{a.changeState(0)}]],2);a.onChange(c),c(-1,0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,